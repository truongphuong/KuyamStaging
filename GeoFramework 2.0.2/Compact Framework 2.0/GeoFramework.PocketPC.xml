<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GeoFramework.PocketPC</name>
    </assembly>
    <members>
        <member name="T:GeoFramework.Segment">
            <summary>
            Represents a line connected by two points on Earth's surface.
            </summary>
        </member>
        <member name="M:GeoFramework.Segment.#ctor(GeoFramework.Position,GeoFramework.Position)">
            <summary>Creates a new instance using the specified end points.</summary>
        </member>
        <member name="M:GeoFramework.Segment.DistanceTo(GeoFramework.Position)">
            <summary>
            Returns the distance from the segment to the specified position.
            </summary>
            <param name="position"></param>
            <returns></returns>
            <remarks>This method analyzes the relative position of the segment to the line to determine the
            best mathematical approach.</remarks>
        </member>
        <member name="P:GeoFramework.Segment.Distance">
            <summary>
            Returns the distance from the starting point to the end point.
            </summary>
        </member>
        <member name="P:GeoFramework.Segment.Bearing">
            <summary>
            Returns the bearing from the start to the end of the line.
            </summary>
        </member>
        <member name="P:GeoFramework.Segment.Start">
            <summary>
            Returns the starting point of the segment.
            </summary>
        </member>
        <member name="P:GeoFramework.Segment.End">
            <summary>
            Returns the end point of the segment.
            </summary>
        </member>
        <member name="P:GeoFramework.Segment.Midpoint">
            <summary>Returns the location halfway from the start to the end point.</summary>
        </member>
        <member name="T:GeoFramework.Position">
            <summary>Represents a specific location on Earth's surface.</summary>
            <remarks>
            	<para>Instances of this class are guaranteed to be thread-safe because the class is
                immutable (its properties can only be changed via constructors).</para>
            </remarks>
        </member>
        <member name="T:GeoFramework.ICloneable`1">
            <summary>
            Facilitates the creation of a deep copy of an object.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:GeoFramework.ICloneable`1.Clone">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="F:GeoFramework.Position.Empty">
            <summary>Represents the location at 0°, 0°.</summary>
        </member>
        <member name="F:GeoFramework.Position.Minimum">
            <summary>Represents the smallest possible location of 90°S, 180°W.</summary>
        </member>
        <member name="F:GeoFramework.Position.Maximum">
            <summary>Represents the largest possible location of 90°N, 180°E.</summary>
        </member>
        <member name="F:GeoFramework.Position.NorthPole">
            <summary>Represents the single point at the top of Earth: 90°N, 0°E.</summary>
        </member>
        <member name="F:GeoFramework.Position.SouthPole">
            <summary>Represents the single point at the bottom of Earth: 90°S, 0°E.</summary>
        </member>
        <member name="F:GeoFramework.Position.Invalid">
            <summary>Represents an invalid or unspecified value.</summary>
        </member>
        <member name="M:GeoFramework.Position.#ctor(GeoFramework.Longitude,GeoFramework.Latitude)">
            <summary>
            Creates a new instance from the specified longitude and latitude.
            </summary>
            <param name="longitude"></param>
            <param name="latitude"></param>
        </member>
        <member name="M:GeoFramework.Position.#ctor(GeoFramework.Latitude,GeoFramework.Longitude)">
            <summary>
            Creates a new instance from the specified latitude and longitude.
            </summary>
            <param name="longitude"></param>
            <param name="latitude"></param>
        </member>
        <member name="M:GeoFramework.Position.#ctor(System.String)">
            <summary>
            Creates a new instance by parsing latitude and longitude from a single string.
            </summary>
            <param name="value">A <strong>String</strong> containing both a latitude and longitude to parse.</param>
        </member>
        <member name="M:GeoFramework.Position.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance by interpreting the specified latitude and longitude.
            </summary>
            <param name="latitude">A <strong>String</strong> describing a latitude in the current culture.</param>
            <param name="longitude">A <strong>String</strong> describing a longitude in the current culture.</param>
            <remarks>Latitude and longitude values are parsed using the current local culture.  For better support
            of international cultures, add a CultureInfo parameter.</remarks>
        </member>
        <member name="M:GeoFramework.Position.#ctor(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance by interpreting the specified latitude and longitude.
            </summary>
            <param name="latitude">A <strong>String</strong> describing a latitude in the current culture.</param>
            <param name="longitude">A <strong>String</strong> describing a longitude in the current culture.</param>
            <remarks>Latitude and longitude values are parsed using the current local culture.  For better support
            of international cultures, a CultureInfo parameter should be specified to indicate how numbers should
            be parsed.</remarks>
        </member>
        <member name="M:GeoFramework.Position.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance by converting the specified string using the specific culture.
            </summary>
            <param name="value"></param>
            <param name="culture"></param>
        </member>
        <member name="M:GeoFramework.Position.#ctor(GeoFramework.Position)">
            <summary>
            Creates a copy of the specified object.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:GeoFramework.Position.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new position by deserializing the specified XML content.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:GeoFramework.Position.ToString(System.String)">
            <overloads>Outputs the current instance as a formatted string.</overloads>
            <summary>
            Outputs the current instance as a string using the specified format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Position.ToCartesianPoint">
            <summary>
            Converts the current instance into an Earth-centered, Earth-fixed (ECEF) Cartesian point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Position.BearingTo(GeoFramework.Position)">
            <summary>
            Calculates the direction of travel to the specified destination.
            </summary>
            <param name="destination">A <strong>Position</strong> object to which the bearing is calculated.</param>
            <returns>An <strong>Azimuth</strong> object representing the calculated distance.</returns>
        </member>
        <member name="M:GeoFramework.Position.BearingTo(GeoFramework.Position,GeoFramework.Ellipsoid)">
            <summary>
            Calculates the direction of travel to the specified destination using the specified interpretation of Earth's shape.
            </summary>
            <param name="destination">A <strong>Position</strong> object to which the bearing is calculated.</param>
            <param name="ellipsoid">An <strong>Ellipsoid</strong> object used to fine-tune bearing calculations.</param>
            <returns>An <strong>Azimuth</strong> object representing the calculated distance.</returns>
        </member>
        <member name="M:GeoFramework.Position.SpeedTo(GeoFramework.Position,System.TimeSpan)">
            <summary>
            Returns the minimum speed required to travel from the current location to the
            specified destination within the specified period of time.
            </summary>
        </member>
        <member name="M:GeoFramework.Position.IsNorthOf(GeoFramework.Position)">
            <summary>
            Indicates if the current instance is North of the specified position.
            </summary>
            <param name="value">A <strong>Position</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more North than the specified instance.</returns>
        </member>
        <member name="M:GeoFramework.Position.IsSouthOf(GeoFramework.Position)">
            <summary>
            Indicates if the current instance is South of the specified position.
            </summary>
            <param name="value">A <strong>Position</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more South than the specified instance.</returns>
        </member>
        <member name="M:GeoFramework.Position.IsEastOf(GeoFramework.Position)">
            <summary>
            Indicates if the current instance is East of the specified position.
            </summary>
            <param name="value">A <strong>Position</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more East than the specified instance.</returns>
        </member>
        <member name="M:GeoFramework.Position.IsWestOf(GeoFramework.Position)">
            <summary>
            Indicates if the current instance is West of the specified position.
            </summary>
            <param name="value">A <strong>Position</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more West than the specified instance.</returns>
        </member>
        <member name="M:GeoFramework.Position.TimeTo(GeoFramework.Position,GeoFramework.Speed)">
            <summary>
            Returns the minimum time required to travel to the given destination at the
            specified constant speed.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The TimeTo method expects a value for Speed greater than zero.</exception>
        </member>
        <member name="M:GeoFramework.Position.DistanceTo(GeoFramework.Position)">
            <overloads>Calculates the great circle distance between any two points on 
            Earth.</overloads>
            <summary>
            Returns the distance over land from the given starting point to the specified
            destination.
            </summary>
            <returns>
            A <strong>Distance</strong> object containing the calculated distance in
            kilometers.
            </returns>
            <param name="destination">The ending point of a segment.</param>
            <remarks>
            This method uses trigonometry to calculate the Great Circle (over Earth's curved
            surface) distance between any two points on Earth. The distance is returned in
            kilometers but can be converted to any other unit type using methods in the
            <see cref="T:GeoFramework.Distance">Distance</see>
            class.
            </remarks>
        </member>
        <member name="M:GeoFramework.Position.DistanceTo(GeoFramework.Position,System.Boolean)">
            <overloads>Calculates the great circle distance between any two points on 
            Earth.</overloads>
            <summary>
            Returns the distance over land from the given starting point to the specified
            destination.
            </summary>
            <returns>
            A <strong>Distance</strong> object containing the calculated distance in
            kilometers.
            </returns>
            <param name="destination">The ending point of a segment.</param>
            <remarks>
            This method uses a high-speed formula to determine the Great Circle distance from one
            point to another.  This method is typically used in situations where hundreds of distance
            measurements must be made in a short period of time.  The <strong>DistanceTo</strong> method
            produces accuracy to one millimeter, but its formula is about a hundred times slower than this 
            method.  
            <see cref="T:GeoFramework.Distance">Distance</see>
            class.
            </remarks>
        </member>
        <member name="M:GeoFramework.Position.DistanceTo(GeoFramework.Position,GeoFramework.Ellipsoid,System.Boolean)">
            <overloads>Calculates the great circle distance between any two points on 
            Earth.</overloads>
            <summary>
            Returns the distance over land from the given starting point to the specified
            destination.
            </summary>
            <returns>
            A <strong>Distance</strong> object containing the calculated distance in
            kilometers.
            </returns>
            <param name="destination">The ending point of a segment.</param>
            <remarks>
            This method uses a high-speed formula to determine the Great Circle distance from one
            point to another.  This method is typically used in situations where hundreds of distance
            measurements must be made in a short period of time.  The <strong>DistanceTo</strong> method
            produces accuracy to one millimeter, but its formula is about a hundred times slower than this 
            method.  
            <see cref="T:GeoFramework.Distance">Distance</see>
            class.
            </remarks>
        </member>
        <member name="M:GeoFramework.Position.DistanceTo(GeoFramework.Position,GeoFramework.Ellipsoid)">
            <overloads>Calculates the great circle distance between any two points on 
            Earth using a specific model of Earth's shape.</overloads>
            <summary>
            Returns the distance over land from the given starting point to the specified
            destination.
            </summary>
            <returns>
            A <strong>Distance</strong> object containing the calculated distance in
            kilometers.
            </returns>
            <param name="destination">The ending point of a segment.</param>
            <param name="ellipsoid">The model of the Earth to use for the distance calculation.</param>
            <remarks>
            This method uses trigonometry to calculate the Great Circle (over Earth's curved
            surface) distance between any two points on Earth. The distance is returned in
            kilometers but can be converted to any other unit type using methods in the
            <see cref="T:GeoFramework.Distance">Distance</see>
            class.
            </remarks>
        </member>
        <member name="M:GeoFramework.Position.DistanceTo(GeoFramework.Position,GeoFramework.Speed,System.TimeSpan)">
            <summary>
            Returns the remaining travel distance if traveling for a certain speed for a certain period of time.
            </summary>
            <param name="destination">A <strong>Position</strong> marking the destination location.</param>
            <param name="speed">A <strong>Speed</strong> travelled from the current instance.</param>
            <param name="time">A <strong>TimeSpan</strong> representing the time already elapsed during transit to the destination.</param>
            <returns>A <strong>Distance</strong> measuring the remaining distance to travel.</returns>
        </member>
        <member name="M:GeoFramework.Position.IntersectionOf(GeoFramework.Azimuth,GeoFramework.Position,GeoFramework.Azimuth)">
            <summary>
            Calculates the intersection of two lines created by the current instance, another point, and a direction of travel from each point.
            </summary>
            <param name="firstBearing">An <strong>Angle</strong> specifying a travel direction from the current instance.</param>
            <param name="secondPosition">A <strong>Position</strong> specifying the start of the second line of intersection.</param>
            <param name="secondBearing">An <strong>Angle</strong> specifying a travel direction from the second position.</param>
            <returns>A <strong>Position</strong> representing the point of intersection, if one exists.</returns>
            <remarks>This method is typically used to determine the point where two objects in motion would meet.  </remarks>
        </member>
        <member name="M:GeoFramework.Position.TranslateTo(GeoFramework.Angle,GeoFramework.Distance)">
            <summary>
            Calculates a position relative to the current instance based upon the given bearing and distance.
            </summary>
            <param name="bearing">An <strong>Angle</strong> object specifying a direction to shift.</param>
            <param name="distance">A <strong>Distance</strong> object specifying the distance to shift.</param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Position.TranslateTo(GeoFramework.Azimuth,GeoFramework.Distance)">
            <summary>
            Calculates a position relative to the current instance based upon the given bearing and distance.
            </summary>
            <param name="bearing">An <strong>Azimuth</strong> object specifying a direction to shift.</param>
            <param name="distance">A <strong>Distance</strong> object specifying the distance to shift.</param>
            <returns>A <strong>Position</strong> representing the calculated position.</returns>
            <remarks>This function is designed to calculate positions for any location on Earth, with
            the exception of coordinates which lie at the poles (e.g. 90°N or 90°S).</remarks>
        </member>
        <member name="M:GeoFramework.Position.TranslateTo(GeoFramework.Azimuth,GeoFramework.Distance,GeoFramework.Ellipsoid)">
            <summary>
            Calculates a position relative to the current instance based upon the given bearing and distance.
            </summary>
            <param name="bearing">An <strong>Azimuth</strong> object specifying a direction to shift.</param>
            <param name="distance">A <strong>Distance</strong> object specifying the distance to shift.</param>
            <returns>A <strong>Position</strong> representing the calculated position.</returns>
            <remarks>This function is designed to calculate positions for any location on Earth, with
            the exception of coordinates which lie at the poles (e.g. 90°N or 90°S).</remarks>
        </member>
        <member name="M:GeoFramework.Position.TranslateTo(System.Double,GeoFramework.Distance)">
            <summary>
            Calculates a position relative to the current instance based upon the given bearing and distance.
            </summary>
            <param name="bearing">A <strong>Double</strong> specifying a direction to shift.</param>
            <param name="distance">A <strong>Distance</strong> object specifying the distance to shift.</param>
            <returns>A <strong>Position</strong> representing the calculated position.</returns>
            <remarks>This function is designed to calculate positions for any location on Earth, with
            the exception of coordinates which lie at the poles (e.g. 90°N or 90°S).</remarks>
        </member>
        <member name="M:GeoFramework.Position.TranslateTo(System.Double,GeoFramework.Distance,GeoFramework.Ellipsoid)">
            <summary>
            Calculates a position relative to the current instance based upon the given bearing and distance.
            </summary>
            <param name="bearing">A <strong>Double</strong> specifying a direction to shift.</param>
            <param name="distance">A <strong>Distance</strong> object specifying the distance to shift.</param>
            <returns>A <strong>Position</strong> representing the calculated position.</returns>
            <remarks>This function is designed to calculate positions for any location on Earth, with
            the exception of coordinates which lie at the poles (e.g. 90°N or 90°S).</remarks>
        </member>
        <member name="M:GeoFramework.Position.ToString">
            <summary>
            Outputs the current instance as a string using the default format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Position.Random">
            <summary>
            Returns a random location using the specified random number seed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Position.Random(System.Random)">
            <summary>
            Returns a random location.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Position.Random(GeoFramework.Latitude,GeoFramework.Longitude,GeoFramework.Latitude,GeoFramework.Longitude)">
            <summary>
            Returns a random location within the specified geographic rectangle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Position.Random(System.Random,GeoFramework.Latitude,GeoFramework.Longitude,GeoFramework.Latitude,GeoFramework.Longitude)">
            <summary>
            Returns a random location within the specified geographic rectangle.
            </summary>
            <param name="generator">A <strong>Random</strong> object used t ogenerate random values.</param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Position.BearingTo(GeoFramework.Position,GeoFramework.Position)">
            <overloads>Returns the direction of travel from one position to another.</overloads>
        </member>
        <member name="M:GeoFramework.Position.TranslateTo(GeoFramework.Position,GeoFramework.Angle,GeoFramework.Distance)">
            <overloads>
            Returns the position shifted by the specified bearing and distance as new
            Position object.
            </overloads>
            <summary>Returns a new instance shifted by the specified direction and 
            distance.</summary>
            <returns>A new <strong>Position</strong> object adjusted by the specified 
            amount.</returns>
            <remarks>
            	<para>This method is typically used to create an destination point relative to an
             existing location. For example, this method could be used to create a point ten
             miles northeast of the current location.</para>
            	<para><em>NOTE: The trigonometric formula used for this method is subject to errors
             when the distance to translate falls below a quarter mile (approximately 433
             meters).</em></para>
            </remarks>
            <example>
            	<code lang="VB" title="[New Example]" description="This example creates a destination point ten miles northwest of the 
                           current location.">
            ' Create a distance of ten miles
            Dim TravelDistance As New Distance(10, DistanceUnit.StatuteMiles)
            ' Calculate the point
            Dim DestinationPoint As Position
            DestinationPoint = Position.CurrentPosition.TranslateTo(Azimuth.Northwest, 
            TravelDistance)
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Position.IntersectionOf(GeoFramework.Position,GeoFramework.Angle,GeoFramework.Position,GeoFramework.Angle)">
            <overloads>Calculates a position which marks the intersection of two 
            vectors.</overloads>
            <summary>Calculates the point (if any) at which two imaginary lines 
            intersect.</summary>
            <returns>A <strong>Position</strong> object specifying the intersection 
            point.</returns>
            <remarks>
            This method uses trigonometry to calculate the point at which two lines intersect
            on Earth's surface. This method is typically used to see where two objects in motion
            would meet given their current directions of travel.  This method does not take the speed 
            of each object into account.
            <img src="IntersectionOf.jpg"/>
            </remarks>
            <param name="firstPosition">A <strong>Position</strong> specifying a position which marks the start of a line.</param>
            <param name="firstBearing">An <strong>Angle</strong> specifying a direction from the first Position.</param>
            <param name="secondPosition">A <strong>Position</strong> specifying the second position, marking the start of a second line.</param>
            <param name="secondBearing">An <strong>Angle</strong> specifying a direction from the second Position.</param>
        </member>
        <member name="M:GeoFramework.Position.DistanceTo(GeoFramework.Position,GeoFramework.Position,GeoFramework.Speed,System.TimeSpan)">
            <summary>
            Returns the remaining travel distance if traveling for a certain speed for a certain period of time.
            </summary>
            <param name="start">A <strong>Position</strong> marking the starting location from which to calculate.</param>
            <param name="destination">A <strong>Position</strong> marking the destination location.</param>
            <param name="speed">A <strong>Speed</strong> travelled from the current instance.</param>
            <param name="time">A <strong>TimeSpan</strong> representing the time already elapsed during transit to the destination.</param>
            <returns>A <strong>Distance</strong> measuring the remaining distance to travel.</returns>
        </member>
        <member name="M:GeoFramework.Position.DistanceTo(GeoFramework.Position,GeoFramework.Position)">
            <overloads>Calculates the great circle distance between any two points on 
            Earth.</overloads>
            <summary>
            Returns the distance over land from the given starting point to the specified
            destination.
            </summary>
            <returns>
            A <strong>Distance</strong> object containing the calculated distance in
            kilometers.
            </returns>
            <param name="start">A beginning point from which to calculate distance.</param>
            <param name="destination">The ending point of a segment.</param>
            <remarks>
            This method uses trigonometry to calculate the Great Circle (over Earth's curved
            surface) distance between any two points on Earth. The distance is returned in
            kilometers but can be converted to any other unit type using methods in the
            <see cref="T:GeoFramework.Distance">Distance</see>
            class.
            </remarks>
        </member>
        <member name="M:GeoFramework.Position.TimeTo(GeoFramework.Position,GeoFramework.Position,GeoFramework.Speed)">
            <overloads>
            Calculates the time required to arrive at a destination when traveling at the
            specified speed.
            </overloads>
            <summary>
            Returns the minimum amount of time required to reach the specified destination at
            the specified speed.
            </summary>
        </member>
        <member name="M:GeoFramework.Position.SpeedTo(GeoFramework.Position,GeoFramework.Position,System.TimeSpan)">
            <overloads>
            Calculates the minimum speed required to arrive at a destination in the given
            time.
            </overloads>
            <summary>
            Returns the minimum speed required to travel over land from the given starting
            point to the specified destination within the specified period of time.
            </summary>
            <returns>
            A <strong>Speed</strong> object containing the required minimum travel
            speed.
            </returns>
            <remarks>
            This method is typically used to compare the current speed with the minimum
            required speed. For example, if the current rate of travel is 30MPH and the minimum
            speed is 60MPH, it can be derived that the speed must be doubled to arrive at the
            destination on time. Of course, care must be taken when making any suggestion to
            increase driving speed.
            </remarks>
            <param name="start">The beginning point from which calculations are based.</param>
            <param name="destination">The ending point to which speed is calculated.</param>
            <param name="time">The amount of time allowed to reach the destination.</param>
        </member>
        <member name="M:GeoFramework.Position.Parse(System.String)">
            <summary>Converts a string-based positional measurement into a Position 
            object.</summary>
            <param name="value">A <strong>String</strong> containing both latitude and longitude in the form of a string.</param>
            <remarks>
            This powerful method will analyze a string containing latitude and longitude and
            create a Position object matching the specified values.  The latitude and longitude
            must be separated by a non-space delimiter such as a comma.</remarks>
        </member>
        <member name="M:GeoFramework.Position.Add(GeoFramework.Position)">
            <summary>
            Adds the specified latitude and longitude from the current latitude and longitude.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Position.Subtract(GeoFramework.Position)">
            <summary>
            Subtracts the specified latitude and longitude from the current latitude and longitude.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Position.Multiply(GeoFramework.Position)">
            <summary>
            Multiplies the specified latitude and longitude from the current latitude and longitude.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Position.Divide(GeoFramework.Position)">
            <summary>
            Divides the specified latitude and longitude from the current latitude and longitude.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Position.Clone">
            <summary>
            Creates a copy of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Position.Equals(GeoFramework.Position)">
            <summary>
            Compares the current instance to the specified position.
            </summary>
            <param name="value">A <strong>Position</strong> object to compare with.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the values are identical.</returns>
            <remarks>The two objects are compared at up to four digits of precision.</remarks>
        </member>
        <member name="M:GeoFramework.Position.Equals(GeoFramework.Position,System.Int32)">
            <summary>
            Compares the current instance to the specified position using the specified numeric precision.
            </summary>
            <param name="value">A <strong>Position</strong> object to compare with.</param>
            <param name="decimals">An <strong>Integer</strong> specifying the number of fractional digits to compare.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the values are identical.</returns>
            <remarks>This method is typically used when positions do not mark the same location unless they are
            extremely close to one another.  Conversely, a low or even negative value for <strong>Precision</strong>
            allows positions to be considered equal even when they do not precisely match.</remarks>
        </member>
        <member name="M:GeoFramework.Position.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the current instance as a string using the specified format and culture information.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GeoFramework.Position.Latitude">
            <summary>Represents the vertical North/South portion of the location.</summary>
        </member>
        <member name="P:GeoFramework.Position.Longitude">
            <summary>Represents the horizontal East/West portion of the location.</summary>
        </member>
        <member name="P:GeoFramework.Position.IsEmpty">
            <summary>Indicates if the position has no value.</summary>
        </member>
        <member name="P:GeoFramework.Position.IsInvalid">
            <summary>Indicates if the position has an invalid or unspecified value.</summary>
        </member>
        <member name="P:GeoFramework.Position.IsNormalized">
            <summary>Indicates whether the position has been normalized and is within the 
            allowed bounds of -90° and 90° latitude and -180° and 180° longitude.</summary>
        </member>
        <member name="T:GeoFramework.Projections.ZoneLetter">
            <summary>Indicates a vertical slice of the Earth used as a starting point for UTM positions.</summary>
        </member>
        <member name="T:GeoFramework.HostPlatformID">
            <summary>
            Indicates the current host operating system.
            </summary>
        </member>
        <member name="F:GeoFramework.HostPlatformID.Unknown">
            <summary>
            The current platform has not yet been determined.
            </summary>
        </member>
        <member name="F:GeoFramework.HostPlatformID.Desktop">
            <summary>
            The current plarform is a desktop computer.
            </summary>
        </member>
        <member name="F:GeoFramework.HostPlatformID.WindowsCE">
            <summary>
            The current platform is Windows CE 4.2
            </summary>
        </member>
        <member name="F:GeoFramework.HostPlatformID.PocketPC">
            <summary>
            The current platform is PocketPC (Windows Mobile 2003)
            </summary>
        </member>
        <member name="F:GeoFramework.HostPlatformID.Smartphone">
            <summary>
            The current platform is Smartphone
            </summary>
        </member>
        <member name="T:GeoFramework.DotNetFrameworkID">
            <summary>
            Indicates the current .NET framework being used.
            </summary>
        </member>
        <member name="F:GeoFramework.DotNetFrameworkID.Unknown">
            <summary>
            The .NET framework version has not been determined.
            </summary>
        </member>
        <member name="F:GeoFramework.DotNetFrameworkID.DesktopFramework10">
            <summary>
            .NET framework version 1.0 (Visual Studio 2002) is being used.
            </summary>
        </member>
        <member name="F:GeoFramework.DotNetFrameworkID.DesktopFramework11">
            <summary>
            .NET framework version 1.1 (Visual Studio 2003) is being used.
            </summary>
        </member>
        <member name="F:GeoFramework.DotNetFrameworkID.DesktopFramework20">
            <summary>
            .NET framework version 2.0 (Visual Studio 2005) is being used.
            </summary>
        </member>
        <member name="F:GeoFramework.DotNetFrameworkID.DesktopFramework30">
            <summary>
            .NET framework version 3.0 (Visual Studio 2008) is being used.
            </summary>
        </member>
        <member name="F:GeoFramework.DotNetFrameworkID.DesktopFramework40">
            <summary>
            .NET framework version 4.0 (Visual Studio 2010) is being used.
            </summary>
        </member>
        <member name="F:GeoFramework.DotNetFrameworkID.CompactFramework10">
            <summary>
            .NET Compact Framework version 1.0 (Visual Studio 2003) is being used.
            </summary>
        </member>
        <member name="F:GeoFramework.DotNetFrameworkID.CompactFramework20">
            <summary>
            .NET Compact Framework version 2.0 (Visual Studio 2005) is being used.
            </summary>
        </member>
        <member name="T:GeoFramework.Platform">
            <summary>
            Provides features for determining the current host platform.
            </summary>
        </member>
        <member name="P:GeoFramework.Platform.HostPlatformID">
            <summary>
            Returns the current host platform.
            </summary>
            <remarks>This property is used to determine the current host platform: Windows CE 4.2,
            PocketPC / Windows Mobile 2003, Smartphone, or Desktop.  This property is typically
            used to adjust the performance and behavior of an application to work on a specific platform.
            For example, thread priorities are more sensitive on the Smartphone platform than the 
            PocketPC platform.  This can also be used to determine correct locations of system folders
            and installed system software such as Bluetooth stacks.</remarks>
        </member>
        <member name="P:GeoFramework.Platform.DotNetFrameworkID">
            <summary>
            Returns the current version of the .NET Framework currently in use.
            </summary>
        </member>
        <member name="T:GeoFramework.Interpolator2D">
            <summary>Represents a collection of interpolated coordinates using realistic acceleration and deceleration.</summary>
            <remarks>
            	<para>This class is used by several controls in the GeoFramework namespace to give
                them a more realistic behavior. This class will interpolate coordinates between a
                given start and end point according to an interpolation technique, and return them
                as an array. Then, controls and other elements can be moved smoothly by applying
                the calculated values.</para>
            	<para>Instances of this class are likely to be thread safe because the class uses
                thread synchronization when recalculating interpolated values.</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.Interpolator2D.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:GeoFramework.Interpolator2D.#ctor(GeoFramework.Position,GeoFramework.Position,System.Int32)">
            <summary>
            Creates a new instance using the specified start and end points.
            </summary>
            <param name="minimum">The starting point of the interpolated series.</param>
            <param name="maximum">The ending point of the interpolated series.</param>
            <param name="count">The number of points to calculate between the start and end.</param>
            <remarks>This constructor provides a way to define the bounds of the interpolator,
            as well as its number of points.  A higher level of points yield a smoother
            result but take longer to iterate through.</remarks>
        </member>
        <member name="M:GeoFramework.Interpolator2D.#ctor(GeoFramework.Position,GeoFramework.Position,System.Int32,GeoFramework.InterpolationMethod)">
            <summary>
            Creates a new instance using the specified end points, count, and interpolation technique.
            </summary>
            <param name="minimum">The starting point of the interpolated series.</param>
            <param name="maximum">The ending point of the interpolated series.</param>
            <param name="count">The number of points to calculate between the start and end.</param>
            <param name="mode">The interpolation technique to use for calculating intermediate points.</param>
        </member>
        <member name="P:GeoFramework.Interpolator2D.Minimum">
            <summary>
            Returns the starting point of the series.
            </summary>
            <remarks>Interpolated values are calculated between this point and the end point 
            stored in the <see cref="P:GeoFramework.Interpolator2D.Maximum"></see> property.  Changing this property causes
            the series to be recalculated.</remarks>
        </member>
        <member name="P:GeoFramework.Interpolator2D.Maximum">
            <summary>
            Returns the ending point of the series.
            </summary>
            <remarks>Interpolated values are calculated between this point and the start point 
            stored in the <see cref="P:GeoFramework.Interpolator2D.Minimum"></see> property.  Changing this property causes
            the series to be recalculated.</remarks>
        </member>
        <member name="P:GeoFramework.Interpolator2D.Item(System.Int32)">
            <summary>
            Returns a Position object from the interpolated series.
            </summary>
        </member>
        <member name="P:GeoFramework.Interpolator2D.Count">
            <summary>
            Returns the number of calculated positions in the series.
            </summary>
        </member>
        <member name="P:GeoFramework.Interpolator2D.InterpolationMethod">
            <summary>
            Indicates the interpolation technique used to calculate intermediate points.
            </summary>
            <remarks>This property controls the acceleration and deceleration techniques
            used when calculating intermediate points.  Changing this property causes the
            series to be recalculated.</remarks>
        </member>
        <member name="T:GeoFramework.Datum">
            <summary>Represents a coordinate system based on interpretations of the Earth's shape and size.</summary>
            <remarks>
            	<para>Over the course of history, advances in technology have given people the
                ability to more accurately measure the shape and size of the Earth. Since countries
                have built significant infrastructure based upon older coordinate systems, they
                cannot immediately abandon them in favor of new ones. As a result, there are now
                over fifty interpretations of Earth's shape and size in use all over the
                world.</para>
            	<para>Some datums, such as World Geodetic System 1984 (or WGS84 for short) are
                becoming more widely used throughout the world, and this datum is used by nearly
                all GPS devices. However, while the world is slowly standardizing its datums, some
                datums will not be abandoned because they remain quite accurate for a specific,
                local area.</para>
            	<para>A datum on its own is nothing more than a more granular interpretation of an
                ellipsoid. Typically, more specific coordinate transformation information is
                further associated with a datum to produce meaningful information. For example,
                Helmert and Molodensky coordinate conversion formulas use several local conversion
                parameters for each datum.</para>
            	<para>Instances of this class are guaranteed to be thread-safe because the class is
                immutable (its properties can only be set via constructors).</para>
            </remarks>
            <seealso cref="P:GeoFramework.Datum.Ellipsoid">Ellipsoid Class</seealso>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedAiry1830">
            <summary> Not specified (based on the Airy 1830 ellipsoid)  </summary>
            <remarks> This datum uses the Airy 1830 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedAiryModified1849">
            <summary> Not specified (based on the Airy Modified 1849 ellipsoid)  </summary>
            <remarks> This datum uses the Airy Modified 1849 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedAustralianNationalSpheroid">
            <summary> Not specified (based on the Australian National Spheroid ellipsoid)  </summary>
            <remarks> This datum uses the Australian National Spheroid ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedBessel1841">
            <summary> Not specified (based on the Bessel 1841 ellipsoid)  </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedBesselModified">
            <summary> Not specified (based on the Bessel Modified ellipsoid)  </summary>
            <remarks> This datum uses the Bessel Modified ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedBesselNamibiaGLM">
            <summary> Not specified (based on the Bessel Namibia (GLM) ellipsoid)  </summary>
            <remarks> This datum uses the Bessel Namibia (GLM) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedClarke1858">
            <summary> Not specified (based on the Clarke 1858 ellipsoid)  </summary>
            <remarks> This datum uses the Clarke 1858 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedClarke1866">
            <summary> Not specified (based on the Clarke 1866 ellipsoid)  </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedClarke1866Michigan">
            <summary> Not specified (based on the Clarke 1866 Michigan ellipsoid)  </summary>
            <remarks> This datum uses the Clarke 1866 Michigan ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedClarke1880Benoit">
            <summary> Not specified (based on the Clarke 1880 (Benoit) ellipsoid)  </summary>
            <remarks> This datum uses the Clarke 1880 (Benoit) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedClarke1880IGN">
            <summary> Not specified (based on the Clarke 1880 (IGN) ellipsoid)  </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedClarke1880RGS">
            <summary> Not specified (based on the Clarke 1880 (RGS) ellipsoid)  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedClarke1880Arc">
            <summary> Not specified (based on the Clarke 1880 (Arc) ellipsoid)  </summary>
            <remarks> This datum uses the Clarke 1880 (Arc) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedClarke1880_SGA1922">
            <summary> Not specified (based on the Clarke 1880 (SGA 1922) ellipsoid)  </summary>
            <remarks> This datum uses the Clarke 1880 (SGA 1922) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedEverest1830_1937Adjustment">
            <summary> Not specified (based on the Everest 1830 (1937 Adjustment) ellipsoid)  </summary>
            <remarks> This datum uses the Everest 1830 (1937 Adjustment) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedEverest1830_1967Definition">
            <summary> Not specified (based on the Everest 1830 (1967 Definition) ellipsoid)  </summary>
            <remarks> This datum uses the Everest 1830 (1967 Definition) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedEverest1830Modified">
            <summary> Not specified (based on the Everest 1830 Modified ellipsoid)  </summary>
            <remarks> This datum uses the Everest 1830 Modified ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedGRS1980">
            <summary> Not specified (based on the GRS 1980 ellipsoid)  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedHelmert1906">
            <summary> Not specified (based on the Helmert 1906 ellipsoid)  </summary>
            <remarks> This datum uses the Helmert 1906 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedIndonesianNationalSpheroid">
            <summary> Not specified (based on the Indonesian National Spheroid ellipsoid)  </summary>
            <remarks> This datum uses the Indonesian National Spheroid ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedInternational1924">
            <summary> Not specified (based on the International 1924 ellipsoid)  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedKrassowsky1940">
            <summary> Not specified (based on the Krassowsky 1940 ellipsoid)  </summary>
            <remarks> This datum uses the Krassowsky 1940 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedNWL9D">
            <summary> Not specified (based on the NWL 9D ellipsoid)  </summary>
            <remarks> This datum uses the NWL 9D ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedPlessis1817">
            <summary> Not specified (based on the Plessis 1817 ellipsoid)  </summary>
            <remarks> This datum uses the Plessis 1817 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedStruve1860">
            <summary> Not specified (based on the Struve 1860 ellipsoid)  </summary>
            <remarks> This datum uses the Struve 1860 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedWarOffice">
            <summary> Not specified (based on the War Office ellipsoid)  </summary>
            <remarks> This datum uses the War Office ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedWGS84">
            <summary> Not specified (based on the WGS 84 ellipsoid)  </summary>
            <remarks> This datum uses the WGS 84 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedGEM10C">
            <summary> Not specified (based on the GEM 10C ellipsoid)  </summary>
            <remarks> This datum uses the GEM 10C ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedOSU86F">
            <summary> Not specified (based on the OSU86F ellipsoid)  </summary>
            <remarks> This datum uses the OSU86F ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedOSU91A">
            <summary> Not specified (based on the OSU91A ellipsoid)  </summary>
            <remarks> This datum uses the OSU91A ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedClarke1880">
            <summary> Not specified (based on the Clarke 1880 ellipsoid)  </summary>
            <remarks> This datum uses the Clarke 1880 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedSphere">
            <summary> Not specified (based on the Sphere ellipsoid)  </summary>
            <remarks> This datum uses the Sphere ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedGRS1967">
            <summary> Not specified (based on the GRS 1967 ellipsoid)  </summary>
            <remarks> This datum uses the GRS 1967 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedAverageTerrestrialSystem1977">
            <summary> Not specified (based on the Average Terrestrial System 1977 ellipsoid)  </summary>
            <remarks> This datum uses the Average Terrestrial System 1977 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedEverest_1830Definition">
            <summary> Not specified (based on the Everest (1830 Definition) ellipsoid)  </summary>
            <remarks> This datum uses the Everest (1830 Definition) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedWGS72">
            <summary> Not specified (based on the WGS 72 ellipsoid)  </summary>
            <remarks> This datum uses the WGS 72 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedEverest1830_1962Definition">
            <summary> Not specified (based on the Everest 1830 (1962 Definition) ellipsoid)  </summary>
            <remarks> This datum uses the Everest 1830 (1962 Definition) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedEverest1830_1975Definition">
            <summary> Not specified (based on the Everest 1830 (1975 Definition) ellipsoid)  </summary>
            <remarks> This datum uses the Everest 1830 (1975 Definition) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedGRS1980AuthalicSphere">
            <summary> Not specified (based on the GRS 1980 Authalic Sphere ellipsoid)  </summary>
            <remarks> This datum uses the GRS 1980 Authalic Sphere ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedClarke1866AuthalicSphere">
            <summary> Not specified (based on the Clarke 1866 Authalic Sphere ellipsoid)  </summary>
            <remarks> This datum uses the Clarke 1866 Authalic Sphere ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedInternational1924AuthalicSphere">
            <summary> Not specified (based on the International 1924 Authalic Sphere ellipsoid)  </summary>
            <remarks> This datum uses the International 1924 Authalic Sphere ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.UnspecifiedHughes1980">
            <summary> Not specified (based on the Hughes 1980 ellipsoid)  </summary>
            <remarks> This datum uses the Hughes 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Greek">
            <summary> Greek  </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.GreekGeodeticReferenceSystem1987">
            <summary> Greek Geodetic Reference System 1987  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.AverageTerrestrialSystem1977">
            <summary> Average Terrestrial System 1977  </summary>
            <remarks> This datum uses the Average Terrestrial System 1977 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Kartastokoordinaattijarjestelma_1966">
            <summary> Kartastokoordinaattijarjestelma (1966)  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Riketskoordinatsystem1990">
            <summary> Rikets koordinatsystem 1990  </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Samboja">
            <summary> Samboja  </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Lithuania1994_ETRS89">
            <summary> Lithuania 1994 (ETRS89)  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Tete">
            <summary> Tete  </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Madzansua">
            <summary> Madzansua  </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Observatario">
            <summary> Observatario  </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Moznet_ITRF94">
            <summary> Moznet (ITRF94)  </summary>
            <remarks> This datum uses the WGS 84 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Indian1960">
            <summary> Indian 1960  </summary>
            <remarks> This datum uses the Everest 1830 (1937 Adjustment) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Indian">
            <summary>Represents the Indian datum.</summary>
        </member>
        <member name="F:GeoFramework.Datum.FinalDatum1958">
            <summary> Final Datum 1958  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Estonia1992">
            <summary> Estonia 1992  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.PDOSurveyDatum1993">
            <summary> PDO Survey Datum 1993  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.OldHawaiian">
            <summary> Old Hawaiian  </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.StLawrenceIsland">
            <summary> St. Lawrence Island  </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.StPaulIsland">
            <summary> St. Paul Island  </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.StGeorgeIsland">
            <summary> St. George Island  </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.PuertoRico">
            <summary> Puerto Rico  </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.NAD83CanadianSpatialReferenceSystem">
            <summary> NAD83 Canadian Spatial Reference System  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Israel">
            <summary> Israel  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Locodjo1965">
            <summary> Locodjo 1965  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Abidjan1987">
            <summary> Abidjan 1987  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Kalianpur1937">
            <summary> Kalianpur 1937  </summary>
            <remarks> This datum uses the Everest 1830 (1937 Adjustment) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Kalianpur1962">
            <summary> Kalianpur 1962  </summary>
            <remarks> This datum uses the Everest 1830 (1962 Definition) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Kalianpur1975">
            <summary> Kalianpur 1975  </summary>
            <remarks> This datum uses the Everest 1830 (1975 Definition) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Hanoi1972">
            <summary> Hanoi 1972  </summary>
            <remarks> This datum uses the Krassowsky 1940 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Hartebeesthoek94">
            <summary> Hartebeesthoek94  </summary>
            <remarks> This datum uses the WGS 84 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.CH1903">
            <summary> CH1903  </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.CH1903plus">
            <summary> CH1903+  </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.SwissTerrestrialReferenceFrame1995">
            <summary> Swiss Terrestrial Reference Frame 1995  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.NAD83_HighAccuracyRegionalNetwork">
            <summary> NAD83 (High Accuracy Regional Network)  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Rassadiran">
            <summary> Rassadiran  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.EuropeanDatum1950_1977">
            <summary> European Datum 1950(1977)  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Dabola1981">
            <summary> Dabola 1981  </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.JednotneTrigonometrickeSiteKatastralni">
            <summary> Jednotne Trigonometricke Site Katastralni  </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.MountDillon">
            <summary> Mount Dillon  </summary>
            <remarks> This datum uses the Clarke 1858 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Naparima1955">
            <summary> Naparima 1955  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.EuropeanLibyanDatum1979">
            <summary> European Libyan Datum 1979  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.ChosMalal1914">
            <summary> Chos Malal 1914  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.PampadelCastillo">
            <summary> Pampa del Castillo  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.KoreanDatum1985">
            <summary> Korean Datum 1985  </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.YemenNationalGeodeticNetwork1996">
            <summary> Yemen National Geodetic Network 1996  </summary>
            <remarks> This datum uses the WGS 84 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.SouthYemen">
            <summary> South Yemen  </summary>
            <remarks> This datum uses the Krassowsky 1940 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Bissau">
            <summary> Bissau  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.KoreanDatum1995">
            <summary> Korean Datum 1995  </summary>
            <remarks> This datum uses the WGS 84 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.NewZealandGeodeticDatum2000">
            <summary> New Zealand Geodetic Datum 2000  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Accra">
            <summary> Accra  </summary>
            <remarks> This datum uses the War Office ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.AmericanSamoa1962">
            <summary> American Samoa 1962  </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.SistemadeReferenciaGeocentricoparaAmericadelSur1995">
            <summary> Sistema de Referencia Geocentrico para America del Sur 1995  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.ReseauGeodesiqueFrancais1993">
            <summary> Reseau Geodesique Francais 1993  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.PosicionesGeodesicasArgentinas">
            <summary> Posiciones Geodesicas Argentinas  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.IRENET95">
            <summary> IRENET95  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.SierraLeoneColony1924">
            <summary> Sierra Leone Colony 1924  </summary>
            <remarks> This datum uses the War Office ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.SierraLeone1968">
            <summary> Sierra Leone 1968  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.AustralianAntarcticDatum1998">
            <summary> Australian Antarctic Datum 1998  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Pulkovo1942_83">
            <summary> Pulkovo 1942/83  </summary>
            <remarks> This datum uses the Krassowsky 1940 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Pulkovo1942_58">
            <summary> Pulkovo 1942/58  </summary>
            <remarks> This datum uses the Krassowsky 1940 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Estonia1997">
            <summary> Estonia 1997  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Luxembourg1930">
            <summary> Luxembourg 1930  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.AzoresOccidentalIslands1939">
            <summary> Azores Occidental Islands 1939  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.ObservatorioMeteorologico1939">
            <summary>Represents the Observatorio Meteorologico datum of 1939.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.AzoresCentralIslands1948">
            <summary> Azores Central Islands 1948  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.GraciosaBaseSW1948">
            <summary>Represents the Graciosa Base SW datum of 1948.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.AzoresOrientalIslands1940">
            <summary> Azores Oriental Islands 1940  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Madeira1936">
            <summary> Madeira 1936  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.OSNI1952">
            <summary> OSNI 1952  </summary>
            <remarks> This datum uses the Airy 1830 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.RedGeodesicaVenezolana">
            <summary> Red Geodesica Venezolana  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.PosicionesGeodesicasArgentinas1998">
            <summary> Posiciones Geodesicas Argentinas 1998  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Albanian1987">
            <summary> Albanian 1987  </summary>
            <remarks> This datum uses the Krassowsky 1940 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Douala1948">
            <summary> Douala 1948  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Manoca1962">
            <summary> Manoca 1962  </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Qornoq1927">
            <summary> Qornoq 1927  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Scoresbysund1952">
            <summary> Scoresbysund 1952  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Ammassalik1958">
            <summary> Ammassalik 1958  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.GarouaRGS">
            <summary> Garoua  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Kousseri">
            <summary> Kousseri  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Egypt1930">
            <summary> Egypt 1930  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Pulkovo1995">
            <summary> Pulkovo 1995  </summary>
            <remarks> This datum uses the Krassowsky 1940 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Adindan">
            <summary> Adindan  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.AustralianGeodeticDatum1966">
            <summary> Australian Geodetic Datum 1966  </summary>
            <remarks> This datum uses the Australian National Spheroid ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.AustralianGeodeticDatum1984">
            <summary> Australian Geodetic Datum 1984  </summary>
            <remarks> This datum uses the Australian National Spheroid ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.AinelAbd1970">
            <summary> Ain el Abd 1970  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Afgooye">
            <summary> Afgooye  </summary>
            <remarks> This datum uses the Krassowsky 1940 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Agadez">
            <summary> Agadez  </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Lisbon1937">
            <summary> Lisbon 1937  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Aratu">
            <summary> Aratu  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Arc1950">
            <summary> Arc 1950  </summary>
            <remarks> This datum uses the Clarke 1880 (Arc) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Arc1960">
            <summary> Arc 1960  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Batavia">
            <summary> Batavia  </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Barbados1938">
            <summary> Barbados 1938  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Beduaram">
            <summary> Beduaram  </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Beijing1954">
            <summary> Beijing 1954  </summary>
            <remarks> This datum uses the Krassowsky 1940 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.ReseauNationalBelge1950">
            <summary> Reseau National Belge 1950  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Bermuda1957">
            <summary> Bermuda 1957  </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Bogota1975">
            <summary> Bogota 1975  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.BukitRimpah">
            <summary> Bukit Rimpah  </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Camacupa">
            <summary> Camacupa  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.CampoInchauspe">
            <summary> Campo Inchauspe  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Cape">
            <summary> Cape  </summary>
            <remarks> This datum uses the Clarke 1880 (Arc) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Carthage">
            <summary> Carthage  </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Chua">
            <summary> Chua  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.CorregoAlegre">
            <summary> Corrego Alegre  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.CotedIvoire">
            <summary> Cote d'Ivoire  </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.DeirezZor">
            <summary> Deir ez Zor  </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Douala">
            <summary> Douala  </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Egypt1907">
            <summary> Egypt 1907  </summary>
            <remarks> This datum uses the Helmert 1906 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.EuropeanDatum1950">
            <summary> European Datum 1950  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.EuropeanDatum1987">
            <summary> European Datum 1987  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Fahud">
            <summary> Fahud  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Gandajika1970">
            <summary> Gandajika 1970  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.GarouaIGN">
            <summary> Garoua  </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.GuyaneFrancaise">
            <summary> Guyane Francaise  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.HuTzuShan">
            <summary> Hu Tzu Shan  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.HungarianDatum1972">
            <summary> Hungarian Datum 1972  </summary>
            <remarks> This datum uses the GRS 1967 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.IndonesianDatum1974">
            <summary> Indonesian Datum 1974  </summary>
            <remarks> This datum uses the Indonesian National Spheroid ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Indian1954">
            <summary> Indian 1954  </summary>
            <remarks> This datum uses the Everest 1830 (1937 Adjustment) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Indian1975">
            <summary> Indian 1975  </summary>
            <remarks> This datum uses the Everest 1830 (1937 Adjustment) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Jamaica1875">
            <summary> Jamaica 1875  </summary>
            <remarks> This datum uses the Clarke 1880 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Jamaica1969">
            <summary> Jamaica 1969  </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Kalianpur1880">
            <summary> Kalianpur 1880  </summary>
            <remarks> This datum uses the Everest (1830 Definition) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Kandawala">
            <summary> Kandawala  </summary>
            <remarks> This datum uses the Everest 1830 (1937 Adjustment) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Kertau1968">
            <summary> Kertau 1968  </summary>
            <remarks> This datum uses the Everest 1830 Modified ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.KuwaitOilCompany">
            <summary> Kuwait Oil Company  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.LaCanoa">
            <summary> La Canoa  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.ProvisionalSouthAmericanDatum1956">
            <summary> Provisional South American Datum 1956  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Lake">
            <summary> Lake  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Leigon">
            <summary> Leigon  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Liberia1964">
            <summary> Liberia 1964  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Lome">
            <summary> Lome  </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Luzon1911">
            <summary> Luzon 1911  </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.HitoXVIII1963">
            <summary> Hito XVIII 1963  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.ProvisionalSouthChilean1963">
            <summary>Represents the Provisional South Chilean datum of 1963.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.HeratNorth">
            <summary> Herat North  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Mahe1971">
            <summary> Mahe 1971  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Makassar">
            <summary> Makassar  </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.EuropeanTerrestrialReferenceSystem1989">
            <summary> European Terrestrial Reference System 1989  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Malongo1987">
            <summary> Malongo 1987  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Manoca">
            <summary> Manoca  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Merchich">
            <summary> Merchich  </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Massawa">
            <summary> Massawa  </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Minna">
            <summary> Minna  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Mhast">
            <summary> Mhast  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.MonteMario">
            <summary> Monte Mario  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Mporaloko">
            <summary> M'poraloko  </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.NorthAmericanDatum1927">
            <summary> North American Datum 1927  </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.NADMichigan">
            <summary> NAD Michigan  </summary>
            <remarks> This datum uses the Clarke 1866 Michigan ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.NorthAmericanDatum1983">
            <summary> North American Datum 1983  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Nahrwan1967">
            <summary> Nahrwan 1967  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Naparima1972">
            <summary> Naparima 1972  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.NewZealandGeodeticDatum1949">
            <summary> New Zealand Geodetic Datum 1949  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.GeodeticDatum1949">
            <summary>Represents the Geodetic Datum of 1949.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.NGO1948">
            <summary> NGO 1948  </summary>
            <remarks> This datum uses the Bessel Modified ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Datum73">
            <summary> Datum 73  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.NouvelleTriangulationFrancaise">
            <summary> Nouvelle Triangulation Francaise  </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.NSWC9Z_2">
            <summary> NSWC 9Z-2  </summary>
            <remarks> This datum uses the NWL 9D ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.OSGB1936">
            <summary> OSGB 1936  </summary>
            <remarks> This datum uses the Airy 1830 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.OrdnanceSurveyGreatBritain1936">
            <summary> Represents the Ordnance Survey of Great Britain datum of 1936. </summary>
        </member>
        <member name="F:GeoFramework.Datum.OSGB1970_SN">
            <summary> OSGB 1970 (SN)  </summary>
            <remarks> This datum uses the Airy 1830 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.OS_SN1980">
            <summary> OS (SN) 1980  </summary>
            <remarks> This datum uses the Airy 1830 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Padang1884">
            <summary> Padang 1884  </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Palestine1923">
            <summary> Palestine 1923  </summary>
            <remarks> This datum uses the Clarke 1880 (Benoit) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Congo1960PointeNoire">
            <summary> Congo 1960 Pointe Noire  </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.GeocentricDatumofAustralia1994">
            <summary> Geocentric Datum of Australia 1994  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Pulkovo1942">
            <summary> Pulkovo 1942  </summary>
            <remarks> This datum uses the Krassowsky 1940 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Qatar1974">
            <summary> Qatar 1974  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Qatar1948">
            <summary> Qatar 1948  </summary>
            <remarks> This datum uses the Helmert 1906 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Qornoq">
            <summary> Qornoq  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.LomaQuintana">
            <summary> Loma Quintana  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Amersfoort">
            <summary> Amersfoort  </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.SouthAmericanDatum1969">
            <summary> South American Datum 1969  </summary>
            <remarks> This datum uses the GRS 1967 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.SapperHill1943">
            <summary> Sapper Hill 1943  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Schwarzeck">
            <summary> Schwarzeck  </summary>
            <remarks> This datum uses the Bessel Namibia (GLM) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Segora">
            <summary> Segora  </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Serindung">
            <summary> Serindung  </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Sudan">
            <summary> Sudan  </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Tananarive1925">
            <summary> Tananarive 1925  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Timbalai1948">
            <summary> Timbalai 1948  </summary>
            <remarks> This datum uses the Everest 1830 (1967 Definition) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.TM65">
            <summary> TM65  </summary>
            <remarks> This datum uses the Airy Modified 1849 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Ireland1965">
            <summary>Represents the Ireland datum of 1965.</summary>
        </member>
        <member name="F:GeoFramework.Datum.GeodeticDatumof1965">
            <summary> Geodetic Datum of 1965  </summary>
            <remarks> This datum uses the Airy Modified 1849 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Tokyo">
            <summary> Tokyo  </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Trinidad1903">
            <summary> Trinidad 1903  </summary>
            <remarks> This datum uses the Clarke 1858 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.TrucialCoast1948">
            <summary> Trucial Coast 1948  </summary>
            <remarks> This datum uses the Helmert 1906 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Voirol1875">
            <summary> Voirol 1875  </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Bern1938">
            <summary> Bern 1938  </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.NordSahara1959">
            <summary> Nord Sahara 1959  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Stockholm1938">
            <summary> Stockholm 1938  </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Yacare">
            <summary> Yacare  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Yoff">
            <summary> Yoff  </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Zanderij">
            <summary> Zanderij  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.MilitarGeographischeInstitut">
            <summary> Militar-Geographische Institut  </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.HermannskogelDatum">
            <summary>Represents the Hermannskogel datum.</summary>
        </member>
        <member name="F:GeoFramework.Datum.ReseauNationalBelge1972">
            <summary> Reseau National Belge 1972  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.DeutschesHauptdreiecksnetz">
            <summary> Deutsches Hauptdreiecksnetz  </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Conakry1905">
            <summary> Conakry 1905  </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.DealulPiscului1933">
            <summary> Dealul Piscului 1933  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.DealulPiscului1970">
            <summary> Dealul Piscului 1970  </summary>
            <remarks> This datum uses the Krassowsky 1940 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.NationalGeodeticNetwork">
            <summary> National Geodetic Network  </summary>
            <remarks> This datum uses the WGS 84 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.KuwaitUtility">
            <summary> Kuwait Utility  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.WorldGeodeticSystem1972">
            <summary> World Geodetic System 1972  </summary>
            <remarks> This datum uses the WGS 72 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.WGS72TransitBroadcastEphemeris">
            <summary> WGS 72 Transit Broadcast Ephemeris  </summary>
            <remarks> This datum uses the WGS 72 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.WorldGeodeticSystem1984">
            <summary> World Geodetic System 1984  </summary>
            <remarks> This datum uses the WGS 84 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Anguilla1957">
            <summary> Anguilla 1957  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Antigua1943">
            <summary> Antigua 1943  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Dominica1945">
            <summary> Dominica 1945  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Grenada1953">
            <summary> Grenada 1953  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Montserrat1958">
            <summary> Montserrat 1958  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.StKitts1955">
            <summary> St. Kitts 1955  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.FortThomas1955">
            <summary>Represents the Fort Thomas datum of 1955.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.StLucia1955">
            <summary> St. Lucia 1955  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.StVincent1945">
            <summary> St. Vincent 1945  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.NorthAmericanDatum1927_1976">
            <summary> North American Datum 1927 (1976)  </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.NorthAmericanDatum1927_CGQ77">
            <summary> North American Datum 1927 (CGQ77)  </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Xian1980">
            <summary> Xian 1980  </summary>
            <remarks> This datum uses the Xian 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.HongKong1980">
            <summary> Hong Kong 1980  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.JapaneseGeodeticDatum2000">
            <summary> Japanese Geodetic Datum 2000  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.GunungSegara">
            <summary> Gunung Segara  </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.QatarNationalDatum1995">
            <summary> Qatar National Datum 1995  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.PortoSanto1936">
            <summary> Porto Santo 1936  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.SelvagemGrande">
            <summary> Selvagem Grande  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.SouthAmericanDatum1969_SAD69">
            <summary> South American Datum 1969  </summary>
            <remarks> This datum uses the GRS 1967 (SAD69) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.SWEREF99">
            <summary> SWEREF99  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Point58">
            <summary> Point 58  </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.FortMarigot">
            <summary> Fort Marigot  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Guadeloupe1948">
            <summary> Guadeloupe 1948  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.CentreSpatialGuyanais1967">
            <summary> Centre Spatial Guyanais 1967  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.ReseauGeodesiqueFrancaisGuyane1995">
            <summary> Reseau Geodesique Francais Guyane 1995  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Martinique1938">
            <summary> Martinique 1938  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Reunion1947">
            <summary> Reunion 1947  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.ReseauGeodesiquedelaReunion1992">
            <summary> Reseau Geodesique de la Reunion 1992  </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Tahiti52">
            <summary> Tahiti 52  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Tahaa54">
            <summary> Tahaa 54  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.IGN72NukuHiva">
            <summary> IGN72 Nuku Hiva  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.K01949">
            <summary> K0 1949  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Combani1950">
            <summary> Combani 1950  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.IGN56Lifou">
            <summary> IGN56 Lifou  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.IGN72GrandeTerre">
            <summary> IGN72 Grande Terre  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.ST87Ouvea1924">
            <summary> ST87 Ouvea  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Petrels1972">
            <summary> Petrels 1972  </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.PointeGeologiePerroud1950">
            <summary> Pointe Geologie Perroud 1950 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.SaintPierreetMiquelon1950">
            <summary> Saint Pierre et Miquelon 1950 </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.MOP78">
            <summary> MOP78 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.ReseaudeReferencedesAntillesFrancaises1991">
            <summary> Reseau de Reference des Antilles Francaises 1991 </summary>
            <remarks> This datum uses the WGS 84 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.IGN53Mare">
            <summary> IGN53 Mare </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.ST84IledesPins">
            <summary> ST84 Ile des Pins </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.ST71Belep">
            <summary> ST71 Belep </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.NEA74Noumea">
            <summary> NEA74 Noumea </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.ReseauGeodesiqueNouvelleCaledonie1991">
            <summary> Reseau Geodesique Nouvelle Caledonie 1991 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.GrandComoros">
            <summary> Grand Comoros </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.InternationalTerrestrialReferenceFrame1988">
            <summary> International Terrestrial Reference Frame 1988 </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.InternationalTerrestrialReferenceFrame1989">
            <summary> International Terrestrial Reference Frame 1989 </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.InternationalTerrestrialReferenceFrame1990">
            <summary> International Terrestrial Reference Frame 1990 </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.InternationalTerrestrialReferenceFrame1991">
            <summary> International Terrestrial Reference Frame 1991 </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.InternationalTerrestrialReferenceFrame1992">
            <summary> International Terrestrial Reference Frame 1992 </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.InternationalTerrestrialReferenceFrame1993">
            <summary> International Terrestrial Reference Frame 1993 </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.InternationalTerrestrialReferenceFrame1994">
            <summary> International Terrestrial Reference Frame 1994 </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.InternationalTerrestrialReferenceFrame1996">
            <summary> International Terrestrial Reference Frame 1996 </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.InternationalTerrestrialReferenceFrame1997">
            <summary> International Terrestrial Reference Frame 1997 </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.InternationalTerrestrialReferenceFrame2000">
            <summary> International Terrestrial Reference Frame 2000 </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Reykjavik1900">
            <summary> Reykjavik 1900 </summary>
            <remarks> This datum uses the Danish 1876 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Hjorsey1955">
            <summary> Hjorsey 1955 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.IslandsNetwork1993">
            <summary> Islands Network 1993 </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Helle1954">
            <summary> Helle 1954 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Latvia1992">
            <summary> Latvia 1992 </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.PortoSanto1995">
            <summary> Porto Santo 1995 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.AzoresOrientalIslands1995">
            <summary> Azores Oriental Islands 1995 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.AzoresCentralIslands1995">
            <summary> Azores Central Islands 1995 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Lisbon1890">
            <summary> Lisbon 1890 </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Iraq_KuwaitBoundaryDatum1992">
            <summary> Iraq-Kuwait Boundary Datum 1992 </summary>
            <remarks> This datum uses the WGS 84 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.EuropeanDatum1979">
            <summary> European Datum 1979 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.IstitutoGeograficoMilitaire1995">
            <summary> Istituto Geografico Militaire 1995 </summary>
            <remarks> This datum uses the WGS 84 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Voirol1879">
            <summary> Voirol 1879 </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.ChathamIslandsDatum1971">
            <summary> Chatham Islands Datum 1971 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.ChathamIslandsDatum1979">
            <summary> Chatham Islands Datum 1979 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.SistemadeReferenciaGeocentricoparaAmericadelSur2000">
            <summary> Sistema de Referencia Geocentrico para America del Sur 2000 </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Guam1963">
            <summary> Guam 1963 </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Vientiane1982">
            <summary> Vientiane 1982 </summary>
            <remarks> This datum uses the Krassowsky 1940 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Lao1993">
            <summary> Lao 1993 </summary>
            <remarks> This datum uses the Krassowsky 1940 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.LaoNationalDatum1997">
            <summary> Lao National Datum 1997 </summary>
            <remarks> This datum uses the Krassowsky 1940 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Jouik1961">
            <summary> Jouik 1961 </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Nouakchott1965">
            <summary> Nouakchott 1965 </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Mauritania1999_RGS">
            <summary> Mauritania 1999 </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Gulshan303">
            <summary> Gulshan 303 </summary>
            <remarks> This datum uses the Everest 1830 (1937 Adjustment) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.PhilippineReferenceSystem1992">
            <summary> Philippine Reference System 1992 </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Gan1970">
            <summary> Gan 1970 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Gandajika">
            <summary> Gandajika </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.MarcoGeocentricoNacionaldeReferencia">
            <summary> Marco Geocentrico Nacional de Referencia </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.ReseauGeodesiquedelaPolynesieFrancaise">
            <summary> Reseau Geodesique de la Polynesie Francaise </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.FatuIva72">
            <summary> Fatu Iva 72 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.IGN63HivaOa">
            <summary> IGN63 Hiva Oa </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Tahiti79">
            <summary> Tahiti 79 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Moorea87">
            <summary> Moorea 87 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Maupiti83">
            <summary> Maupiti 83 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Nakhl_eGhanem">
            <summary> Nakhl-e Ghanem </summary>
            <remarks> This datum uses the WGS 84 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.PosicionesGeodesicasArgentinas1994">
            <summary> Posiciones Geodesicas Argentinas 1994 </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Katanga1955">
            <summary> Katanga 1955 </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Kasai1953">
            <summary> Kasai 1953 </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.IGC1962Arcofthe6thParallelSouth">
            <summary> IGC 1962 Arc of the 6th Parallel South </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.IGN1962Kerguelen">
            <summary> IGN 1962 Kerguelen </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.LePouce1934">
            <summary> Le Pouce 1934 </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.IGNAstro1960">
            <summary> IGN Astro 1960 </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.InstitutGeographiqueduCongoBelge1955">
            <summary> Institut Geographique du Congo Belge 1955 </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Mauritania1999">
            <summary> Mauritania 1999 </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.MissaoHidrograficoAngolaySaoTome1951">
            <summary> Missao Hidrografico Angola y Sao Tome 1951 </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Mhast_onshore">
            <summary> Mhast (onshore) </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Mhast_offshore">
            <summary> Mhast (offshore) </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.EgyptGulfofSuezS_650TL">
            <summary> Egypt Gulf of Suez S-650 TL </summary>
            <remarks> This datum uses the Helmert 1906 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.TernIsland1961">
            <summary> Tern Island 1961 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.CocosIslands1965">
            <summary> Cocos Islands 1965 </summary>
            <remarks> This datum uses the Australian National Spheroid ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Anna1Astro1965">
            <summary>Represents the Anna 1 Astro datum of 1965.</summary>
        </member>
        <member name="F:GeoFramework.Datum.IwoJima1945">
            <summary> Iwo Jima 1945 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.AstroBeaconE1945">
            <summary>Represents the Astro Beacon "E" datum of 1945.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.StHelena1971">
            <summary> St. Helena 1971 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.AstroDos714">
            <summary>Represents the Astro DOS 71/4 datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.MarcusIsland1952">
            <summary> Marcus Island 1952 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.AstronomicalStation1952">
            <summary>Represents the Astronomical Station datum of 1952.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.AscensionIsland1958">
            <summary> Ascension Island 1958 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.AyabelleLighthouse">
            <summary> Ayabelle Lighthouse </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Bellevue">
            <summary> Bellevue </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.CampAreaAstro">
            <summary> Camp Area Astro </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.PhoenixIslands1966">
            <summary> Phoenix Islands 1966 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.CantonAstro1966">
            <summary>Represents the Canton Astro datum of 1966.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.CapeCanaveral">
            <summary> Cape Canaveral </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Solomon1968">
            <summary> Solomon 1968 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Dos1968">
            <summary>Represents the DOS datum of 1968.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Gux1Astro">
            <summary>Represents the GUX 1 Astro datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.EasterIsland1967">
            <summary> Easter Island 1967 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.FijiGeodeticDatum1986">
            <summary> Fiji Geodetic Datum 1986 </summary>
            <remarks> This datum uses the WGS 72 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Fiji1956">
            <summary> Fiji 1956 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.SouthGeorgia1968">
            <summary> South Georgia 1968 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Ists061Astro1968">
            <summary>Represents the ISTS 061 Astro datum of 1968.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.GrandCayman1959">
            <summary> Grand Cayman 1959 </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.DiegoGarcia1969">
            <summary> Diego Garcia 1969 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Ists073Astro1969">
            <summary>Represents the ISTS 073 Astro datum of 1969.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.JohnstonIsland1961">
            <summary> Johnston Island 1961 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.LittleCayman1961">
            <summary> Little Cayman 1961 </summary>
            <remarks> This datum uses the Clarke 1866 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.LC5Astro1961">
            <summary>Represents the L. C. 5 Astro datum of 1961.</summary>
        </member>
        <member name="F:GeoFramework.Datum.Midway1961">
            <summary> Midway 1961 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.PicodelaNieves">
            <summary> Pico de la Nieves </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Pitcairn1967">
            <summary> Pitcairn 1967 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Santo1965">
            <summary> Santo 1965 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.VitiLevu1916">
            <summary> Viti Levu 1916 </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.MarshallIslands1960">
            <summary> Marshall Islands 1960 </summary>
            <remarks> This datum uses the Hough 1960 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.WakeIsland1952">
            <summary> Wake Island 1952 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Tristan1968">
            <summary> Tristan 1968 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Kusaie1951">
            <summary> Kusaie 1951 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.DeceptionIsland">
            <summary> Deception Island </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.GeocentricdatumofKorea">
            <summary> Geocentric datum of Korea </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.HongKong1963">
            <summary> Hong Kong 1963 </summary>
            <remarks> This datum uses the Clarke 1858 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.HongKong1963_67">
            <summary> Hong Kong 1963(67) </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.ParametropZemp1990">
            <summary> Parametrop Zemp 1990 </summary>
            <remarks> This datum uses the PZ-90 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.FaroeDatum1954">
            <summary> Faroe Datum 1954 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.GeodeticDatumofMalaysia2000">
            <summary> Geodetic Datum of Malaysia 2000 </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Karbala1979_Polservice">
            <summary> Karbala 1979 (Polservice) </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Nahrwan1934">
            <summary> Nahrwan 1934 </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.RauenbergDatum_83">
            <summary> Rauenberg Datum/83 </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.PotsdamDatum_83">
            <summary> Potsdam Datum/83 </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Greenland1996">
            <summary> Greenland 1996 </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.VanuaLevu1915">
            <summary> Vanua Levu 1915 </summary>
            <remarks> This datum uses the Clarke 1880 (international foot) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.ReseauGeodesiquedeNouvelleCaledonie91_93">
            <summary> Reseau Geodesique de Nouvelle Caledonie 91-93 </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.ST87Ouvea">
            <summary> ST87 Ouvea </summary>
            <remarks> This datum uses the WGS 84 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Kertau_RSO">
            <summary> Kertau (RSO) </summary>
            <remarks> This datum uses the Everest 1830 (RSO 1969) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Kertau1948">
            <summary>Represents the Kertau datum of 1948.</summary>
        </member>
        <member name="F:GeoFramework.Datum.VitiLevu1912">
            <summary> Viti Levu 1912 </summary>
            <remarks> This datum uses the Clarke 1880 (international foot) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.fk89">
            <summary> fk89 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.LibyanGeodeticDatum2006">
            <summary> Libyan Geodetic Datum 2006 </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.DatumGeodesiNasional1995">
            <summary> Datum Geodesi Nasional 1995 </summary>
            <remarks> This datum uses the WGS 84 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Vietnam2000">
            <summary> Vietnam 2000 </summary>
            <remarks> This datum uses the WGS 84 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.SVY21">
            <summary> SVY21 </summary>
            <remarks> This datum uses the WGS 84 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Jamaica2001">
            <summary> Jamaica 2001 </summary>
            <remarks> This datum uses the WGS 84 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.CH1903_Bern">
            <summary> CH1903 (Bern) </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Bogota1975_Bogota">
            <summary> Bogota 1975 (Bogota) </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Lisbon1937_Lisbon">
            <summary> Lisbon 1937 (Lisbon) </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Makassar_Jakarta">
            <summary> Makassar (Jakarta) </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Militar_GeographischeInstitut_Ferro">
            <summary> Militar-Geographische Institut (Ferro) </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.MonteMario_Rome">
            <summary> Monte Mario (Rome) </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.NouvelleTriangulationFrancaise_Paris">
            <summary> Nouvelle Triangulation Francaise (Paris) </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Padang1884_Jakarta">
            <summary> Padang 1884 (Jakarta) </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.ReseauNationalBelge1950_Brussels">
            <summary> Reseau National Belge 1950 (Brussels) </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Tananarive1925_Paris">
            <summary> Tananarive 1925 (Paris) </summary>
            <remarks> This datum uses the International 1924 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Voirol1875_Paris">
            <summary> Voirol 1875 (Paris) </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Batavia_Jakarta">
            <summary> Batavia (Jakarta) </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Stockholm1938_Stockholm">
            <summary> Stockholm 1938 (Stockholm) </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Greek_Athens">
            <summary> Greek (Athens) </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Carthage_Paris">
            <summary> Carthage (Paris) </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.NGO1948_Oslo">
            <summary> NGO 1948 (Oslo) </summary>
            <remarks> This datum uses the Bessel Modified ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.S_JTSK_Ferro">
            <summary> S-JTSK (Ferro) </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.NordSahara1959_Paris">
            <summary> Nord Sahara 1959 (Paris) </summary>
            <remarks> This datum uses the Clarke 1880 (RGS) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.GunungSegara_Jakarta">
            <summary> Gunung Segara (Jakarta) </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Voirol1879_Paris">
            <summary> Voirol 1879 (Paris) </summary>
            <remarks> This datum uses the Clarke 1880 (IGN) ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.InternationalTerrestrialReferenceFrame2005">
            <summary> International Terrestrial Reference Frame 2005 </summary>
            <remarks> This datum uses the GRS 1980 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.AncienneTriangulationFrancaise_Paris">
            <summary> Ancienne Triangulation Francaise (Paris) </summary>
            <remarks> This datum uses the Plessis 1817 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.NorddeGuerre_Paris">
            <summary> Nord de Guerre (Paris) </summary>
            <remarks> This datum uses the Plessis 1817 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Madrid1870_Madrid">
            <summary> Madrid 1870 (Madrid) </summary>
            <remarks> This datum uses the Struve 1860 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Lisbon1890_Lisbon">
            <summary> Lisbon 1890 (Lisbon) </summary>
            <remarks> This datum uses the Bessel 1841 ellipsoid </remarks>
        </member>
        <member name="F:GeoFramework.Datum.EstoniaLocalDatum1937">
            <summary>Represents the Estonia Coordinate System datum of 1937.</summary>
        </member>
        <member name="F:GeoFramework.Datum.OldEgyptian1907">
            <summary>Represents the Old Egyptian datum of 1907.</summary>
        </member>
        <member name="F:GeoFramework.Datum.Oman">
            <summary>Represents the Oman datum.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.PointeNoire1948">
            <summary>Represents the Pointe Noire datum.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Rome1940">
            <summary>Represents the Rome datum of 1940.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.SaoBraz">
            <summary>Represents the Sao Braz datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.SouthAsia">
            <summary>Represents the South Asia datum.</summary>
        </member>
        <member name="F:GeoFramework.Datum.Voirol1960">
            <summary>Represents the Voirol datum of 1960.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.WakeEniwetok1960">
            <summary>Represents the Wake Eniwetok datum of 1960.</summary>
        </member>
        <member name="F:GeoFramework.Datum.Default">
            <summary>Represents the default datum used by the GeoFramework, WGS1984.</summary>
        </member>
        <member name="M:GeoFramework.Datum.#ctor(System.String,GeoFramework.Ellipsoid)">
            <summary>Creates a new instance using the specified name and reference ellipsoid.</summary>
            <param name="name">A <strong>String</strong> containing the user-friendly name for the 
            datum.</param>
            <param name="ellipsoid">
            An <strong>Ellipsoid</strong> describing the shape of the Earth, used as a basis
            for the datum.
            </param>
        </member>
        <member name="M:GeoFramework.Datum.#ctor(System.Int32,GeoFramework.Ellipsoid,System.String)">
            <summary>
            Internal constructor for static list generation
            </summary>
            <param name="epsgNumber"> The ID number for this ellipsoid in the EPSG database </param>
            <param name="ellipsoid"> The ellipsoid used by this datum </param>
            <param name="name"> The name of the datum </param>
        </member>
        <member name="M:GeoFramework.Datum.#ctor(System.Int32,GeoFramework.Ellipsoid,System.Double,System.String)">
            <summary>
            Internal constructor for static list generation
            </summary>
            <param name="epsgNumber"> The ID number for this ellipsoid in the EPSG database </param>
            <param name="ellipsoid"> The ellipsoid used by this datum </param>
            <param name="meridian"> The adjustment to latitude coordinates for datums using a central meridian other than Greenwich </param>
            <param name="name"> The name of the datum </param>
        </member>
        <member name="M:GeoFramework.Datum.SanityCheck">
            <summary>
            Validates the datum. Called in the constructor.
            </summary>
        </member>
        <member name="M:GeoFramework.Datum.FromName(System.String)">
            <summary>
            Returns a Datum object matching the specified name.
            </summary>
            <param name="datumName">A <strong>String</strong> describing the name of an existing datum.</param>
            <returns>A <strong>Datum</strong> object matching the specified string, or null if no datum was found.</returns>
        </member>
        <member name="M:GeoFramework.Datum.FromEPSGNumber(System.Int32)">
            <summary>
            Returns the datum corresponding to the EPSG code
            </summary>
            <param name="epsgNumber"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Datum.Equals(GeoFramework.Datum)">
            <summary>
            Compares the current instance to the specified datum object.
            </summary>
        </member>
        <member name="P:GeoFramework.Datum.Name">
            <summary>
            Returns the name of the datum.
            </summary>
        </member>
        <member name="P:GeoFramework.Datum.EPSGNumber">
            <summary>
            European Petroleum Survey Group number for this datum. The ESPG standards are now maintained by OGP
            (International Association of Oil and Gas Producers).
            </summary>
        </member>
        <member name="P:GeoFramework.Datum.Ellipsoid">
            <summary>Returns the interpretation of Earth's shape associated with a datum.</summary>
            <value>
            Read only. An
            <see cref="P:GeoFramework.Datum.Ellipsoid">Ellipsoid</see>
            object.
            </value>
            <remarks>Each datum is associated with an ellipsoid, which is an interpretation of Earth's shape and 
            size.</remarks>
            <example>
                This example gets information on the ellipsoid associated with the WGS84 datum. 
                <code lang="VB">
            ' Get information about the NAD1983 datum
            Dim MyDatum As Datum = Geodesy.GetDatum(DatumType.NorthAmerican1983)
            ' Get the ellipsoid associated with this datum
            Dim MyEllipsoid As Ellipsoid = MyDatum.Ellipsoid
            ' Write the semi-major axis of the ellipsoid
            Debug.WriteLine(MyEllipsoid.SemiMajorAxis.ToString())
                </code>
            	<code lang="CS">
            // Get information about the NAD1983 datum
            Datum MyDatum = Geodesy.GetDatum(DatumType.NorthAmerican1983);
            // Get the ellipsoid associated with this datum
            Ellipsoid MyEllipsoid = MyDatum.Ellipsoid;
            // Write the semi-major axis of the ellipsoid
            Debug.WriteLine(MyEllipsoid.SemiMajorAxis.ToString());
                </code>
            </example>
            <seealso cref="P:GeoFramework.Datum.Ellipsoid">Ellipsoid Class</seealso>
        </member>
        <member name="P:GeoFramework.Datum.PrimeMeridian">
            <summary>
            Returns the prime meridian assocated with this Datum. 
            </summary>
            <remarks>
            Most datums use Greenwich as the prime meridian. However, several systems offset coordinates
            using a local meridian. This value reflects that usage.
            </remarks>
        </member>
        <member name="T:GeoFramework.StaticFinalizer">
            <summary>
            Serves as a notification to dispose of static objects.
            </summary>
            <remarks>It is not uncommon for static variables to contain unmanaged resources.  Yet,
            the .NET Garbage Collector does not allow for finalizers on static objects.  The StaticFinalizer 
            class serves to work around this problem.  To use this class, declare an instance as a
            private, static variable.  Then, hook into its Disposed event.  The event will be raised
            during the StaticFinalizer's own finalizer, allowing you to safely dispose of static resources.</remarks>
            <example lang="cs">
            private static StaticFinalizer MyStaticFinalizer = new StaticFinalizer();
            private static Brush UnmanagedResource = new SolidBrush(Color.Blue);
            
            void Constructor()
            {
                MyStaticFinalizer.Disposed += new EventHandler(StaticFinalize);
            }
            
            void StaticFinalize(object sender, EventArgs e)
            {
                UnmanagedResource.Dispose();
            }
            </example>
        </member>
        <member name="T:GeoFramework.Latitude">
            <summary>Represents a line of constant distance north or south of the equator.</summary>
            <remarks>
            	<para>Latitudes measure a distance North or South away from the equator. Latitudes
                can range from -90° (at the South pole) to 90° (the North pole), with 0°
                representing the equator. Latitudes are commonly paired with Longitudes to mark a
                specific location on Earth's surface.</para>
            	<para>Latitudes are expressed in either of two major formats. The first format uses
                only positive numbers and the letter "N" or "S" to indicate the hemisphere (i.e.
                "45°N" or "60°S"). The second format allows negative numbers an omits the single
                character (i.e. 45 or -60).</para>
            	<para>Instances of this class are guaranteed to be thread-safe because the class is
                immutable (its properties can only be changed via constructors).</para>
            </remarks>
            <seealso cref="T:GeoFramework.Longitude">Longitude Class</seealso>
            <seealso cref="T:GeoFramework.Position">Position Class</seealso>
            <seealso cref="T:GeoFramework.Azimuth">Azimuth Class</seealso>
            <seealso cref="T:GeoFramework.Elevation">Elevation Class</seealso>
            <seealso cref="T:GeoFramework.Angle">Angle Class</seealso>
            <example>
                These examples create new instances of Latitude objects. 
                <code lang="VB" description="Create an angle of 90°">
            Dim MyLatitude As New Latitude(90)
                </code>
            	<code lang="CS" description="Create an angle of 90°">
            Latitude MyLatitude = new Latitude(90);
                </code>
            	<code lang="C++" description="Create an angle of 90°">
            Latitude MyLatitude = new Latitude(90);
                </code>
            	<code lang="VB" description="Create an angle of 105°30'21.4">
            Dim MyLatitude1 As New Latitude(105, 30, 21.4)
                </code>
            	<code lang="CS" description="Create an angle of 105°30'21.4">
            Latitude MyLatitude = new Latitude(105, 30, 21.4);
                </code>
            	<code lang="C++" description="Create an angle of 105°30'21.4">
            Latitude MyLatitude = new Latitude(105, 30, 21.4);
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Latitude.Equator">
            <summary>Represents a latitude of 0°.</summary>
        </member>
        <member name="F:GeoFramework.Latitude.Empty">
            <summary>Represents a latitude of 0°.</summary>
        </member>
        <member name="F:GeoFramework.Latitude.TropicOfCapricorn">
            <summary>Represents a latitude of 23.5°S.</summary>
        </member>
        <member name="F:GeoFramework.Latitude.TropicOfCancer">
            <summary>Represents a latitude of 23.5°N.</summary>
        </member>
        <member name="F:GeoFramework.Latitude.NorthPole">
            <summary>Represents a latitude of 90°N.</summary>
        </member>
        <member name="F:GeoFramework.Latitude.SouthPole">
            <summary>Represents a latitude of 90°S.</summary>
        </member>
        <member name="F:GeoFramework.Latitude.Minimum">
            <summary>Represents the minimum possible latitude -90°.</summary>
        </member>
        <member name="F:GeoFramework.Latitude.Maximum">
            <summary>Represents the maximum possible latitude of 90°.</summary>
        </member>
        <member name="F:GeoFramework.Latitude.Invalid">
            <summary>
            Represents an invalid or unspecified value.
            </summary>
        </member>
        <member name="M:GeoFramework.Latitude.#ctor(System.Double)">
            <summary>Creates a new instance with the specified decimal degrees.</summary>
            <example>
                This example demonstrates how to create an angle with a measurement of 90°. 
                <code lang="VB">
            Dim MyLatitude As New Latitude(90)
                </code>
            	<code lang="CS">
            Latitude MyLatitude = new Latitude(90);
                </code>
            </example>
            <returns>An <strong>Latitude</strong> containing the specified value.</returns>
        </member>
        <member name="M:GeoFramework.Latitude.#ctor(System.Double,GeoFramework.LatitudeHemisphere)">
            <summary>
            Creates a new instance with the specified decimal degrees and hemisphere.
            </summary>
            <param name="decimalDegrees">A <strong>Double</strong> specifying the number of hours.</param>
            <param name="hemisphere">A value from the <strong>LatitudeHemisphere</strong> enumeration.</param>
            <example>
            This example creates a new latitude of 39°30' north.
            <code lang="VB">
            Dim MyLatitude As New Latitude(39.5, LatitudeHemisphere.North)
            </code>
            <code lang="C#">
            Latitude MyLatitude = new Latitude(39.5, LatitudeHemisphere.North);
            </code>
            This example creates a new latitude of 39°30 south.
            <code lang="VB">
            Dim MyLatitude As New Latitude(39.5, LatitudeHemisphere.South)
            </code>
            <code lang="C#">
            Latitude MyLatitude = new Latitude(39.5, LatitudeHemisphere.South);
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.Latitude.#ctor(System.Int32)">
            <summary>Creates a new instance with the specified degrees.</summary>
            <returns>An <strong>Latitude</strong> containing the specified value.</returns>
            <param name="hours">
            An <strong>Integer</strong> indicating the amount of degrees, typically between 0
            and 360.
            </param>
        </member>
        <member name="M:GeoFramework.Latitude.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>Creates a new instance with the specified hours, minutes and 
            seconds.</summary>
            <example>
                This example demonstrates how to create an angular measurement of 34°12'29.2 in
                hours, minutes and seconds. 
                <code lang="VB">
            Dim MyLatitude As New Latitude(34, 12, 29.2)
                </code>
            	<code lang="CS">
            Latitude MyLatitude = new Latitude(34, 12, 29.2);
                </code>
            </example>
            <returns>An <strong>Latitude</strong> containing the specified value.</returns>
        </member>
        <member name="M:GeoFramework.Latitude.#ctor(System.Int32,System.Int32,System.Double,GeoFramework.LatitudeHemisphere)">
            <summary>
            Creates a new longitude with the specified hours, minutes, seconds, and hemisphere.
            </summary>
            <param name="hours">An <strong>Integer</strong> specifying the number of hours.</param>
            <param name="minutes">An <strong>Integer</strong> specifying the number of minutes.</param>
            <param name="seconds">An <strong>Double</strong> specifying the number of seconds.</param>
            <param name="hemisphere">A value from the <strong>LatitudeHemisphere</strong> enumeration.</param>
            <example>
            This example creates a new latitude of 39°12'10" north.
            <code lang="VB">
            Dim MyLatitude As New Latitude(39, 12, 10, LatitudeHemisphere.North)
            </code>
            <code lang="C#">
            Latitude MyLatitude = new Latitude(39, 12, 10, LatitudeHemisphere.North);
            </code>
            This example creates a new latitude of 39°12'10" south.
            <code lang="VB">
            Dim MyLatitude As New Latitude(39, 12, 10, LatitudeHemisphere.South)
            </code>
            <code lang="C#">
            Latitude MyLatitude = new Latitude(39, 12, 10, LatitudeHemisphere.South);
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.Latitude.#ctor(System.Int32,System.Double)">
            <summary>Creates a new instance with the specified hours and decimal minutes.</summary>
            <example>
                This example demonstrates how an angle can be created when only the hours and
                minutes (in decimal form) are known. This creates a value of 12°42.345'. 
                <code lang="VB">
            Dim MyLatitude As New Latitude(12, 42.345)
                </code>
            	<code lang="VB">
            Latitude MyLatitude = new Latitude(12, 42.345);
                </code>
            </example>
            <remarks>An <strong>Latitude</strong> containing the specified value.</remarks>
        </member>
        <member name="M:GeoFramework.Latitude.#ctor(System.Int32,System.Double,GeoFramework.LatitudeHemisphere)">
            <summary>
            Creates a new instance with the specified hours, decimal minutes, and hemisphere.
            </summary>
            <param name="hours">An <strong>Integer</strong> specifying the number of hours.</param>
            <param name="decimalMinutes">An <strong>Integer</strong> specifying the number of minutes.</param>
            <param name="hemisphere">A value from the <strong>LatitudeHemisphere</strong> enumeration.</param>
            <example>
            This example creates a new latitude of 39°12.34' north.
            <code lang="VB">
            Dim MyLatitude As New Latitude(39, 12.34, LatitudeHemisphere.North)
            </code>
            <code lang="C#">
            Latitude MyLatitude = new Latitude(39, 12.34, LatitudeHemisphere.North);
            </code>
            This example creates a new latitude of 39°12.34 south.
            <code lang="VB">
            Dim MyLatitude As New Latitude(39, 12.34, LatitudeHemisphere.South)
            </code>
            <code lang="C#">
            Latitude MyLatitude = new Latitude(39, 12.34, LatitudeHemisphere.South);
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.Latitude.#ctor(System.String)">
            <summary>
            Creates a new instance by parsing the specified string value.
            </summary>
            <param name="value">
            <para>A <strong>String</strong> in any of the following formats (or variation
            depending on the local culture):</para>
            
             <para>
            	 <table cellspacing="0" cols="4" cellpadding="2" width="100%">
            		 <tbody>
            			 <tr>
            				 <td>hh</td>
            				 <td>hh.h</td>
            				 <td>hh mm</td>
            				 <td>hh mm.mm</td>
            			 </tr>
            			 <tr>
            				 <td>hh mm ss</td>
            				 <td>hh mm ss.sss</td>
            				 <td></td>
            				 <td></td>
            			 </tr>
            			 <tr>
            				 <td>hh i</td>
            				 <td>hh.h i</td>
            				 <td>hh mm i</td>
            				 <td>hh mm.mm i</td>
            			 </tr>
            			 <tr>
            				 <td>hh mm ss i</td>
            				 <td>hh mm ss.sss i</td>
            				 <td></td>
            				 <td></td>
            			 </tr>
            		 </tbody>
            	 </table>
            
            Where <strong>I</strong> represents a case-insensitive hemisphere indicator "N" or "S".
             </para>
             <para>Any non-numeric character between numbers is considered a delimiter. Thus, a
             value of <strong>12°34'56.78"N</strong> or even <strong>12A34B56.78CN</strong> is
             treated the same as <strong>12 34 56.78 N</strong>.</para>
            </param>
            <example>
                This example creates a new instance by parsing a string. (NOTE: The double-quote is
                doubled up to represent a single double-quote in the string.) 
                <code lang="VB">
            Dim MyLatitude As New Latitude("23°45'67.8""N")
                </code>
            	<code lang="CS">
            Latitude MyLatitude = new Latitude("23°45'67.8\"N");
                </code>
            </example>
            <returns>An <strong>Latitude</strong> containing the specified value.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
        </member>
        <member name="M:GeoFramework.Latitude.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance by parsing the specified string value.
            </summary>
            <param name="value">
            <para>A <strong>String</strong> in any of the following formats (or variation
            depending on the local culture):</para>
            
             <para>
            	 <table cellspacing="0" cols="4" cellpadding="2" width="100%">
            		 <tbody>
            			 <tr>
            				 <td>hh</td>
            				 <td>hh.h</td>
            				 <td>hh mm</td>
            				 <td>hh mm.mm</td>
            			 </tr>
            			 <tr>
            				 <td>hh mm ss</td>
            				 <td>hh mm ss.sss</td>
            				 <td></td>
            				 <td></td>
            			 </tr>
            			 <tr>
            				 <td>hh i</td>
            				 <td>hh.h i</td>
            				 <td>hh mm i</td>
            				 <td>hh mm.mm i</td>
            			 </tr>
            			 <tr>
            				 <td>hh mm ss i</td>
            				 <td>hh mm ss.sss i</td>
            				 <td></td>
            				 <td></td>
            			 </tr>
            		 </tbody>
            	 </table>
            
            Where <strong>I</strong> represents a case-insensitive hemisphere indicator "N" or "S".
             </para>
             <para>Any non-numeric character between numbers is considered a delimiter. Thus, a
             value of <strong>12°34'56.78"N</strong> or even <strong>12A34B56.78CN</strong> is
             treated the same as <strong>12 34 56.78 N</strong>.</para>
            </param>
            <seealso cref="M:GeoFramework.Latitude.Parse(System.String)">Parse</seealso>
            <example>
                This example creates a new instance by parsing a string. (NOTE: The double-quote is
                doubled up to represent a single double-quote in the string.) 
                <code lang="VB">
            Dim MyLatitude As New Latitude("23°45'67.8""N")
                </code>
            	<code lang="CS">
            Latitude MyLatitude = new Latitude("23°45'67.8\"N");
                </code>
            </example>
            <returns>An <strong>Latitude</strong> containing the specified value.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
        </member>
        <member name="M:GeoFramework.Latitude.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance by deserializing the specified XML.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:GeoFramework.Latitude.LesserOf(GeoFramework.Latitude)">
            <returns>The <strong>Latitude</strong> containing the smallest value.</returns>
            <summary>Returns the object with the smallest value.</summary>
            <param name="value">A <strong>Latitude</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Latitude.GreaterOf(GeoFramework.Latitude)">
            <summary>Returns the object with the largest value.</summary>
            <returns>A <strong>Latitude</strong> containing the largest value.</returns>
            <param name="value">A <strong>Latitude</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Latitude.Round(System.Int32)">
            <summary>
            Returns a new instance whose value is rounded the specified number of decimals.
            </summary>
            <param name="decimals">An <strong>Integer</strong> specifying the number of decimals to round off to.</param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Latitude.Mirror">
            <summary>Returns an angle opposite of the current instance.</summary>
            <returns>An <strong>Latitude</strong> representing the mirrored value.</returns>
            <remarks>
            This method returns the "opposite" of the current instance. The opposite is
            defined as the point on the other side of an imaginary circle. For example, if an angle
            is 0°, at the top of a circle, this method returns 180°, at the bottom of the
            circle.
            </remarks>
            <example>
                This example creates a new <strong>Latitude</strong> of 45° then calculates its mirror
                of 225°. (45 + 180) 
                <code lang="VB" title="[New Example]">
            Dim Latitude1 As New Latitude(45)
            Dim Latitude2 As Latitude = Latitude1.Mirror()
            Debug.WriteLine(Latitude2.ToString())
            ' Output: 225
                </code>
            	<code lang="CS" title="[New Example]">
            Latitude Latitude1 = new Latitude(45);
            Latitude Latitude2 = Latitude1.Mirror();
            Console.WriteLine(Latitude2.ToString());
            // Output: 225
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Latitude.ToRadians">
            <summary>Converts the current instance into radians.</summary>
            <returns>A <see cref="T:GeoFramework.Radian">Radian</see> object.</returns>
            <remarks>
            	<para>This function is typically used to convert an angular measurement into
             radians before performing a trigonometric function.
            		</para>
            </remarks>
            <seealso cref="T:GeoFramework.Radian">Radian Class</seealso>
            <overloads>Converts an angular measurement into radians before further processing.</overloads>
            <example>
                This example converts a measurement of 90° into radians. 
                <code lang="VB">
            Dim MyLatitude As New Latitude(90)
            Dim MyRadians As Radian = MyLatitude.ToRadians()
                </code>
            	<code lang="CS">
            Latitude MyLatitude = new Latitude(90);
            Radian MyRadians = MyLatitude.ToRadians();
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Latitude.Normalize">
            <summary>
            Causes the value to be adjusted to between -90 and +90.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Latitude.IsNorthOf(GeoFramework.Latitude)">
            <summary>
            Indicates if the current instance is North of the specified latitude.
            </summary>
            <param name="latitude">A <strong>Latitude</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more North than the specified instance.</returns>
        </member>
        <member name="M:GeoFramework.Latitude.IsSouthOf(GeoFramework.Latitude)">
            <summary>
            Indicates if the current instance is South of the specified latitude.
            </summary>
            <param name="latitude">A <strong>Latitude</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more South than the specified instance.</returns>
        </member>
        <member name="M:GeoFramework.Latitude.ToHemisphere(GeoFramework.LatitudeHemisphere)">
            <summary>Converts the current instance to the northern or southern hemisphere.</summary>
        </member>
        <member name="M:GeoFramework.Latitude.ToString(System.String)">
            <summary>Outputs the angle as a string using the specified format.</summary>
            <returns>A <strong>String</strong> in the specified format.</returns>
            <remarks>
            	<para>This method returns the current instance output in a specific format. If no
                value for the format is specified, a default format of "d.dddd°" is used. Any
                string output by this method can be converted back into an Latitude object using the
                <strong>Parse</strong> method or <strong>Latitude(string)</strong> constructor.</para>
            </remarks>
            <example>
                This example uses the <strong>ToString</strong> method to output an angle in a
                custom format. The " <strong>h°</strong> " code represents hours along with a
                degree symbol (Alt+0176 on the keypad), and " <strong>m.mm</strong> " represents
                the minutes out to two decimals. Mmm. 
                <code lang="VB">
            Dim MyLatitude As New Latitude(45, 16.772)
            Debug.WriteLine(MyLatitude.ToString("h°m.mm"))
            ' Output: 45°16.78
                </code>
            	<code lang="CS">
            Dim MyLatitude As New Latitude(45, 16.772);
            Debug.WriteLine(MyLatitude.ToString("h°m.mm"));
            // Output: 45°16.78
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Latitude.Ceiling">
            <summary>Returns the smallest integer greater than the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Latitude.Floor">
            <summary>Returns the largest integer which is smaller than the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Latitude.RoundSeconds">
            <summary>Returns a new instance whose Seconds property is evenly divisible by 15.</summary>
            <returns>An <strong>Latitude</strong> containing the rounded value.</returns>
            <remarks>
            This method is used to align or "snap" an angle to a regular interval. For
            example, a grid might be easier to read if it were drawn at 30-second intervals instead
            of 24.198-second intervals.
            </remarks>
        </member>
        <member name="M:GeoFramework.Latitude.RoundSeconds(System.Double)">
            <summary>
            Returns a new angle whose Seconds property is evenly divisible by the specified amount.
            </summary>
            <returns>An <strong>Latitude</strong> containing the rounded value.</returns>
            <remarks>
            This method is used to align or "snap" an angle to a regular interval. For
            example, a grid might be easier to read if it were drawn at 30-second intervals instead
            of 24.198-second intervals.
            </remarks>
            <param name="interval">
            A <strong>Double</strong> between 0 and 60 indicating the interval to round
            to.
            </param>
        </member>
        <member name="M:GeoFramework.Latitude.Equals(System.Object)">
            <summary>Compares the current value to another Latitude object's value.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the object's DecimalDegrees
            properties match.
            </returns>
            <remarks>This </remarks>
            <param name="obj">
            An <strong>Latitude</strong>, <strong>Double</strong>, or <strong>Integer</strong>
            to compare with.
            </param>
        </member>
        <member name="M:GeoFramework.Latitude.GetHashCode">
            <summary>Returns a unique code for this instance.</summary>
            <remarks>
            Since the <strong>Latitude</strong> class is immutable, this property may be used
            safely with hash tables.
            </remarks>
            <returns>
            An <strong>Integer</strong> representing a unique code for the current
            instance.
            </returns>
        </member>
        <member name="M:GeoFramework.Latitude.ToString">
            <summary>Outputs the angle as a string using the default format.</summary>
            <returns><para>A <strong>String</strong> created using the default format.</para></returns>
            <remarks>
            	<para>This method formats the current instance using the default format of
                "d.dddd°." Any string output by this method can be converted back into an Latitude
                object using the <strong>Parse</strong> method or <strong>Latitude(string)</strong>
                constructor.</para>
            </remarks>
            <example>
                This example outputs a value of 90 degrees in the default format of ###.#°. 
                <code lang="VB">
            Dim MyLatitude As New Latitude(90)
            Debug.WriteLine(MyLatitude.ToString)
            ' Output: "90°"
                </code>
            	<code lang="CS">
            Latitude MyLatitude = new Latitude(90);
            Debug.WriteLine(MyLatitude.ToString());
            // Output: "90°"
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Latitude.Normalize(System.Double)">
            <overloads>Converts a measurement to its equivalent value between -90 and 
            90 degrees.</overloads>
        </member>
        <member name="M:GeoFramework.Latitude.Random">
            <summary>Returns a random latitude.</summary>
        </member>
        <member name="M:GeoFramework.Latitude.Random(System.Random)">
            <summary>Returns a random latitude based on the specified seed.</summary>
        </member>
        <member name="M:GeoFramework.Latitude.Random(GeoFramework.Latitude,GeoFramework.Latitude)">
            <summary>
            Returns a random latitude using the specified northern and southern boundaries.
            </summary>
            <param name="northernmost"></param>
            <param name="southernmost"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Latitude.Random(System.Random,GeoFramework.Latitude,GeoFramework.Latitude)">
            <summary>
            Returns a random latitude between the specified minimum and maximum.
            </summary>
            <param name="generator">a <strong>Random</strong> object used to generate random values.</param>
            <param name="northernmost">A <strong>Latitude</strong> specifying the northern-most allowed latitude.</param>
            <param name="southernmost">A <strong>Latitude</strong> specifying the southern-most allowed latitude.</param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Latitude.ToDecimalDegrees(System.Int32,System.Int32,System.Double)">
            <summary>Converts arbitrary hour, minute and seconds into decimal degrees.</summary>
            <returns>
            A <strong>Double</strong> containing the decimal degree version of the specified
            values.
            </returns>
            <remarks>
            This function is used to convert three-part measurements into a single value. The
            result of this method is typically assigned to the
            <see cref="P:GeoFramework.Latitude.DecimalDegrees">
            DecimalDegrees</see> property. Values are rounded to thirteen decimal 
            places, the maximum precision allowed by this type.
            </remarks>
            <seealso cref="P:GeoFramework.Latitude.DecimalDegrees">DecimalDegrees Property</seealso>
            <example>
                This example converts a value of 10°30'0" into decimal degrees (10.5). 
                <code lang="VB" title="ToDecimalDegrees Example (VB)">
            Dim MyValue As Double = Latitude.ToDecimalDegrees(10, 30, 0)
                </code>
            	<code lang="CS" title="ToDecimalDegrees Example (C#)">
            double MyValue = Latitude.ToDecimalDegrees(10, 30, 0);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Latitude.ToDecimalDegrees(System.Int32,System.Double)">
            <summary>Converts arbitrary hour and decimal minutes into decimal degrees.</summary>
            <returns>
            A <strong>Double</strong> containing the decimal degree version of the specified
            values.
            </returns>
            <remarks>
            This function is used to convert three-part measurements into a single value. The
            result of this method is typically assigned to the
            <see cref="P:GeoFramework.Latitude.DecimalDegrees">
            DecimalDegrees</see> property. Values are rounded to thirteen decimal 
            places, the maximum precision allowed by this type.
            </remarks>
        </member>
        <member name="M:GeoFramework.Latitude.ToDecimalDegrees(System.Int32)">
            <summary>Converts an hour value into decimal degrees.</summary>
            <returns>
            A <strong>Double</strong> containing the decimal degree version of the specified
            values.
            </returns>
            <remarks>
            The specified value will be converted to a double value.
            </remarks>
        </member>
        <member name="M:GeoFramework.Latitude.ToDecimalDegrees(System.Int32,System.Double,GeoFramework.LatitudeHemisphere)">
            <summary>Converts arbitrary hour and decimal minutes into decimal degrees.</summary>
            <returns>
            A <strong>Double</strong> containing the decimal degree version of the specified
            values.
            </returns>
            <remarks>
            The specified value will be converted to decimal degrees, then rounded to thirteen digits, the maximum precision allowed by this type.
            </remarks>
        </member>
        <member name="M:GeoFramework.Latitude.ToDecimalDegrees(System.Double,GeoFramework.LatitudeHemisphere)">
            <summary>Converts arbitrary decrees into well-formed decimal degrees.</summary>
            <returns>
            A <strong>Double</strong> containing the decimal degree version of the specified
            values.
            </returns>
            <remarks>
            The specified value will be rounded to thirteen digits, the maximum precision allowed by this type.
            </remarks>
        </member>
        <member name="M:GeoFramework.Latitude.ToDecimalDegrees(System.Int32,System.Int32,System.Double,GeoFramework.LatitudeHemisphere)">
            <summary>Converts arbitrary hour, minute and seconds into decimal degrees.</summary>
            <returns>
            A <strong>Double</strong> containing the decimal degree version of the specified
            values.
            </returns>
            <remarks>
            This function is used to convert three-part measurements into a single value. The
            result of this method is typically assigned to the
            <see cref="P:GeoFramework.Latitude.DecimalDegrees">
            DecimalDegrees</see> property. Values are rounded to thirteen decimal 
            places, the maximum precision allowed by this type.
            </remarks>
        </member>
        <member name="M:GeoFramework.Latitude.LesserOf(GeoFramework.Latitude,GeoFramework.Latitude)">
            <returns>The <strong>Latitude</strong> containing the smallest value.</returns>
            <summary>Returns the object with the smallest value.</summary>
            <param name="value1">A <strong>Latitude</strong> object.</param>
            <param name="value2">A <strong>Latitude</strong> object.</param>
        </member>
        <member name="M:GeoFramework.Latitude.GreaterOf(GeoFramework.Latitude,GeoFramework.Latitude)">
            <summary>Returns the object with the largest value.</summary>
            <returns>A <strong>Latitude</strong> containing the largest value.</returns>
            <param name="value1">A <strong>Latitude</strong> object.</param>
            <param name="value2">A <strong>Latitude</strong> object.</param>
        </member>
        <member name="M:GeoFramework.Latitude.ToRadians(GeoFramework.Latitude)">
            <remarks>
            	<para>This function is typically used to convert an angular measurement into
             radians before performing a trigonometric function.</para>
            </remarks>
            <returns>A <see cref="T:GeoFramework.Radian"><strong>Radian</strong></see> object.</returns>
            <summary>Converts an angular measurement into radians.</summary>
            <example>
                This example shows a quick way to convert an angle of 90° into radians. 
                <code lang="VB">
            Dim MyRadian As Radian = Latitude.ToRadians(90)
                </code>
            	<code lang="CS">
            Radian MyRadian = Latitude.ToRadians(90);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Latitude.FromRadians(GeoFramework.Radian)">
            <summary>Converts a value in radians into an angular measurement.</summary>
            <remarks>
            	This function is typically used in conjunction with the
            	<see cref="M:GeoFramework.Latitude.ToRadians">ToRadians</see>
            	method after a trigonometric function has completed. The converted value is stored in
            	the <see cref="P:GeoFramework.Latitude.DecimalDegrees">DecimalDegrees</see> property.
            </remarks>
            <seealso cref="M:GeoFramework.Latitude.ToRadians">ToRadians</seealso>
            <seealso cref="T:GeoFramework.Radian">Radian Class</seealso>
            <example>
                This example uses the <strong>FromRadians</strong> method to convert a value of one
                radian into an <strong>Latitude</strong> of 57°. 
                <code lang="VB">
            ' Create a new angle equal to one radian
            Dim MyRadians As New Radian(1)
            Dim MyLatitude As Latitude = Latitude.FromRadians(MyRadians)
            Debug.WriteLine(MyLatitude.ToString())
            ' Output: 57°
                </code>
            	<code lang="CS">
            // Create a new angle equal to one radian
            Radian MyRadians = new Radian(1);
            Latitude MyLatitude = Latitude.FromRadians(MyRadians);
            Console.WriteLine(MyLatitude.ToString());
            // Output: 57°
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Latitude.Parse(System.String)">
            <summary>Converts the specified string into an Latitude object.</summary>
            <returns>
            	A new <strong>Latitude</strong> object populated with the specified 
            	values.
            </returns>
            <remarks>
            	<para>This method parses the specified string into an <strong>Latitude</strong> object
                using the current culture. This constructor can parse any strings created via the
                <strong>ToString</strong> method.</para>
            </remarks>
            <example>
                This example creates a new angular measurement using the <strong>Parse</strong>
                method. 
                <code lang="VB">
            Dim NewLatitude As Latitude = Latitude.Parse("123.45°")
                </code>
            	<code lang="CS">
            Latitude NewLatitude = Latitude.Parse("123.45°");
                </code>
            </example>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
        </member>
        <member name="M:GeoFramework.Latitude.Parse(System.String,System.Globalization.CultureInfo)">
            <remarks>
            	<para>This powerful method is typically used to process data from a data store or a
                value input by the user in any culture. This function can accept any format which
                can be output by the ToString method.</para>
            </remarks>
            <returns>A new <strong>Latitude</strong> object equivalent to the specified string.</returns>
            <summary>
            Converts the specified string into an <strong>Latitude</strong> object using the
            specified culture.
            </summary>
            <param name="value">
            A <strong>String</strong> describing an angle in the form of decimal degrees or a
            sexagesimal.
            </param>
            <param name="culture">
            A <strong>CultureInfo</strong> object describing the numeric format to use during
            conversion.
            </param>
        </member>
        <member name="M:GeoFramework.Latitude.Increment">
            <summary>Returns the current instance increased by one.</summary>
            <returns>An <strong>Latitude</strong> object.</returns>
            <remarks>
            	<para>This method increases the <strong>DecimalDegrees</strong> property by 1.0,
                returned as a new instance.</para>
            	<para><font color="red">Since the <strong>Latitude</strong> class is immutable, this
                method cannot be used to modify an existing instance.</font></para>
            </remarks>
            <example>
                This example uses the <strong>Increment</strong> method to increase an Latitude's
                value. It also demonstrates the subtle error which can be caused if
                <strong>Increment</strong> is called while ignoring the return value.
                <code lang="VB" title="[New Example]">
            ' Correct use of Increment
            Dim Latitude1 As New Latitude(89)
            Latitude1 = Latitude1.Increment()
             
            ' Incorrect use of Increment
            Dim Latitude1 = New Latitude(89)
            Latitude1.Increment()
            ' NOTE: Latitude1 will still be 89°!
                </code>
            	<code lang="CS" title="[New Example]">
            // Correct use of Increment
            Latitude Latitude1 = new Latitude(89);
            Latitude1 = Latitude1.Increment();
             
            // Incorrect use of Increment
            Latitude Latitude1 = new Latitude(89);
            Latitude1.Increment();
            // NOTE: Latitude1 will still be 89°!
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Latitude.Add(System.Double)">
            <summary>Increases the current instance by the specified value.</summary>
            <returns>A new <strong>Latitude</strong> containing the summed values.</returns>
            <example>
                This example adds 45° to the current instance of 45°, returning 90°. 
                <code lang="VB" title="[New Example]">
            Dim Latitude1 As New Latitude(45)
            Latitude1 = Latitude1.Add(45)
                </code>
            	<code lang="CS" title="[New Example]">
            Latitude Latitude1 = new Latitude(45);
            Latitude1 = Latitude1.Add(45);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to add to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Latitude.Decrement">
            <summary>Returns the current instance decreased by one.</summary>
            <returns>An <strong>Latitude</strong> object.</returns>
            <remarks>
            	<para>This method decreases the <strong>DecimalDegrees</strong> property by 1.0,
                returned as a new instance.</para>
            	<para><font color="red">Since the <strong>Latitude</strong> class is immutable, this
                method cannot be used to modify an existing instance.</font></para>
            </remarks>
            <example>
                This example uses the <strong>Decrement</strong> method to decrease an Latitude's
                value. It also demonstrates the subtle error which can be caused if
                <strong>Decrement</strong> is called while ignoring the return value.
                <code lang="VB" title="[New Example]">
            ' Correct use of Decrement
            Dim Latitude1 As New Latitude(91)
            Latitude1 = Latitude1.Decrement()
             
            ' Incorrect use of Decrement
            Dim Latitude1 = New Latitude(91)
            Latitude1.Increment()
            ' NOTE: Latitude1 will still be 91°!
                </code>
            	<code lang="CS" title="[New Example]">
            // Correct use of Decrement
            Latitude Latitude1 = new Latitude(91);
            Latitude1 = Latitude1.Decrement();
             
            // Incorrect use of Decrement
            Latitude Latitude1 = new Latitude(91);
            Latitude1.Decrement();
            // NOTE: Latitude1 will still be 91°!
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Latitude.Subtract(System.Double)">
            <summary>Decreases the current instance by the specified value.</summary>
            <returns>A new <strong>Latitude</strong> containing the new value.</returns>
            <example>
                This example subtracts 30° from the current instance of 90°, returning 60°. 
                <code lang="VB" title="[New Example]">
            Dim Latitude1 As New Latitude(90)
            Latitude1 = Latitude1.Subtract(30)
                </code>
            	<code lang="CS" title="[New Example]">
            Latitude Latitude1 = new Latitude(90);
            Latitude1 = Latitude1.Subtract(30);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to subtract from the current instance.</param>
        </member>
        <member name="M:GeoFramework.Latitude.Multiply(System.Double)">
            <summary>Multiplies the current instance by the specified value.</summary>
            <returns>A new <strong>Latitude</strong> containing the product of the two numbers.</returns>
            <example>
                This example multiplies 30° with three, returning 90°. 
                <code lang="VB" title="[New Example]">
            Dim Latitude1 As New Latitude(30)
            Latitude1 = Latitude1.Multiply(3)
                </code>
            	<code lang="CS" title="[New Example]">
            Latitude Latitude1 = new Latitude(30);
            Latitude1 = Latitude1.Multiply(3);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to multiply with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Latitude.Divide(System.Double)">
            <summary>Divides the current instance by the specified value.</summary>
            <returns>An <strong>Latitude</strong> containing the new value.</returns>
            <example>
                This example divides 90° by three, returning 30°. 
                <code lang="VB" title="[New Example]">
            Dim Latitude1 As New Latitude(90)
            Latitude1 = Latitude1.Divide(3)
                </code>
            	<code lang="CS" title="[New Example]">
            Latitude Latitude1 = new Latitude(90);
            Latitude1 = Latitude1.Divide(3);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> representing a denominator to divide by.</param>
        </member>
        <member name="M:GeoFramework.Latitude.IsLessThan(GeoFramework.Latitude)">
            <summary>Indicates if the current instance is smaller than the specified value.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than the specified value.
            </returns>
            <param name="value">An <strong>Latitude</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Latitude.IsLessThanOrEqualTo(GeoFramework.Latitude)">
            <remarks>
            This method compares the <strong>DecimalDegrees</strong> property with the
            specified value. This method is the same as the "&lt;=" operator.
            </remarks>
            <summary>
            Indicates if the current instance is smaller than or equal to the specified
            value.
            </summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than or equal to the specified value.
            </returns>
            <param name="value">An <strong>Latitude</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Latitude.IsGreaterThan(GeoFramework.Latitude)">
            <summary>Indicates if the current instance is larger than the specified value.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            greater than the specified value.
            </returns>
            <param name="value">An <strong>Latitude</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Latitude.IsGreaterThanOrEqualTo(GeoFramework.Latitude)">
            <summary>
            Indicates if the current instance is larger than or equal to the specified
            value.
            </summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            greater than or equal to the specified value.
            </returns>
            <param name="value">An <strong>Latitude</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Latitude.op_Explicit(GeoFramework.Radian)~GeoFramework.Latitude">
            <summary>
            Converts a measurement in Radians into an Latitude.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Latitude.op_Explicit(System.Double)~GeoFramework.Latitude">
            <summary>
            Converts a decimal degree measurement as a Double into an Latitude.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Latitude.op_Explicit(System.Single)~GeoFramework.Latitude">
            <summary>
            Converts a decimal degree measurement as a Double into an Latitude.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Latitude.op_Explicit(GeoFramework.Latitude)~System.Double">
            <summary>
            Converts a decimal degree measurement as a Double into an Latitude.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Latitude.op_Explicit(GeoFramework.Latitude)~System.Single">
            <summary>
            Converts a decimal degree measurement as a Double into an Latitude.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Latitude.op_Explicit(System.Int32)~GeoFramework.Latitude">
            <summary>
            Converts a measurement in degrees as an Integer into an Latitude.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Latitude.op_Explicit(System.String)~GeoFramework.Latitude">
            <summary>
            Converts a measurement in the form of a formatted String into an Latitude.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Latitude.op_Explicit(GeoFramework.Latitude)~System.String">
            <summary>
            Converts an Latitude into a String.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <remarks>This operator calls the ToString() method using the current culture.</remarks>
        </member>
        <member name="M:GeoFramework.Latitude.Clone">
            <summary>Creates a copy of the current instance.</summary>
            <returns>An <strong>Latitude</strong> of the same value as the current instance.</returns>
        </member>
        <member name="M:GeoFramework.Latitude.Equals(GeoFramework.Latitude,System.Int32)">
            <summary>
            Compares the current instance to another instance using the specified
            precision.
            </summary>
            <returns>
            	<para>A <strong>Boolean</strong>, <strong>True</strong> if the
                <strong>DecimalDegrees</strong> property of the current instance matches the
                specified instance's <strong>DecimalDegrees</strong> property.</para>
            </returns>
            <remarks>
            	<para>This is typically used in cases where precision is only significant for a few
                digits and exact comparison is not necessary.</para>
            	<para><em>NOTE: This method compares objects by value, not by
                reference.</em></para>
            </remarks>
            <example>
                These examples compare two fractional values using specific numbers of digits for
                comparison. 
                <code lang="VB" title="[New Example]">
            ' Equals will return False
            Dim Latitude1 As New Latitude(90.15);
            Dim Latitude2 As New Latitude(90.12);
            If Latitude1.Equals(Latitude2, 2) Then
                 Debug.WriteLine("The values are the same to two digits of precision.");
             
            ' Equals will return True
            Dim Latitude1 As New Latitude(90.15);
            Dim Latitude2 As New Latitude(90.12);
            If Latitude1.Equals(Latitude2, 1) Then
                 Debug.WriteLine("The values are the same to one digit of precision.");
                </code>
            	<code lang="CS" title="[New Example]">
            // Equals will return False
            Latitude Latitude1 = new Latitude(90.15);
            Latitude Latitude2 = new Latitude(90.12);
            if(Latitude1.Equals(Latitude2, 2))
                 Console.WriteLine("The values are the same to two digits of precision.");
             
            // Equals will return True
            Latitude Latitude1 = new Latitude(90.15);
            Latitude Latitude2 = new Latitude(90.12);
            if(Latitude1.Equals(Latitude2, 1))
                 Console.WriteLine("The values are the same to one digits of precision.");
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Latitude.ToString(System.String,System.IFormatProvider)">
            <summary>Outputs the angle as a string using the specified format.</summary>
            <returns>A <strong>String</strong> in the specified format.</returns>
            <remarks>
            	<para>This method returns the current instance output in a specific format. If no
                value for the format is specified, a default format of "d.dddd" is used. Any string
                output by this method can be converted back into an Latitude object using the
                <strong>Parse</strong> method or <strong>Latitude(string)</strong> constructor.</para>
            </remarks>
            <example>
                This example uses the <strong>ToString</strong> method to output an angle in a
                custom format. The " <strong>h°</strong> " code represents hours along with a
                degree symbol (Alt+0176 on the keypad), and " <strong>m.mm</strong> " represents
                the minutes out to two decimals. Mmm. 
                <code lang="VB">
            Dim MyLatitude As New Latitude(45, 16.772)
            Debug.WriteLine(MyLatitude.ToString("h°m.mm", CultureInfo.CurrentCulture))
            ' Output: 45°16.78
                </code>
            	<code lang="CS">
            Dim MyLatitude As New Latitude(45, 16.772);
            Debug.WriteLine(MyLatitude.ToString("h°m.mm", CultureInfo.CurrentCulture));
            // Output: 45°16.78
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Latitude.DecimalDegrees">
            <summary>Returns the value of the angle as decimal degrees.</summary>
            <value>A <strong>Double</strong> value.</value>
            <remarks>This property returns the value of the angle as a single number.</remarks>
            <seealso cref="P:GeoFramework.Latitude.Hours">Hours Property</seealso>
            <seealso cref="P:GeoFramework.Latitude.Minutes">Minutes Property</seealso>
            <seealso cref="P:GeoFramework.Latitude.Seconds">Seconds Property</seealso>
            <example>
                This example demonstrates how the
                <see cref="P:GeoFramework.Latitude.DecimalDegrees"><strong>DecimalDegrees</strong></see> property is
                calculated automatically when creating an angle using hours, minutes and seconds. 
                <code lang="VB">
            ' Create an angle of 20°30'
            Dim MyLatitude As New Latitude(20, 30)
            ' Setting the DecimalMinutes recalculated other properties 
            Debug.WriteLine(MyLatitude.DecimalDegrees)
            ' Output: "20.5"  the same as 20°30'
                </code>
            	<code lang="CS">
            // Create an angle of 20°30'
            Latitude MyLatitude = New Latitude(20, 30);
            // Setting the DecimalMinutes recalculated other properties 
            Console.WriteLine(MyLatitude.DecimalDegrees)
            // Output: "20.5"  the same as 20°30'
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Latitude.DecimalMinutes">
            <summary>Returns the minutes and seconds as a single numeric value.</summary>
            <seealso cref="P:GeoFramework.Latitude.Minutes">Minutes Property</seealso>
            <seealso cref="P:GeoFramework.Latitude.DecimalDegrees">DecimalDegrees Property</seealso>
            <value>A <strong>Double</strong> value.</value>
            <remarks>
            This property is used when minutes and seconds are represented as a single
            decimal value.
            </remarks>
            <example>
                This example demonstrates how the <strong>DecimalMinutes</strong> property is
                automatically calculated when creating a new angle. 
                <code lang="VB">
            ' Create an angle of 20°10'30"
            Dim MyLatitude As New Latitude(20, 10, 30)
            ' The DecimalMinutes property is automatically calculated
            Debug.WriteLine(MyLatitude.DecimalMinutes)
            ' Output: "10.5"
                </code>
            	<code lang="CS">
            // Create an angle of 20°10'30"
            Latitude MyLatitude = new Latitude(20, 10, 30);
            // The DecimalMinutes property is automatically calculated
            Console.WriteLine(MyLatitude.DecimalMinutes)
            // Output: "10.5"
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Latitude.Hours">
            <summary>Returns the integer hours (degrees) portion of an angular 
            measurement.</summary>
            <seealso cref="P:GeoFramework.Latitude.Minutes">Minutes Property</seealso>
            <seealso cref="P:GeoFramework.Latitude.Seconds">Seconds Property</seealso>
            <value>An <strong>Integer</strong> value.</value>
            <remarks>
            This property is used in conjunction with the <see cref="P:GeoFramework.Latitude.Minutes">Minutes</see>
            and <see cref="P:GeoFramework.Latitude.Seconds">Seconds</see> properties to create a full angular measurement.
            This property is the same as <strong>DecimalDegrees</strong> without any fractional
            value.
            </remarks>
            <example>
                This example creates an angle of 60.5° then outputs the value of the
                <strong>Hours</strong> property, 60. 
                <code lang="VB">
            Dim MyLatitude As New Latitude(60.5)
            Debug.WriteLine(MyLatitude.Hours)
            ' Output: 60
                </code>
            	<code lang="CS">
            Latitude MyLatitude = new Latitude(60.5);
            Console.WriteLine(MyLatitude.Hours);
            // Output: 60
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Latitude.Minutes">
            <summary>Returns the integer minutes portion of an angular measurement.</summary>
            <seealso cref="P:GeoFramework.Latitude.Hours">Hours Property</seealso>
            <seealso cref="P:GeoFramework.Latitude.Seconds">Seconds Property</seealso>
            <remarks>
            This property is used in conjunction with the <see cref="P:GeoFramework.Latitude.Hours">Hours</see> and
            <see cref="P:GeoFramework.Latitude.Seconds">Seconds</see> properties to create a sexagesimal
            measurement.
            </remarks>
            <value>An <strong>Integer</strong>.</value>
            <example>
                This example creates an angle of 45.5° then outputs the value of the
                <strong>Minutes</strong> property, 30. 
                <code lang="VB">
            Dim MyLatitude As New Latitude(45.5)
            Debug.WriteLine(MyLatitude.Minutes)
            ' Output: 30
                </code>
            	<code lang="CS">
            Latitude MyLatitude = new Latitude(45.5);
            Console.WriteLine(MyLatitude.Minutes);
            // Output: 30
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Latitude.Seconds">
            <summary>Returns the seconds minutes portion of an angular measurement.</summary>
            <remarks>
            This property is used in conjunction with the <see cref="P:GeoFramework.Latitude.Hours">Hours</see> and
            <see cref="P:GeoFramework.Latitude.Minutes">Minutes</see> properties to create a sexagesimal
            measurement.
            </remarks>
            <seealso cref="P:GeoFramework.Latitude.Hours">Hours Property</seealso>
            <seealso cref="P:GeoFramework.Latitude.Minutes">Minutes Property</seealso>
            <value>A <strong>Double</strong> value.</value>
            <example>
                This example creates an angle of 45°10.5' then outputs the value of the
                <strong>Seconds</strong> property, 30. 
                <code lang="VB">
            Dim MyLatitude As New Latitude(45, 10.5)
            Debug.WriteLine(MyLatitude.Seconds)
            ' Output: 30
                </code>
            	<code lang="CS">
            Dim MyLatitude As New Latitude(45, 10.5);
            Console.WriteLine(MyLatitude.Seconds);
            // Output: 30
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Latitude.Hemisphere">
            <summary>Indicates if the latitude is north or south of the equator.</summary>
        </member>
        <member name="P:GeoFramework.Latitude.IsEmpty">
            <summary>Indicates if the current instance has a non-zero value.</summary>
            <value>
            A <strong>Boolean</strong>, <strong>True</strong> if the
            <strong>DecimalDegrees</strong> property is zero.
            </value>
            <seealso cref="F:GeoFramework.Latitude.Empty">Empty Field</seealso>
        </member>
        <member name="P:GeoFramework.Latitude.IsInfinity">
            <summary>Indicates if the current instance represents an infinite value.</summary>
        </member>
        <member name="P:GeoFramework.Latitude.IsInvalid">
            <summary>
            Indicates whether the value is invalid or unspecified.
            </summary>
        </member>
        <member name="P:GeoFramework.Latitude.IsNormalized">
            <summary>Indicates whether the value has been normalized and is within the 
            allowed bounds of -90° and 90°.</summary>
        </member>
        <member name="T:GeoFramework.LatitudeHemisphere">
            <summary>Indicates the position of a latitude measurement relative to the equator.</summary>
            <remarks>
            <para>This enumeration is used by the <see cref="P:GeoFramework.Latitude.Hemisphere">Hemisphere</see> 
            property of the <see cref="T:GeoFramework.Latitude">Latitude</see> class. If a latitude is south of the 
            equator, it's value is displayed as a negative number, or with a single letter (but not 
            both). For example, 39 degrees south of the equator can be expressed in either of these
            ways:</para>
            
            <list type="bullet">
             <item>39°S</item>
             <item>-39°</item>
            </list>
            </remarks>
            <seealso cref="P:GeoFramework.Longitude.Hemisphere">Hemisphere Property (Longitude Class)</seealso>
            <seealso cref="T:GeoFramework.LongitudeHemisphere">LongitudeHemisphere Enumeration</seealso>
        </member>
        <member name="F:GeoFramework.LatitudeHemisphere.None">
            <summary>Missing latitude information.</summary>
        </member>
        <member name="F:GeoFramework.LatitudeHemisphere.North">
            <summary>The latitude is north of the equator.</summary>
        </member>
        <member name="F:GeoFramework.LatitudeHemisphere.South">
            <summary>The latitude is south of the equator.</summary>
        </member>
        <member name="T:GeoFramework.Angle">
            <summary>Represents an angular measurement around a circle.</summary>
            <remarks>
            	<para>This class serves as the base class for angular measurement classes within
                the framework, such as the <strong>Azimuth</strong>, <strong>Elevation</strong>,
                <strong>Latitude</strong> and <strong>Longitude</strong> classes. An "angular
                measurement" is a measurement around a circle. Typically, angular measurements are
                between 0° and 360°.</para>
            	<para>Angles can be represented in two forms: decimal and sexagesimal. In decimal
                form, angles are represented as a single number. In sexagesimal form, angles are
                represented in three components: hours, minutes, and seconds, very much like a
                clock.</para>
            	<para>Upon creating an <strong>Angle</strong> object, other properties such as
                <strong>DecimalDegrees</strong>, <strong>DecimalMinutes</strong>,
                <strong>Hours</strong>, <strong>Minutes</strong> and <strong>Seconds</strong> are
                calculated automatically.</para>
            	<para>Instances of this class are guaranteed to be thread-safe because they are
                immutable (properties can only be modified via constructors).</para>
            </remarks>
            <seealso cref="T:GeoFramework.Azimuth">Azimuth Class</seealso>
            <seealso cref="T:GeoFramework.Elevation">Elevation Class</seealso>
            <seealso cref="T:GeoFramework.Latitude">Latitude Class</seealso>
            <seealso cref="T:GeoFramework.Longitude">Longitude Class</seealso>
            <example>
                These examples create new instances of Angle objects. 
                <code lang="VB" description="Create an angle of 90°">
            Dim MyAngle As New Angle(90)
                </code>
            	<code lang="CS" description="Create an angle of 90°">
            Angle MyAngle = new Angle(90);
                </code>
            	<code lang="C++" description="Create an angle of 90°">
            Angle MyAngle = new Angle(90);
                </code>
            	<code lang="VB" description="Create an angle of 105°30'21.4">
            Dim MyAngle1 As New Angle(105, 30, 21.4)
                </code>
            	<code lang="CS" description="Create an angle of 105°30'21.4">
            Angle MyAngle = new Angle(105, 30, 21.4);
                </code>
            	<code lang="C++" description="Create an angle of 105°30'21.4">
            Angle MyAngle = new Angle(105, 30, 21.4);
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Angle.Minimum">
            <summary>Represents the minimum value of an angle in one turn of a circle.</summary>
            <remarks>
            This member is typically used for looping through the entire range of possible
            angles. It is possible to create angular values below this value, such as -720°.
            </remarks>
            <example>
                This example creates an angle representing the minimum allowed value. 
                <code lang="VB">
            Dim MyAngle As Angle = Angle.Minimum
                </code>
            	<code lang="CS">
            Angle MyAngle = Angle.Minimum;
                </code>
            	<code lang="C++">
            Angle MyAngle = Angle.Minimum;
                </code>
            </example>
            <value>An Angle with a value of -359.999999°.</value>
        </member>
        <member name="F:GeoFramework.Angle.Empty">
            <summary>Represents an angle with no value.</summary>
            <remarks>
            This member is typically used to initialize an angle variable to zero. When an
            angle has a value of zero, its <see cref="P:GeoFramework.Angle.IsEmpty">IsEmpty</see> property returns
            <strong>True</strong>.
            </remarks>
            <value>An Angle containing a value of zero (0°).</value>
            <seealso cref="P:GeoFramework.Angle.IsEmpty">IsEmpty Property</seealso>
        </member>
        <member name="F:GeoFramework.Angle.Infinity">
            <summary>
            Represents an angle with infinite value.
            </summary>
            <remarks>
            In some cases, the result of an angular calculation may be infinity. This member
            is used in such cases. The <see cref="P:GeoFramework.Angle.DecimalDegrees">DecimalDegrees</see> property is
            set to Double.PositiveInfinity.
            </remarks>
        </member>
        <member name="F:GeoFramework.Angle.Maximum">
            <summary>Represents the maximum value of an angle in one turn of a circle.</summary>
            <remarks>
            This member is typically used for looping through the entire range of possible
            angles, or to test the range of a value. It is possible to create angular values below
            this value, such as 720°.
            </remarks>
            <example>
                This example creates an angle representing the maximum allowed value of 359.9999°. 
                <code lang="VB">
            Dim MyAngle As Angle = Angle.Maximum
                </code>
            	<code lang="CS">
            Angle MyAngle = Angle.Maximum;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Angle.Invalid">
            <summary>
            Represents an invalid or unspecified value.
            </summary>
        </member>
        <member name="M:GeoFramework.Angle.#ctor(System.Double)">
            <summary>Creates a new instance with the specified decimal degrees.</summary>
            <example>
                This example demonstrates how to create an angle with a measurement of 90°. 
                <code lang="VB">
            Dim MyAngle As New Angle(90)
                </code>
            	<code lang="CS">
            Angle MyAngle = new Angle(90);
                </code>
            </example>
            <returns>An <strong>Angle</strong> containing the specified value.</returns>
        </member>
        <member name="M:GeoFramework.Angle.#ctor(System.Int32)">
            <summary>Creates a new instance with the specified degrees.</summary>
            <returns>An <strong>Angle</strong> containing the specified value.</returns>
            <param name="hours">
            An <strong>Integer</strong> indicating the amount of degrees, typically between 0
            and 360.
            </param>
        </member>
        <member name="M:GeoFramework.Angle.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>Creates a new instance with the specified hours, minutes and 
            seconds.</summary>
            <example>
                This example demonstrates how to create an angular measurement of 34°12'29.2 in
                hours, minutes and seconds. 
                <code lang="VB">
            Dim MyAngle As New Angle(34, 12, 29.2)
                </code>
            	<code lang="CS">
            Angle MyAngle = new Angle(34, 12, 29.2);
                </code>
            </example>
            <returns>An <strong>Angle</strong> containing the specified value.</returns>
        </member>
        <member name="M:GeoFramework.Angle.#ctor(System.Int32,System.Double)">
            <summary>Creates a new instance with the specified hours and decimal minutes.</summary>
            <example>
                This example demonstrates how an angle can be created when only the hours and
                minutes (in decimal form) are known. This creates a value of 12°42.345'. 
                <code lang="VB">
            Dim MyAngle As New Angle(12, 42.345)
                </code>
            	<code lang="VB">
            Angle MyAngle = new Angle(12, 42.345);
                </code>
            </example>
            <remarks>An <strong>Angle</strong> containing the specified value.</remarks>
        </member>
        <member name="M:GeoFramework.Angle.#ctor(System.String)">
            <summary>Creates a new instance by converting the specified string.</summary>
            <remarks>
            This constructor parses the specified string into an <strong>Angle</strong>
            object using the current culture. This constructor can parse any strings created via
            the <strong>ToString</strong> method.
            </remarks>
            <seealso cref="M:GeoFramework.Angle.Parse(System.String)">Parse Method</seealso>
            <example>
                This example creates a new instance by parsing a string. (NOTE: The double-quote is
                doubled up to represent a single double-quote in the string.) 
                <code lang="VB">
            Dim MyAngle As New Angle("123°45'67.8""")
                </code>
            	<code lang="CS">
            Angle MyAngle = new Angle("123°45'67.8\"");
                </code>
            </example>
            <returns>An <strong>Angle</strong> containing the specified value.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
        </member>
        <member name="M:GeoFramework.Angle.#ctor(System.String,System.Globalization.CultureInfo)">
            <remarks>
            This constructor parses the specified string into an <strong>Angle</strong>
            object using a specific culture. This constructor can parse any strings created via the
            <strong>ToString</strong> method.
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
            <summary>
            Creates a new instance by converting the specified string using the specified
            culture.
            </summary>
            <param name="value">
            A <strong>String</strong> describing an angle in the form of decimal degrees or a
            sexagesimal.
            </param>
            <param name="culture">
            A <strong>CultureInfo</strong> object describing the numeric format to use during
            conversion.
            </param>
        </member>
        <member name="M:GeoFramework.Angle.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance by deserializing the specified XML.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:GeoFramework.Angle.GreaterOf(GeoFramework.Angle)">
            <returns>An <strong>Angle</strong> containing the largest value.</returns>
            <summary>Returns the object with the largest value.</summary>
            <param name="value">An <strong>Angle</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Angle.LesserOf(GeoFramework.Angle)">
            <summary>Returns the object with the smallest value.</summary>
            <returns>The <strong>Angle</strong> containing the smallest value.</returns>
            <param name="value">An <strong>Angle</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Angle.Mirror">
            <summary>Returns an angle opposite of the current instance.</summary>
            <returns>An <strong>Angle</strong> representing the mirrored value.</returns>
            <remarks>
            This method returns the "opposite" of the current instance. The opposite is
            defined as the point on the other side of an imaginary circle. For example, if an angle
            is 0°, at the top of a circle, this method returns 180°, at the bottom of the
            circle.
            </remarks>
            <example>
                This example creates a new <strong>Angle</strong> of 45° then calculates its mirror
                of 225°. (45 + 180) 
                <code lang="VB" title="[New Example]">
            Dim Angle1 As New Angle(45)
            Dim Angle2 As Angle = Angle1.Mirror()
            Debug.WriteLine(Angle2.ToString())
            ' Output: 225
                </code>
            	<code lang="CS" title="[New Example]">
            Angle Angle1 = new Angle(45);
            Angle Angle2 = Angle1.Mirror();
            Console.WriteLine(Angle2.ToString());
            // Output: 225
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.Normalize">
            <summary>Modifies a value to its equivalent between 0° and 360°.</summary>
            <returns>An <strong>Angle</strong> representing the normalized angle.</returns>
            <remarks>
            	<para>This function is used to ensure that an angular measurement is within the
                allowed bounds of 0° and 360°. If a value of 360° or 720° is passed, a value of 0°
                is returned since 360° and 720° represent the same point on a circle. For the Angle
                class, this function is the same as "value Mod 360".</para>
            </remarks>
            <seealso cref="M:GeoFramework.Angle.Normalize">Normalize(Angle) Method</seealso>
            <example>
                This example demonstrates how normalization is used. The Stop statement is hit.
                This example demonstrates how the Normalize method can ensure that an angle fits
                between 0° and 359.9999°. This example normalizes 725° into 5°. 
                <code lang="VB">
            Dim MyAngle As New Angle(720)
            MyAngle = MyAngle.Normalize()
                </code>
            	<code lang="CS">
            Angle MyAngle = new Angle(720);
            MyAngle = MyAngle.Normalize();
                </code>
            	<code lang="VB">
            Dim MyValue As New Angle(725)
            MyValue = MyValue.Normalize()
                </code>
            	<code lang="CS">
            Angle MyValue = new Angle(725);
            MyValue = MyValue.Normalize();
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.ToRadians">
            <summary>Converts the current instance into radians.</summary>
            <returns>A <see cref="T:GeoFramework.Radian">Radian</see> object.</returns>
            <remarks>
            	<para>This function is typically used to convert an angular measurement into
             radians before performing a trigonometric function.
            		</para>
            </remarks>
            <seealso cref="T:GeoFramework.Radian">Radian Class</seealso>
            <overloads>Converts an angular measurement into radians before further processing.</overloads>
            <example>
                This example converts a measurement of 90° into radians. 
                <code lang="VB">
            Dim MyAngle As New Angle(90)
            Dim MyRadians As Radian = MyAngle.ToRadians()
                </code>
            	<code lang="CS">
            Angle MyAngle = new Angle(90);
            Radian MyRadians = MyAngle.ToRadians();
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.ToString(System.String)">
            <summary>Outputs the angle as a string using the specified format.</summary>
            <returns>A <strong>String</strong> in the specified format.</returns>
            <remarks>
            	<para>This method returns the current instance output in a specific format. If no
                value for the format is specified, a default format of "d.dddd°" is used. Any
                string output by this method can be converted back into an Angle object using the
                <strong>Parse</strong> method or <strong>Angle(string)</strong> constructor.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Angle.ToString(System.String)">ToString Method</seealso>
            <seealso cref="M:GeoFramework.Angle.Parse(System.String)">Parse Method</seealso>
            <example>
                This example uses the <strong>ToString</strong> method to output an angle in a
                custom format. The " <strong>h°</strong> " code represents hours along with a
                degree symbol (Alt+0176 on the keypad), and " <strong>m.mm</strong> " represents
                the minutes out to two decimals. Mmm. 
                <code lang="VB">
            Dim MyAngle As New Angle(45, 16.772)
            Debug.WriteLine(MyAngle.ToString("h°m.mm"))
            ' Output: 45°16.78
                </code>
            	<code lang="CS">
            Dim MyAngle As New Angle(45, 16.772);
            Debug.WriteLine(MyAngle.ToString("h°m.mm"));
            // Output: 45°16.78
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.Ceiling">
            <summary>Returns the smallest integer greater than the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Angle.Floor">
            <summary>Returns the largest integer which is smaller than the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Angle.RoundSeconds">
            <summary>Returns a new instance whose Seconds property is evenly divisible by 15.</summary>
            <returns>An <strong>Angle</strong> containing the rounded value.</returns>
            <remarks>
            This method is used to align or "snap" an angle to a regular interval. For
            example, a grid might be easier to read if it were drawn at 30-second intervals instead
            of 24.198-second intervals.
            </remarks>
        </member>
        <member name="M:GeoFramework.Angle.Round(System.Int32)">
            <summary>
            Returns a new instance whose value is rounded the specified number of decimals.
            </summary>
            <param name="decimals">An <strong>Integer</strong> specifying the number of decimals to round off to.</param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Angle.RoundSeconds(System.Double)">
            <summary>
            Returns a new angle whose Seconds property is evenly divisible by the specified amount.
            </summary>
            <returns>An <strong>Angle</strong> containing the rounded value.</returns>
            <remarks>
            This method is used to align or "snap" an angle to a regular interval. For
            example, a grid might be easier to read if it were drawn at 30-second intervals instead
            of 24.198-second intervals.
            </remarks>
            <param name="interval">
            A <strong>Double</strong> between 0 and 60 indicating the interval to round
            to.
            </param>
        </member>
        <member name="M:GeoFramework.Angle.Equals(System.Object)">
            <summary>Compares the current value to another Angle object's value.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the object's DecimalDegrees
            properties match.
            </returns>
            <remarks>This </remarks>
            <param name="obj">
            An <strong>Angle</strong>, <strong>Double</strong>, or <strong>Integer</strong>
            to compare with.
            </param>
        </member>
        <member name="M:GeoFramework.Angle.GetHashCode">
            <summary>Returns a unique code for this instance.</summary>
            <remarks>
            Since the <strong>Angle</strong> class is immutable, this property may be used
            safely with hash tables.
            </remarks>
            <returns>
            An <strong>Integer</strong> representing a unique code for the current
            instance.
            </returns>
        </member>
        <member name="M:GeoFramework.Angle.ToString">
            <summary>Outputs the angle as a string using the default format.</summary>
            <returns><para>A <strong>String</strong> created using the default format.</para></returns>
            <remarks>
            	<para>This method formats the current instance using the default format of
                "d.dddd°." Any string output by this method can be converted back into an Angle
                object using the <strong>Parse</strong> method or <strong>Angle(string)</strong>
                constructor.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Angle.Parse(System.String)">Parse Method</seealso>
            <example>
                This example outputs a value of 90 degrees in the default format of ###.#°. 
                <code lang="VB">
            Dim MyAngle As New Angle(90)
            Debug.WriteLine(MyAngle.ToString)
            ' Output: "90°"
                </code>
            	<code lang="CS">
            Angle MyAngle = new Angle(90);
            Debug.WriteLine(MyAngle.ToString());
            // Output: "90°"
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.Normalize(System.Double)">
            <summary>Converts the specified value to its equivalent between 0° and 360°.</summary>
            <returns>
            An Angle containing a value equivalent to the value specified, but between 0° and
            360°.
            </returns>
            <param name="decimalDegrees">A <strong>Double</strong> value to be normalized.</param>
        </member>
        <member name="M:GeoFramework.Angle.ToRadians(GeoFramework.Angle)">
            <remarks>
            	<para>This function is typically used to convert an angular measurement into
             radians before performing a trigonometric function.</para>
            </remarks>
            <returns>A <see cref="T:GeoFramework.Radian"><strong>Radian</strong></see> object.</returns>
            <summary>Converts an angular measurement into radians.</summary>
            <example>
                This example shows a quick way to convert an angle of 90° into radians. 
                <code lang="VB">
            Dim MyRadian As Radian = Angle.ToRadians(90)
                </code>
            	<code lang="CS">
            Radian MyRadian = Angle.ToRadians(90);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.FromRadians(GeoFramework.Radian)">
            <summary>Converts a value in radians into an angular measurement.</summary>
            <remarks>
            	This function is typically used in conjunction with the
            	<see cref="M:GeoFramework.Angle.ToRadians">ToRadians</see>
            	method after a trigonometric function has completed. The converted value is stored in
            	the <see cref="P:GeoFramework.Angle.DecimalDegrees">DecimalDegrees</see> property.
            </remarks>
            <seealso cref="M:GeoFramework.Angle.ToRadians">ToRadians</seealso>
            <seealso cref="T:GeoFramework.Radian">Radian Class</seealso>
            <example>
                This example uses the <strong>FromRadians</strong> method to convert a value of one
                radian into an <strong>Angle</strong> of 57°. 
                <code lang="VB">
            ' Create a new angle equal to one radian
            Dim MyRadians As New Radian(1)
            Dim MyAngle As Angle = Angle.FromRadians(MyRadians)
            Debug.WriteLine(MyAngle.ToString())
            ' Output: 57°
                </code>
            	<code lang="CS">
            // Create a new angle equal to one radian
            Radian MyRadians = new Radian(1);
            Angle MyAngle = Angle.FromRadians(MyRadians);
            Console.WriteLine(MyAngle.ToString());
            // Output: 57°
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.FromSexagesimal(System.Double)">
            <summary>
            Convers a sexagesimal number into an Angle.
            </summary>
            <param name="dms">A Double value, a number in the form of DDD.MMSSSSS format</param>
            <returns>An <strong>Angle</strong> object.</returns>
        </member>
        <member name="M:GeoFramework.Angle.LesserOf(GeoFramework.Angle,GeoFramework.Angle)">
            <returns>The <strong>Angle</strong> containing the smallest value.</returns>
            <summary>Returns the object with the smallest value.</summary>
            <param name="value">A <strong>Angle</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Angle.GreaterOf(GeoFramework.Angle,GeoFramework.Angle)">
            <summary>Returns the object with the largest value.</summary>
            <returns>A <strong>Angle</strong> containing the largest value.</returns>
            <param name="value">A <strong>Angle</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Angle.Random">
            <summary>Returns a random angle between 0° and 360°.</summary>
            <returns>An <strong>Angle</strong> containing a random value.</returns>
        </member>
        <member name="M:GeoFramework.Angle.Random(System.Random)">
            <summary>
            Returns a random Angle between 0° and 360° using the specified random number
            seed.
            </summary>
            <returns>An <strong>Angle</strong> containing a random value.</returns>
            <param name="seed">
            An <strong>Integer</strong> passed to the <strong>Random</strong> class as a
            random number seed.
            </param>
        </member>
        <member name="M:GeoFramework.Angle.op_Explicit(System.Double)~GeoFramework.Angle">
            <summary>
            Converts a decimal degree measurement as a Double into an Angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Angle.op_Explicit(System.Single)~GeoFramework.Angle">
            <summary>
            Converts a decimal degree measurement as a Single into an Angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Angle.op_Explicit(GeoFramework.Radian)~GeoFramework.Angle">
            <summary>
            Converts a measurement in Radians into an Angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Angle.op_Explicit(GeoFramework.Angle)~System.Double">
            <summary>
            Converts a decimal degree measurement as a Angle into an Double.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Angle.op_Explicit(GeoFramework.Angle)~System.Single">
            <summary>
            Converts a decimal degree measurement as a Angle into a Single.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Angle.op_Explicit(System.Int32)~GeoFramework.Angle">
            <summary>
            Converts a measurement in degrees as an Integer into an Angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Angle.op_Explicit(System.String)~GeoFramework.Angle">
            <summary>
            Converts a measurement in the form of a formatted String into an Angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Angle.op_Explicit(GeoFramework.Angle)~System.String">
            <summary>
            Converts an Angle into a String.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <remarks>This operator calls the ToString() method using the current culture.</remarks>
        </member>
        <member name="M:GeoFramework.Angle.Increment">
            <summary>Returns the current instance increased by one.</summary>
            <returns>An <strong>Angle</strong> object.</returns>
            <remarks>
            	<para>This method increases the <strong>DecimalDegrees</strong> property by 1.0,
                returned as a new instance.</para>
            	<para><font color="red">Since the <strong>Angle</strong> class is immutable, this
                method cannot be used to modify an existing instance.</font></para>
            </remarks>
            <example>
                This example uses the <strong>Increment</strong> method to increase an angle's
                value. It also demonstrates the subtle error which can be caused if
                <strong>Increment</strong> is called while ignoring the return value.
                <code lang="VB" title="[New Example]">
            ' Correct use of Increment
            Dim Angle1 As New Angle(89)
            Angle1 = Angle1.Increment()
             
            ' Incorrect use of Increment
            Dim Angle1 = New Angle(89)
            Angle1.Increment()
            ' NOTE: Angle1 will still be 89°!
                </code>
            	<code lang="CS" title="[New Example]">
            // Correct use of Increment
            Angle Angle1 = new Angle(89);
            Angle1 = Angle1.Increment();
             
            // Incorrect use of Increment
            Angle Angle1 = new Angle(89);
            Angle1.Increment();
            // NOTE: Angle1 will still be 89°!
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.Add(System.Double)">
            <summary>Increases the current instance by the specified value.</summary>
            <returns>A new <strong>Angle</strong> containing the summed values.</returns>
            <example>
                This example adds 45° to the current instance of 45°, returning 90°. 
                <code lang="VB" title="[New Example]">
            Dim Angle1 As New Angle(45)
            Angle1 = Angle1.Add(45)
                </code>
            	<code lang="CS" title="[New Example]">
            Angle Angle1 = new Angle(45);
            Angle1 = Angle1.Add(45);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to add to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Angle.Decrement">
            <summary>Returns the current instance decreased by one.</summary>
            <returns>An <strong>Angle</strong> object.</returns>
            <remarks>
            	<para>This method decreases the <strong>DecimalDegrees</strong> property by 1.0,
                returned as a new instance.</para>
            	<para><font color="red">Since the <strong>Angle</strong> class is immutable, this
                method cannot be used to modify an existing instance.</font></para>
            </remarks>
            <example>
                This example uses the <strong>Decrement</strong> method to decrease an angle's
                value. It also demonstrates the subtle error which can be caused if
                <strong>Decrement</strong> is called while ignoring the return value.
                <code lang="VB" title="[New Example]">
            ' Correct use of Decrement
            Dim Angle1 As New Angle(91)
            Angle1 = Angle1.Decrement()
             
            ' Incorrect use of Decrement
            Dim Angle1 = New Angle(91)
            Angle1.Increment()
            ' NOTE: Angle1 will still be 91°!
                </code>
            	<code lang="CS" title="[New Example]">
            // Correct use of Decrement
            Angle Angle1 = new Angle(91);
            Angle1 = Angle1.Decrement();
             
            // Incorrect use of Decrement
            Angle Angle1 = new Angle(91);
            Angle1.Decrement();
            // NOTE: Angle1 will still be 91°!
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.Subtract(System.Double)">
            <summary>Decreases the current instance by the specified value.</summary>
            <returns>A new <strong>Angle</strong> containing the new value.</returns>
            <example>
                This example subtracts 30° from the current instance of 90°, returning 60°. 
                <code lang="VB" title="[New Example]">
            Dim Angle1 As New Angle(90)
            Angle1 = Angle1.Subtract(30)
                </code>
            	<code lang="CS" title="[New Example]">
            Angle Angle1 = new Angle(90);
            Angle1 = Angle1.Subtract(30);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to subtract from the current instance.</param>
        </member>
        <member name="M:GeoFramework.Angle.Multiply(System.Double)">
            <summary>Multiplies the current instance by the specified value.</summary>
            <returns>A new <strong>Angle</strong> containing the product of the two numbers.</returns>
            <example>
                This example multiplies 30° with three, returning 90°. 
                <code lang="VB" title="[New Example]">
            Dim Angle1 As New Angle(30)
            Angle1 = Angle1.Multiply(3)
                </code>
            	<code lang="CS" title="[New Example]">
            Angle Angle1 = new Angle(30);
            Angle1 = Angle1.Multiply(3);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to multiply with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Angle.Divide(System.Double)">
            <summary>Divides the current instance by the specified value.</summary>
            <returns>An <strong>Angle</strong> containing the new value.</returns>
            <example>
                This example divides 90° by three, returning 30°. 
                <code lang="VB" title="[New Example]">
            Dim Angle1 As New Angle(90)
            Angle1 = Angle1.Divide(3)
                </code>
            	<code lang="CS" title="[New Example]">
            Angle Angle1 = new Angle(90);
            Angle1 = Angle1.Divide(3);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> representing a denominator to divide by.</param>
        </member>
        <member name="M:GeoFramework.Angle.IsLessThan(GeoFramework.Angle)">
            <summary>Indicates if the current instance is smaller than the specified value.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than the specified value.
            </returns>
            <param name="value">An <strong>Angle</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Angle.IsLessThanOrEqualTo(GeoFramework.Angle)">
            <remarks>
            This method compares the <strong>DecimalDegrees</strong> property with the
            specified value. This method is the same as the "&lt;=" operator.
            </remarks>
            <summary>
            Indicates if the current instance is smaller than or equal to the specified
            value.
            </summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than or equal to the specified value.
            </returns>
            <param name="value">An <strong>Angle</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Angle.IsGreaterThan(GeoFramework.Angle)">
            <summary>Indicates if the current instance is larger than the specified value.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            greater than the specified value.
            </returns>
            <param name="value">An <strong>Angle</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Angle.IsGreaterThanOrEqualTo(GeoFramework.Angle)">
            <summary>
            Indicates if the current instance is larger than or equal to the specified
            value.
            </summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            greater than or equal to the specified value.
            </returns>
            <param name="value">An <strong>Angle</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Angle.Parse(System.String)">
            <summary>Converts the specified string into an Angle object.</summary>
            <returns>
            	A new <strong>Angle</strong> object populated with the specified 
            	values.
            </returns>
            <remarks>
            	<para>This method parses the specified string into an <strong>Angle</strong> object
                using the current culture. This constructor can parse any strings created via the
                <strong>ToString</strong> method.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Angle.ToString(System.String)">ToString Method</seealso>
            <example>
                This example creates a new angular measurement using the <strong>Parse</strong>
                method. 
                <code lang="VB">
            Dim NewAngle As Angle = Angle.Parse("123.45°")
                </code>
            	<code lang="CS">
            Angle NewAngle = Angle.Parse("123.45°");
                </code>
            </example>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
        </member>
        <member name="M:GeoFramework.Angle.Parse(System.String,System.Globalization.CultureInfo)">
            <remarks>
            	<para>This powerful method is typically used to process data from a data store or a
                value input by the user in any culture. This function can accept any format which
                can be output by the ToString method.</para>
            </remarks>
            <returns>A new <strong>Angle</strong> object equivalent to the specified string.</returns>
            <summary>
            Converts the specified string into an <strong>Angle</strong> object using the
            specified culture.
            </summary>
            <param name="value">
            A <strong>String</strong> describing an angle in the form of decimal degrees or a
            sexagesimal.
            </param>
            <param name="culture">
            A <strong>CultureInfo</strong> object describing the numeric format to use during
            conversion.
            </param>
        </member>
        <member name="M:GeoFramework.Angle.ToDecimalDegrees(System.Int32,System.Int32,System.Double)">
            <summary>Converts arbitrary hour, minute and seconds into decimal degrees.</summary>
            <returns>
            A <strong>Double</strong> containing the decimal degree version of the specified
            values.
            </returns>
            <remarks>
            This function is used to convert three-part measurements into a single value. The
            result of this method is typically assigned to the
            <see cref="P:GeoFramework.Latitude.DecimalDegrees">
            DecimalDegrees</see> property. Values are rounded to thirteen decimal 
            places, the maximum precision allowed by this type.
            </remarks>
            <seealso cref="P:GeoFramework.Latitude.DecimalDegrees">DecimalDegrees Property</seealso>
            <seealso cref="M:GeoFramework.Latitude.Normalize">Normalize Method</seealso>
            <example>
                This example converts a value of 10°30'0" into decimal degrees (10.5). 
                <code lang="VB" title="ToDecimalDegrees Example (VB)">
            Dim MyValue As Double = Latitude.ToDecimalDegrees(10, 30, 0)
                </code>
            	<code lang="CS" title="ToDecimalDegrees Example (C#)">
            double MyValue = Latitude.ToDecimalDegrees(10, 30, 0);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.ToDecimalDegrees(System.Int32,System.Double)">
            <summary>Converts arbitrary hour and decimal minutes into decimal degrees.</summary>
            <returns>
            A <strong>Double</strong> containing the decimal degree version of the specified
            values.
            </returns>
            <remarks>
            This function is used to convert three-part measurements into a single value. The
            result of this method is typically assigned to the
            <see cref="P:GeoFramework.Latitude.DecimalDegrees">
            DecimalDegrees</see> property. Values are rounded to thirteen decimal 
            places, the maximum precision allowed by this type.
            </remarks>
        </member>
        <member name="M:GeoFramework.Angle.ToDecimalDegrees(System.Int32)">
            <summary>Converts an hour value into decimal degrees.</summary>
            <returns>
            A <strong>Double</strong> containing the decimal degree version of the specified
            values.
            </returns>
            <remarks>
            The specified value will be converted to a double value.
            </remarks>
        </member>
        <member name="M:GeoFramework.Angle.Clone">
            <summary>Creates a copy of the current instance.</summary>
            <returns>An <strong>Angle</strong> of the same value as the current instance.</returns>
        </member>
        <member name="M:GeoFramework.Angle.CompareTo(GeoFramework.Angle)">
            <summary>Returns a value indicating the relative order of two objects.</summary>
            <returns>A value of -1, 0, or 1 as documented by the IComparable interface.</returns>
            <remarks>
            	This method allows collections of <strong>Azimuth</strong> objects to be sorted.
            	The <see cref="P:GeoFramework.Angle.DecimalDegrees">DecimalDegrees</see> property of each instance is compared.
            </remarks>
            <param name="value">An <strong>Angle</strong> object to compare with.</param>
        </member>
        <member name="M:GeoFramework.Angle.Equals(GeoFramework.Angle)">
            <summary>
            Compares the current instance to another instance using the specified
            precision.
            </summary>
            <returns>
            	<para>A <strong>Boolean</strong>, <strong>True</strong> if the
                <strong>DecimalDegrees</strong> property of the current instance matches the
                specified instance's <strong>DecimalDegrees</strong> property.</para>
            </returns>
            <remarks>
            	<para>This is typically used in cases where precision is only significant for a few
                digits and exact comparison is not necessary.</para>
            	<para><em>NOTE: This method compares objects by value, not by
                reference.</em></para>
            </remarks>
            <seealso cref="M:GeoFramework.Angle.Equals(System.Object)">Equals Method</seealso>
            <example>
                These examples compare two fractional values using specific numbers of digits for
                comparison. 
                <code lang="VB" title="[New Example]">
            ' Equals will return False
            Dim Angle1 As New Angle(90.15);
            Dim Angle2 As New Angle(90.12);
            If Angle1.Equals(Angle2, 2) Then
                 Debug.WriteLine("The values are the same to two digits of precision.");
             
            ' Equals will return True
            Dim Angle1 As New Angle(90.15);
            Dim Angle2 As New Angle(90.12);
            If Angle1.Equals(Angle2, 1) Then
                 Debug.WriteLine("The values are the same to one digit of precision.");
                </code>
            	<code lang="CS" title="[New Example]">
            // Equals will return False
            Angle Angle1 = new Angle(90.15);
            Angle Angle2 = new Angle(90.12);
            if(Angle1.Equals(Angle2, 2))
                 Console.WriteLine("The values are the same to two digits of precision.");
             
            // Equals will return True
            Angle Angle1 = new Angle(90.15);
            Angle Angle2 = new Angle(90.12);
            if(Angle1.Equals(Angle2, 1))
                 Console.WriteLine("The values are the same to one digits of precision.");
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.Equals(GeoFramework.Angle,System.Int32)">
            <summary>
            Compares the current instance to another instance using the specified
            precision.
            </summary>
            <returns>
            	<para>A <strong>Boolean</strong>, <strong>True</strong> if the
                <strong>DecimalDegrees</strong> property of the current instance matches the
                specified instance's <strong>DecimalDegrees</strong> property.</para>
            </returns>
            <remarks>
            	<para>This is typically used in cases where precision is only significant for a few
                digits and exact comparison is not necessary.</para>
            	<para><em>NOTE: This method compares objects by value, not by
                reference.</em></para>
            </remarks>
            <seealso cref="M:GeoFramework.Angle.Equals(System.Object)">Equals Method</seealso>
            <example>
                These examples compare two fractional values using specific numbers of digits for
                comparison. 
                <code lang="VB" title="[New Example]">
            ' Equals will return False
            Dim Angle1 As New Angle(90.15);
            Dim Angle2 As New Angle(90.12);
            If Angle1.Equals(Angle2, 2) Then
                 Debug.WriteLine("The values are the same to two digits of precision.");
             
            ' Equals will return True
            Dim Angle1 As New Angle(90.15);
            Dim Angle2 As New Angle(90.12);
            If Angle1.Equals(Angle2, 1) Then
                 Debug.WriteLine("The values are the same to one digit of precision.");
                </code>
            	<code lang="CS" title="[New Example]">
            // Equals will return False
            Angle Angle1 = new Angle(90.15);
            Angle Angle2 = new Angle(90.12);
            if(Angle1.Equals(Angle2, 2))
                 Console.WriteLine("The values are the same to two digits of precision.");
             
            // Equals will return True
            Angle Angle1 = new Angle(90.15);
            Angle Angle2 = new Angle(90.12);
            if(Angle1.Equals(Angle2, 1))
                 Console.WriteLine("The values are the same to one digits of precision.");
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.ToString(System.String,System.IFormatProvider)">
            <summary>Outputs the angle as a string using the specified format.</summary>
            <returns>A <strong>String</strong> in the specified format.</returns>
            <remarks>
            	<para>This method returns the current instance output in a specific format. If no
                value for the format is specified, a default format of "d.dddd" is used. Any string
                output by this method can be converted back into an Angle object using the
                <strong>Parse</strong> method or <strong>Angle(string)</strong> constructor.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Angle.ToString(System.String)">ToString Method</seealso>
            <seealso cref="M:GeoFramework.Angle.Parse(System.String)">Parse Method</seealso>
            <example>
                This example uses the <strong>ToString</strong> method to output an angle in a
                custom format. The " <strong>h°</strong> " code represents hours along with a
                degree symbol (Alt+0176 on the keypad), and " <strong>m.mm</strong> " represents
                the minutes out to two decimals. Mmm. 
                <code lang="VB">
            Dim MyAngle As New Angle(45, 16.772)
            Debug.WriteLine(MyAngle.ToString("h°m.mm", CultureInfo.CurrentCulture))
            ' Output: 45°16.78
                </code>
            	<code lang="CS">
            Dim MyAngle As New Angle(45, 16.772);
            Debug.WriteLine(MyAngle.ToString("h°m.mm", CultureInfo.CurrentCulture));
            // Output: 45°16.78
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Angle.DecimalDegrees">
            <summary>Returns the value of the angle as decimal degrees.</summary>
            <value>A <strong>Double</strong> value.</value>
            <remarks>This property returns the value of the angle as a single number.</remarks>
            <seealso cref="P:GeoFramework.Angle.Hours">Hours Property</seealso>
            <seealso cref="P:GeoFramework.Angle.Minutes">Minutes Property</seealso>
            <seealso cref="P:GeoFramework.Angle.Seconds">Seconds Property</seealso>
            <example>
                This example demonstrates how the
                <see cref="P:GeoFramework.Angle.DecimalDegrees"><strong>DecimalDegrees</strong></see> property is
                calculated automatically when creating an angle using hours, minutes and seconds. 
                <code lang="VB">
            ' Create an angle of 20°30'
            Dim MyAngle As New Angle(20, 30)
            ' Setting the DecimalMinutes recalculated other properties 
            Debug.WriteLine(MyAngle.DecimalDegrees)
            ' Output: "20.5"  the same as 20°30'
                </code>
            	<code lang="CS">
            // Create an angle of 20°30'
            Angle MyAngle = New Angle(20, 30);
            // Setting the DecimalMinutes recalculated other properties 
            Console.WriteLine(MyAngle.DecimalDegrees)
            // Output: "20.5"  the same as 20°30'
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Angle.DecimalMinutes">
            <summary>Returns the minutes and seconds as a single numeric value.</summary>
            <seealso cref="P:GeoFramework.Angle.Minutes">Minutes Property</seealso>
            <seealso cref="P:GeoFramework.Angle.DecimalDegrees">DecimalDegrees Property</seealso>
            <value>A <strong>Double</strong> value.</value>
            <remarks>
            This property is used when minutes and seconds are represented as a single
            decimal value.
            </remarks>
            <example>
                This example demonstrates how the <strong>DecimalMinutes</strong> property is
                automatically calculated when creating a new angle. 
                <code lang="VB">
            ' Create an angle of 20°10'30"
            Dim MyAngle As New Angle(20, 10, 30)
            ' The DecimalMinutes property is automatically calculated
            Debug.WriteLine(MyAngle.DecimalMinutes)
            ' Output: "10.5"
                </code>
            	<code lang="CS">
            // Create an angle of 20°10'30"
            Angle MyAngle = new Angle(20, 10, 30);
            // The DecimalMinutes property is automatically calculated
            Console.WriteLine(MyAngle.DecimalMinutes)
            // Output: "10.5"
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Angle.Hours">
            <summary>Returns the integer hours (degrees) portion of an angular 
            measurement.</summary>
            <seealso cref="P:GeoFramework.Angle.Minutes">Minutes Property</seealso>
            <seealso cref="P:GeoFramework.Angle.Seconds">Seconds Property</seealso>
            <value>An <strong>Integer</strong> value.</value>
            <remarks>
            This property is used in conjunction with the <see cref="P:GeoFramework.Angle.Minutes">Minutes</see>
            and <see cref="P:GeoFramework.Angle.Seconds">Seconds</see> properties to create a full angular measurement.
            This property is the same as <strong>DecimalDegrees</strong> without any fractional
            value.
            </remarks>
            <example>
                This example creates an angle of 60.5° then outputs the value of the
                <strong>Hours</strong> property, 60. 
                <code lang="VB">
            Dim MyAngle As New Angle(60.5)
            Debug.WriteLine(MyAngle.Hours)
            ' Output: 60
                </code>
            	<code lang="CS">
            Angle MyAngle = new Angle(60.5);
            Console.WriteLine(MyAngle.Hours);
            // Output: 60
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Angle.Minutes">
            <summary>Returns the integer minutes portion of an angular measurement.</summary>
            <seealso cref="P:GeoFramework.Angle.Hours">Hours Property</seealso>
            <seealso cref="P:GeoFramework.Angle.Seconds">Seconds Property</seealso>
            <remarks>
            This property is used in conjunction with the <see cref="P:GeoFramework.Angle.Hours">Hours</see> and
            <see cref="P:GeoFramework.Angle.Seconds">Seconds</see> properties to create a sexagesimal
            measurement.
            </remarks>
            <value>An <strong>Integer</strong>.</value>
            <example>
                This example creates an angle of 45.5° then outputs the value of the
                <strong>Minutes</strong> property, 30. 
                <code lang="VB">
            Dim MyAngle As New Angle(45.5)
            Debug.WriteLine(MyAngle.Minutes)
            ' Output: 30
                </code>
            	<code lang="CS">
            Angle MyAngle = new Angle(45.5);
            Console.WriteLine(MyAngle.Minutes);
            // Output: 30
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Angle.Seconds">
            <summary>Returns the seconds minutes portion of an angular measurement.</summary>
            <remarks>
            This property is used in conjunction with the <see cref="P:GeoFramework.Angle.Hours">Hours</see> and
            <see cref="P:GeoFramework.Angle.Minutes">Minutes</see> properties to create a sexagesimal
            measurement.
            </remarks>
            <seealso cref="P:GeoFramework.Angle.Hours">Hours Property</seealso>
            <seealso cref="P:GeoFramework.Angle.Minutes">Minutes Property</seealso>
            <value>A <strong>Double</strong> value.</value>
            <example>
                This example creates an angle of 45°10.5' then outputs the value of the
                <strong>Seconds</strong> property, 30. 
                <code lang="VB">
            Dim MyAngle As New Angle(45, 10.5)
            Debug.WriteLine(MyAngle.Seconds)
            ' Output: 30
                </code>
            	<code lang="CS">
            Dim MyAngle As New Angle(45, 10.5);
            Console.WriteLine(MyAngle.Seconds);
            // Output: 30
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Angle.IsEmpty">
            <summary>Indicates if the current instance has a non-zero value.</summary>
            <value>
            A <strong>Boolean</strong>, <strong>True</strong> if the
            <strong>DecimalDegrees</strong> property is zero.
            </value>
            <seealso cref="F:GeoFramework.Angle.Empty">Empty Field</seealso>
        </member>
        <member name="P:GeoFramework.Angle.IsInfinity">
            <summary>Indicates if the current instance represents an infinite value.</summary>
        </member>
        <member name="P:GeoFramework.Angle.IsInvalid">
            <summary>Indicates whether the value is invalid or unspecified.</summary>
        </member>
        <member name="P:GeoFramework.Angle.IsNormalized">
            <summary>Indicates whether the value has been normalized and is within the 
            allowed bounds of 0° and 360°.</summary>
        </member>
        <member name="T:GeoFramework.PointF">
            <summary>
            Represents a coordinate with single precision.
            </summary>
        </member>
        <member name="T:GeoFramework.InterpolationMethod">
            <summary>
            Represents a collection of interpolated values using realistic acceleration and deceleration.
            </summary>
            <remarks>This enumeration is used by several GeoFramework controls to smoothly transition from
            one value to another.  For example, the GPS SatelliteViewer uses acceleration to smoothly
            transition from one bearing to another, giving the appearance of a realistic compass.  This
            enumeration, when combined with the <see cref="T:GeoFramework.Interpolator"></see> class lets you add smooth
            transitions to your own controls as well.</remarks>
        </member>
        <member name="F:GeoFramework.InterpolationMethod.Linear">
            <summary>
            The transition occurs at a steady rate.
            </summary>
        </member>
        <member name="F:GeoFramework.InterpolationMethod.Snap">
            <summary>
            The transition is immediate; no interpolation takes place.
            </summary>
        </member>
        <member name="F:GeoFramework.InterpolationMethod.QuadraticEaseIn">
            <summary>
            The transition starts at zero and accelerates to the end using a quadratic formula.
            </summary>
        </member>
        <member name="F:GeoFramework.InterpolationMethod.QuadraticEaseOut">
            <summary>
            The transition starts at high speed and decelerates to zero.
            </summary>
        </member>
        <member name="F:GeoFramework.InterpolationMethod.QuadraticEaseInAndOut">
            <summary>
            The transition accelerates to the halfway point, then decelerates to zero.
            </summary>
        </member>
        <member name="T:GeoFramework.Interpolator">
            <summary>Calculates intermediate values between two bounding values.</summary>
            <remarks>
            This powerful class provides the ability to interpolate values based on varying
            interpolation techniques. This class is used primarily to simulate realistic motion by
            accelerating and decelerating. This class is also used to calculate intermediate values
            for features such as image georeferencing and estimating precision errors.
            </remarks>
        </member>
        <member name="M:GeoFramework.Interpolator.Swap">
            <summary>Reverses the interpolated sequence.</summary>
        </member>
        <member name="P:GeoFramework.Interpolator.Minimum">
            <summary>Controls the smallest number in the sequence.</summary>
        </member>
        <member name="P:GeoFramework.Interpolator.Maximum">
            <summary>Controls the largest number in the sequence.</summary>
        </member>
        <member name="P:GeoFramework.Interpolator.InterpolationMethod">
            <summary>Controls the acceleration and/or deceleration technique used.</summary>
        </member>
        <member name="P:GeoFramework.Interpolator.Count">
            <summary>Controls the number of interpolated values.</summary>
        </member>
        <member name="P:GeoFramework.Interpolator.Item(System.Int32)">
            <summary>Returns a number from the interpolated sequence.</summary>
        </member>
        <member name="T:GeoFramework.Radian">
            <summary>
            Represents a unit of angular measurement used during trigonometric
            equations.
            </summary>
            <remarks>
            	<para>A radian is a unit of measure of an angle formed by an arc whose length is
                the same as the circle's radius, making a shape similar to a slice of pizza.
                Radians are typically used during trigonometric calculations such as calculating
                the distance between two points on Earth's curved surface.</para>
            	<para>Instances of this class are guaranteed to be thread-safe because the class is
                immutable (its properties can only be changed during constructors).</para>
            </remarks>
        </member>
        <member name="F:GeoFramework.Radian.Empty">
            <summary>Represents a radian with a value of zero.</summary>
        </member>
        <member name="M:GeoFramework.Radian.#ctor(System.Double)">
            <summary>Creates a new instance with the specified value.</summary>
            <remarks>
            this constructor is typically used to initialize an instance when the radian
            value is already known.
            </remarks>
            <param name="value">A value to store in the <strong>Value</strong> property.</param>
        </member>
        <member name="M:GeoFramework.Radian.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance by deserializing the specified XML.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:GeoFramework.Radian.Cosine">
            <summary>Returns the cosine of the current instance.</summary>
        </member>
        <member name="M:GeoFramework.Radian.AbsoluteValue">
            <summary>Returns the absolute value of the current instance.</summary>
        </member>
        <member name="M:GeoFramework.Radian.ArcCosine">
            <summary>Returns the arccosine of the current instance.</summary>
        </member>
        <member name="M:GeoFramework.Radian.ArcSine">
            <summary>Returns the arcsine of the current instance.</summary>
        </member>
        <member name="M:GeoFramework.Radian.ArcTangent">
            <summary>Returns the arctangent of the current instance.</summary>
        </member>
        <member name="M:GeoFramework.Radian.ToDegrees">
            <summary>Converts the current instance into an <strong>Angle</strong> object.</summary>
            <returns>An <strong>Angle</strong> object.</returns>
            <remarks>
            This method is typically used to convert a radian measurement back to latitude or
            longitude after a trigonometric formula has completed.
            </remarks>
        </member>
        <member name="M:GeoFramework.Radian.ToAngle">
            <summary>Converts the current instance into an <strong>Angle</strong> object.</summary>
            <returns>An <strong>Angle</strong> object.</returns>
            <remarks>
            This method is typically used to convert a radian measurement back to latitude or
            longitude after a trigonometric formula has completed.
            </remarks>
        </member>
        <member name="M:GeoFramework.Radian.ToLatitude">
            <summary>
            Converts the current instance to a latitude.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Radian.ToLongitude">
            <summary>
            Converts the current instance to a longitude.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Radian.ToString(System.String)">
            <summary>
            Outputs the speed measurement as a formatted string using the specified
            format.
            </summary>
        </member>
        <member name="M:GeoFramework.Radian.GetHashCode">
            <summary>Returns the unique code for this instance used in hash tables.</summary>
        </member>
        <member name="M:GeoFramework.Radian.FromDegrees(System.Double)">
            <summary>
            Converts the specified value in degrees into radians.
            </summary>
            <param name="value">A <strong>Double</strong> containing the value to convert.</param>
        </member>
        <member name="M:GeoFramework.Radian.FromAngle(GeoFramework.Angle)">
            <summary>
            Converts the specified value in degrees into radians.
            </summary>
            <param name="value">An <strong>Angle</strong> containing the value to convert.</param>
        </member>
        <member name="M:GeoFramework.Radian.ToDegrees(System.Double)">
            <summary>Converts the specified value from radians to degrees.</summary>
            <returns>A <strong>Double</strong> measuring degrees.</returns>
            <remarks>
            This method is typically used to convert a radian measurement back to latitude or
            longitude after a trigonometric formula has completed.
            </remarks>
        </member>
        <member name="M:GeoFramework.Radian.ToAngle(GeoFramework.Radian)">
            <summary>
            Converts a Radian object into decimal degrees.
            </summary>
            <param name="value">A <strong>Radian</strong> object to convert to an <strong>Angle</strong>.</param>
            <returns>An <strong>Angle</strong> object containing the converted value.</returns>
            <remarks>This method is typically used for trigonometric functions which work with values expressed as radians.  Then the formula has completed, results are converted from radians to decimal degrees to make them easier to use.</remarks>
        </member>
        <member name="M:GeoFramework.Radian.Add(GeoFramework.Radian)">
            <summary>Adds the current instance to the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Radian.Divide(GeoFramework.Radian)">
            <summary>Returns the current value divided by the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Radian.Decrement">
            <summary>Returns the current value decreased by one.</summary>
        </member>
        <member name="M:GeoFramework.Radian.CompareTo(GeoFramework.Radian)">
            <summary>Compares the current instance with the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Radian.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the speed measurement as a formatted string using the specified format
            and culture information.
            </summary>
        </member>
        <member name="P:GeoFramework.Radian.Value">
            <summary>Represents the numeric portion of a radian measurement.</summary>
            <value>
            A <strong>Double</strong> value indicating an angular measurement expressed in
            radians.
            </value>
            <remarks>
            This property stores the numeric radian measurement. A radian can be converted into a degree
            measurements via the <see cref="M:GeoFramework.Radian.ToAngle(GeoFramework.Radian)">ToAngle</see> method.
            </remarks>
        </member>
        <member name="T:GeoFramework.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Angle_ExtraCharactersWereEncountered">
            <summary>
              Looks up a localized string similar to Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Angle_InvalidFormat">
            <summary>
              Looks up a localized string similar to The specified format could not be fully recognized as an angular measurement..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Angle_InvalidInterval">
            <summary>
              Looks up a localized string similar to The interval must be a value greater than zero, between 0 and 60..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Angle_InvalidToStringFormat">
            <summary>
              Looks up a localized string similar to Invalid format for Angle.ToString() method..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Angle_OnlyRightmostIsDecimal">
            <summary>
              Looks up a localized string similar to Only the right-most number of a sexagesimal measurement can be a fractional value..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Angle_TypeMismatch">
            <summary>
              Looks up a localized string similar to An Angle can only be compared with Angle, Double, or String values..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Area_InvalidFormat">
            <summary>
              Looks up a localized string similar to The specified format could not be fully recognized as an area measurement..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Area_InvalidNumericPortion">
            <summary>
              Looks up a localized string similar to The numeric portion of the area measurement could not be recognized..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Area_InvalidUnitPortion">
            <summary>
              Looks up a localized string similar to The unit portion of the area measurement could not be recognized..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Azimuth_ConversionNotImplemented">
            <summary>
              Looks up a localized string similar to The azimuth cannot be converted to a because no conversion has been implemented internally.  Please contact info@geoframework.com with the source and destination unit types..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Azimuth_InvalidComparisonType">
            <summary>
              Looks up a localized string similar to An Azimuth can only be compared with another Azimuth, or a Double..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Common_Empty">
            <summary>
              Looks up a localized string similar to Empty.
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Common_Infinity">
            <summary>
              Looks up a localized string similar to Infinity.
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Distance_ConversionNotImplemented">
            <summary>
              Looks up a localized string similar to The distance cannot be converted because no conversion has been implemented internally.  Please contact info@geoframeworks.com with the source and destination unit types..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Distance_InvalidComparisonType">
            <summary>
              Looks up a localized string similar to Distance objects can only be compared with other Distance objects..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Distance_InvalidFormat">
            <summary>
              Looks up a localized string similar to The specified format could not be fully recognized as a distance measurement..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Distance_InvalidNumericPortion">
            <summary>
              Looks up a localized string similar to The numeric portion of the distance measurement could not be recognized..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Distance_InvalidUnitPortion">
            <summary>
              Looks up a localized string similar to The unit portion of the distance measurement could not be recognized..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.GeoFrameworksLicense_InvalidLicenseKey">
            <summary>
              Looks up a localized string similar to The specified license key is invalid.  Please contact GeoFrameworks to look up license keys you have purchased: http://www.geoframeworks.com/Secured/LicenseKeys.aspx..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.GeoFrameworksLicenseProvider_AskToGoOnline">
            <summary>
              Looks up a localized string similar to Would you like to go online now to activate your trial?  An email address will not be required unless you&apos;re behind a proxy server..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.GeoFrameworksLicenseProvider_ExecutionStoppedDialogTitle">
            <summary>
              Looks up a localized string similar to {0} Stopped Execution.
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.GeoFrameworksLicenseProvider_ExecutionStoppedNeedKeys">
            <summary>
              Looks up a localized string similar to Execution of the current application has been stopped by an exception, but this message will go away once trial license keys have been provided, or the reference the assembly has been removed..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.GeoFrameworksLicenseProvider_ExecutionStoppedVisitWebSite">
            <summary>
              Looks up a localized string similar to Execution of the current application has been stopped by an exception, but this message will go away once trial license keys have been provided.  Please visit http://www.geoframeworks.com/FreeTrialLicenseKeys.aspx to obtain free license keys for any of our products..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.GeoFrameworksLicenseProvider_GoOnlineForTrialKeys">
            <summary>
              Looks up a localized string similar to Do you want to go online to activate free trial license keys?.
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.GeoFrameworksLicenseProvider_InvalidLicenseKey">
            <summary>
              Looks up a localized string similar to An invalid license key was encountered while attempting to grant a license to a GeoFrameworks object.  The invalid key is &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.GeoFrameworksLicenseProvider_InvalidMajorVersion">
            <summary>
              Looks up a localized string similar to The license key for {0} is valid for a different major version of the software.  Please visit http://www.geoframeworks.com/Shop for pricing on products for this version.  Updates to GeoFrameworks software are always free for each minor version change (e.g. versions 2.0 through 2.999).
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.GeoFrameworksLicenseProvider_InvalidPlatform">
            <summary>
              Looks up a localized string similar to The license key for {0} is not valid for the current .NET platform.  Please contact support@geoframeworks.com for assistance or visit http://www.geoframeworks.com/Shop for pricing on products for this platform..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.GeoFrameworksLicenseProvider_LicenseKeyDialogTitle">
            <summary>
              Looks up a localized string similar to A GeoFrameworks License Key Is Required.
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.GeoFrameworksLicenseProvider_LicenseKeyIsRequired">
            <summary>
              Looks up a localized string similar to A license key is required for this GeoFrameworks assembly to function.  You can activate a free thirty-day trial online at http://www.geoframeworks.com..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.GeoFrameworksLicenseProvider_ValidOwnerLicense">
            <summary>
              Looks up a localized string similar to A valid owner license has been granted for {0}.
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.GeoFrameworksLicenseProvider_ValidTrialLicense">
            <summary>
              Looks up a localized string similar to A trial license has been granted for {0} until {1}.
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.GeographicSize_InvalidFormat">
            <summary>
              Looks up a localized string similar to The specified value could not be parsed into a GeographicSize object because two delimited values are required (Width, Height)..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Latitude_DecimalOrSexagesimalRequired">
            <summary>
              Looks up a localized string similar to The Parse method requires a decimal or sexagesimal measurement..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Latitude_InvalidComparisonType">
            <summary>
              Looks up a localized string similar to A Latitude can only be compared with another Latitude, Double or String..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Latitude_InvalidFormat">
            <summary>
              Looks up a localized string similar to The specified format could not be fully recognized as a latitude..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Latitude_InvalidHemisphere">
            <summary>
              Looks up a localized string similar to The hemisphere specified for the ToHemisphere method cannot be &apos;None&apos;.  A value of &apos;North&apos; or &apos;South&apos; is required..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Latitude_LatitudeHemisphereExpected">
            <summary>
              Looks up a localized string similar to The hemisphere specified indicates a longitude but a latitude is expected..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Latitude_OnlyRightmostIsDecimal">
            <summary>
              Looks up a localized string similar to Only the right-most number can be a floating-point value..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Longitude_DecimalOrSexagesimalRequired">
            <summary>
              Looks up a localized string similar to The Parse method requires a decimal or sexagesimal measurement..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Longitude_InvalidComparisonType">
            <summary>
              Looks up a localized string similar to A Longitude can only be compared with another Longitude, Double or String..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Longitude_InvalidFormat">
            <summary>
              Looks up a localized string similar to The specified format could not be fully recognized as a longitude..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Longitude_InvalidHemisphere">
            <summary>
              Looks up a localized string similar to The hemisphere specified for the ToHemisphere method cannot be &apos;None&apos;.  A value of &apos;East&apos; or &apos;West&apos; is required..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Longitude_LongitudeHemisphereExpected">
            <summary>
              Looks up a localized string similar to The hemisphere specified indicates a latitude but a longitude is expected..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Longitude_OnlyRightmostIsDecimal">
            <summary>
              Looks up a localized string similar to Only the right-most number can be a floating-point value..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Position_DuplicateZoneInformation">
            <summary>
              Looks up a localized string similar to Duplicate UTM zone information was found when trying to parse a UTM coordinate..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Position_InvalidFormat">
            <summary>
              Looks up a localized string similar to The specified format could not be fully recognized as a spherical or UTM coordinate..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Position_InvalidUTMCoordinate">
            <summary>
              Looks up a localized string similar to The specified string could not be recognized as a valid UTM coordinate..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Position_InvalidZoneLetter">
            <summary>
              Looks up a localized string similar to A UTM zone letter can only be one character long.  Multiple characters were encountered..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Position_InvalidZoneNumber">
            <summary>
              Looks up a localized string similar to A UTM zone number can only be one or two characters long.  Multiple characters were encountered..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Position_NoUTMZoneLetter">
            <summary>
              Looks up a localized string similar to No UTM zone letter could be located within the specified string..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Position_NoUTMZoneNumber">
            <summary>
              Looks up a localized string similar to No UTM zone number could be located within the specified string..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.PositionCollection_AreaError">
            <summary>
              Looks up a localized string similar to The total area could not be calculated..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.PositionCollection_DistanceError">
            <summary>
              Looks up a localized string similar to The total distance could not be calculated..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.PositionCollection_RangeMustBeAboveZero">
            <summary>
              Looks up a localized string similar to The range must be a distance greater than or equal to zero..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.RectangleD_HeightMustBeAboveZero">
            <summary>
              Looks up a localized string similar to Height must be a number greater than zero..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.RectangleD_InvalidFormat">
            <summary>
              Looks up a localized string similar to The specified value could not be parsed into a RectangleD object because four delimited values are required (Top, Left, Bottom, Right)..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.RectangleD_WidthMustBeAboveZero">
            <summary>
              Looks up a localized string similar to Width must be a number greater than zero..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.SizeD_InvalidFormat">
            <summary>
              Looks up a localized string similar to Two values must be supplied to create a SizeD object from a string.  Verify that the CultureInfo passed matches the delimiter used to separate the values..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Speed_InvalidFormat">
            <summary>
              Looks up a localized string similar to The specified format could not be fully recognized as a speed measurement..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Speed_InvalidNumericPortion">
            <summary>
              Looks up a localized string similar to The numeric portion of the speed measurement could not be recognized..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.Speed_InvalidUnitPortion">
            <summary>
              Looks up a localized string similar to The unit portion of the speed measurement could not be recognized..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.TrialLicense_ExpirationDate">
            <summary>
              Looks up a localized string similar to Trial License Expires {0} ({1} days remaining).
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.TrialLicense_ExtendTrial">
            <summary>
              Looks up a localized string similar to Would you like to go online to try and extend your free trial now?.
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.TrialLicense_InvalidLicenseKey">
            <summary>
              Looks up a localized string similar to Purchased license keys cannot be used as trial license keys.  Please use another key or contact GeoFrameworks for further assistance..
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.TrialLicense_LicenseExpired">
            <summary>
              Looks up a localized string similar to Sorry, the trial key for the following GeoFrameworks assembly expired on {0}.  You can go online to try and extend your trial another month, or you can purchase a license key online.\r\n\r\n{1}.
            </summary>
        </member>
        <member name="P:GeoFramework.Properties.Resources.TrialLicense_LicenseExpiredDialogTitle">
            <summary>
              Looks up a localized string similar to GeoFrameworks Trial Has Expired.
            </summary>
        </member>
        <member name="T:GeoFramework.Azimuth">
            <summary>Represents an angular measurement around the horizon between 0° and 
            360°.</summary>
            <remarks>
            	<para>This class is used to indicate a horizontal direction of travel, such as the
                bearing from one point on Earth to another. This class can also be combined with an
                Elevation object to form a three-dimensional direction towards an object in space,
                such as a GPS satellite.</para>
            </remarks>
            <example>
                These examples create new instances of an Azimuth object using different
                techniques.
                <code lang="VB" description="Create a new instance of 45° (northeast).">
            Dim MyAzimuth As New Azimuth(45)
                </code>
            	<code lang="CS" description="Create a new instance of 45° (northeast).">
            Azimuth MyAzimuth = new Azimuth(45);
                </code>
            	<code lang="VB" description="Create a new instance of 45°30'15.">
            Dim MyAzimuth As New Azimuth(45, 30, 15)
                </code>
            	<code lang="CS" description="Create a new instance of 45°30'15.">
            Azimuth MyAzimuth = new Azimuth(45, 30, 15);
                </code>
            	<code lang="VB" description="Create a new instance equal to a known compass direction.">
            Dim MyAzimuth As Azimuth = Azimuth.NorthNorthwest
                </code>
            	<code lang="CS" description="Create a new instance equal to a known compass direction.">
            Azimuth MyAzimuth = Azimuth.NorthNorthwest;
                </code>
            </example>
            <remarks>
            This class is used to indicate a horizontal direction of travel. In most
            situations, instances of this object identify one object's position relative to
            another, though an <strong>Azimuth</strong> can also be combined with an
            <strong>Elevation</strong> object (which measures a vertical direction), to create a
            three-dimensional direction towards an object in space, such as a GPS satellite.
            </remarks>
        </member>
        <member name="F:GeoFramework.Azimuth.MaximumPrecisionDigits">
            <summary>
            Controls the number of digits of precision supported by the class.
            </summary>
            <remarks>
            The underlying type for this class is Double, meaning that a maximum of 15 digits are
            supported for any value.  Since up to three of these digits will be occupied by a value
            between -360 and +360, that leaves 12 digits left over for floating point values.  A
            value greater than 12 will lead to mathematical errors, so the value should be 12 or less.
            </remarks>
        </member>
        <member name="M:GeoFramework.Azimuth.#ctor(System.Double)">
            <summary>Creates a new instance with the specified decimal degrees.</summary>
            <example>
                This example demonstrates how to create an angle with a measurement of 90°. 
                <code lang="VB">
            Dim MyAzimuth As New Azimuth(90)
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = new Azimuth(90);
                </code>
            </example>
            <returns>An <strong>Azimuth</strong> containing the specified value.</returns>
        </member>
        <member name="M:GeoFramework.Azimuth.#ctor(System.Int32)">
            <summary>Creates a new instance with the specified degrees.</summary>
            <returns>An <strong>Azimuth</strong> containing the specified value.</returns>
            <param name="hours">
            An <strong>Integer</strong> indicating the amount of degrees, typically between 0
            and 360.
            </param>
        </member>
        <member name="M:GeoFramework.Azimuth.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>Creates a new instance with the specified hours, minutes and 
            seconds.</summary>
            <example>
                This example demonstrates how to create an angular measurement of 34°12'29.2 in
                hours, minutes and seconds. 
                <code lang="VB">
            Dim MyAzimuth As New Azimuth(34, 12, 29.2)
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = new Azimuth(34, 12, 29.2);
                </code>
            </example>
            <returns>An <strong>Azimuth</strong> containing the specified value.</returns>
        </member>
        <member name="M:GeoFramework.Azimuth.#ctor(System.Int32,System.Double)">
            <summary>Creates a new instance with the specified hours and decimal minutes.</summary>
            <example>
                This example demonstrates how an angle can be created when only the hours and
                minutes (in decimal form) are known. This creates a value of 12°42.345'. 
                <code lang="VB">
            Dim MyAzimuth As New Azimuth(12, 42.345)
                </code>
            	<code lang="VB">
            Azimuth MyAzimuth = new Azimuth(12, 42.345);
                </code>
            </example>
            <remarks>An <strong>Azimuth</strong> containing the specified value.</remarks>
        </member>
        <member name="M:GeoFramework.Azimuth.#ctor(System.String)">
            <summary>Creates a new instance by converting the specified string.</summary>
            <remarks>
            This constructor parses the specified string into an <strong>Azimuth</strong>
            object using the current culture. This constructor can parse any strings created via
            the <strong>ToString</strong> method.
            </remarks>
            <seealso cref="M:GeoFramework.Azimuth.Parse(System.String)">Parse Method</seealso>
            <example>
                This example creates a new instance by parsing a string. (NOTE: The double-quote is
                doubled up to represent a single double-quote in the string.) 
                <code lang="VB">
            Dim MyAzimuth As New Azimuth("123°45'67.8""")
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = new Azimuth("123°45'67.8\"");
                </code>
            </example>
            <example>
                This example creates a new <strong>Azimuth</strong> object by converting the string
                "NW," short for Northwest. or 315°.
                <code lang="VB" title="[New Example]">
            Dim NewAzimuth As New Azimuth("NW")
                </code>
            	<code lang="CS" title="[New Example]">
            Azimuth NewAzimuth = new Azimuth("NW");
                </code>
            </example>
            <returns>An <strong>Azimuth</strong> containing the specified value.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
        </member>
        <member name="M:GeoFramework.Azimuth.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance by converting the specified string using the specified
            culture.
            </summary>
            <remarks>
            This constructor parses the specified string into an <strong>Azimuth</strong>
            object using the specified culture. This constructor can parse any strings created via
            the <strong>ToString</strong> method.
            </remarks>
            <example>
                This example creates a new <strong>Azimuth</strong> object by converting the string
                "NW," short for Northwest. or 315°.
                <code lang="VB" title="[New Example]">
            Dim NewAzimuth As New Azimuth("NW", CultureInfo.CurrentCulture)
                </code>
            	<code lang="CS" title="[New Example]">
            Azimuth NewAzimuth = new Azimuth("NW", CultureInfo.CurrentCulture);
                </code>
            </example>
            <param name="value">
            A <strong>String</strong> describing an angle in the form of decimal degrees or a
            sexagesimal.
            </param>
            <param name="culture">
            A <strong>CultureInfo</strong> object describing the numeric format to use during
            conversion.
            </param>
        </member>
        <member name="M:GeoFramework.Azimuth.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance by deserializing the specified XML.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="F:GeoFramework.Azimuth.Minimum">
            <summary>Represents the minimum value of an angle in one turn of a circle.</summary>
            <remarks>
            This member is typically used for looping through the entire range of possible
            angles. It is possible to create angular values below this value, such as -720°.
            </remarks>
            <example>
                This example creates an angle representing the minimum allowed value. 
                <code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.Minimum
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.Minimum;
                </code>
            	<code lang="C++">
            Azimuth MyAzimuth = Azimuth.Minimum;
                </code>
            </example>
            <value>An Azimuth with a value of -359.999999°.</value>
        </member>
        <member name="F:GeoFramework.Azimuth.Empty">
            <summary>Represents an angle with no value.</summary>
            <remarks>
            This member is typically used to initialize an angle variable to zero. When an
            angle has a value of zero, its <see cref="P:GeoFramework.Azimuth.IsEmpty">IsEmpty</see> property returns
            <strong>True</strong>.
            </remarks>
            <value>An Azimuth containing a value of zero (0°).</value>
            <seealso cref="P:GeoFramework.Azimuth.IsEmpty">IsEmpty Property</seealso>
        </member>
        <member name="F:GeoFramework.Azimuth.Infinity">
            <summary>
            Represents an angle with infinite value.
            </summary>
            <remarks>
            In some cases, the result of an angular calculation may be infinity. This member
            is used in such cases. The <see cref="P:GeoFramework.Azimuth.DecimalDegrees">DecimalDegrees</see> property is
            set to Double.PositiveInfinity.
            </remarks>
        </member>
        <member name="F:GeoFramework.Azimuth.Maximum">
            <summary>Represents the maximum value of an angle in one turn of a circle.</summary>
            <remarks>
            This member is typically used for looping through the entire range of possible
            angles, or to test the range of a value. It is possible to create angular values below
            this value, such as 720°.
            </remarks>
            <example>
                This example creates an angle representing the maximum allowed value of 359.9999°. 
                <code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.Maximum
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.Maximum;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.North">
            <summary>Represents a direction of travel of 0°.</summary>
            <example>
                This example creates an Azimuth representing North. 
                <code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.North
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.North;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.NorthNortheast">
            <summary>Represents a direction of travel of 22.5°, between north and northeast.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.NorthNortheast
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.NorthNortheast;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.Northeast">
            <summary>Represents a direction of travel of 45°.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.Northeast
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.Northeast;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.EastNortheast">
            <summary>Represents a direction of travel of 67.5°.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.EastNortheast
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.EastNortheast;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.East">
            <summary>Represents a direction of travel of 90°.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.East
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.East;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.EastSoutheast">
            <summary>Represents a direction of travel of 112.5°, between east and southeast.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.EastSoutheast
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.EastSoutheast;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.Southeast">
            <summary>Represents a direction of travel of 135°.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.Southeast
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.Southeast;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.SouthSoutheast">
            <summary>Represents a direction of travel of 157.5°, between south and southeast.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.SouthSoutheast
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.SouthSoutheast;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.South">
            <summary>Represents a direction of travel of 180°.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.South
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.South;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.SouthSouthwest">
            <summary>Represents a direction of travel of 202.5°, between south and southwest.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.SouthSouthwest
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.SouthSouthwest;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.Southwest">
            <summary>Represents a direction of travel of 225°.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.Southwest
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.Southwest;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.WestSouthwest">
            <summary>Represents a direction of travel of 247.5°, between west and southwest.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.WestSouthwest
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.WestSouthwest;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.West">
            <summary>Represents a direction of travel of 270°.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.West
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.West;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.WestNorthwest">
            <summary>Represents a direction of travel of 292.5°, between west and northwest.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.WestNorthwest
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.WestNorthwest;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.Northwest">
            <summary>Represents a direction of travel of 315°.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.Northwest
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.Northwest;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.NorthNorthwest">
            <summary>Represents a direction of travel of 337.5°, between north and northwest.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.NorthNorthwest
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.NorthNorthwest;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.Invalid">
            <summary>
            Represents an invalid or unspecified value.
            </summary>
        </member>
        <member name="M:GeoFramework.Azimuth.Normalize">
            <summary>Modifies a value to its equivalent between 0° and 360°.</summary>
            <returns>An <strong>Azimuth</strong> representing the normalized angle.</returns>
            <remarks>
            	<para>This function is used to ensure that an angular measurement is within the
                allowed bounds of 0° and 360°. If a value of 360° or 720° is passed, a value of 0°
                is returned since 360° and 720° represent the same point on a circle. For the Azimuth
                class, this function is the same as "value Mod 360".</para>
            </remarks>
            <seealso cref="M:GeoFramework.Azimuth.Normalize">Normalize(Azimuth) Method</seealso>
            <example>
                This example demonstrates how normalization is used. The Stop statement is hit.
                This example demonstrates how the Normalize method can ensure that an angle fits
                between 0° and 359.9999°. This example normalizes 725° into 5°. 
                <code lang="VB">
            Dim MyAzimuth As New Azimuth(720)
            MyAzimuth = MyAzimuth.Normalize()
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = new Azimuth(720);
            MyAzimuth = MyAzimuth.Normalize();
                </code>
            	<code lang="VB">
            Dim MyValue As New Azimuth(725)
            MyValue = MyValue.Normalize()
                </code>
            	<code lang="CS">
            Azimuth MyValue = new Azimuth(725);
            MyValue = MyValue.Normalize();
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Azimuth.IsBetween(GeoFramework.Azimuth,GeoFramework.Azimuth)">
            <summary>
            Returns whether the current value is between the specified values.
            </summary>
            <param name="start">An <strong>Azimuth</strong> marking the start of a range.</param>
            <param name="end">An <strong>Azimuth</strong> marking the end of a range.</param>
            <returns>A <strong>Boolean</strong> value.</returns>
            <remarks>This property is used to determine whether a value is within a specified range.  If the
            starting value is less than the end value, a basic greater-than or less-than comparison is performed.  
            If, however, the end value is greater than the start, it is assumed that the range crosses the 0/360
            boundary.  For example, if the start is 270 and the end is 90, a value of <strong>True</strong> is 
            returned if the current value is between 270 and 360, or 0 and 90.</remarks>
        </member>
        <member name="M:GeoFramework.Azimuth.Ceiling">
            <summary>Returns the smallest integer greater than the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Azimuth.Floor">
            <summary>Returns the largest integer which is smaller than the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Azimuth.Round(System.Int32)">
            <summary>
            Returns a new instance whose value is rounded the specified number of decimals.
            </summary>
            <param name="decimals">An <strong>Integer</strong> specifying the number of decimals to round off to.</param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Azimuth.RoundSeconds">
            <summary>Returns a new instance whose Seconds property is evenly divisible by 15.</summary>
            <returns>An <strong>Azimuth</strong> containing the rounded value.</returns>
            <remarks>
            This method is used to align or "snap" an angle to a regular interval. For
            example, a grid might be easier to read if it were drawn at 30-second intervals instead
            of 24.198-second intervals.
            </remarks>
        </member>
        <member name="M:GeoFramework.Azimuth.RoundSeconds(System.Double)">
            <summary>
            Returns a new angle whose Seconds property is evenly divisible by the specified amount.
            </summary>
            <returns>An <strong>Azimuth</strong> containing the rounded value.</returns>
            <remarks>
            This method is used to align or "snap" an angle to a regular interval. For
            example, a grid might be easier to read if it were drawn at 30-second intervals instead
            of 24.198-second intervals.
            </remarks>
            <param name="interval">
            A <strong>Double</strong> between 0 and 60 indicating the interval to round
            to.
            </param>
        </member>
        <member name="M:GeoFramework.Azimuth.ToString(System.String)">
            <summary>Outputs the azimuth as a string using the specified format.</summary>
            <returns>A <strong>String</strong> in the specified format.</returns>
            <remarks>
            	<para>This method returns the current instance output in a specific format. If no
                value for the format is specified, a default format of "cc" is used. Any string
                output by this method can be converted back into an Azimuth object using the
                <strong>Parse</strong> method or <strong>Azimuth(string)</strong>
                constructor.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Azimuth.ToString(System.String)">ToString Method</seealso>
            <seealso cref="M:GeoFramework.Azimuth.Parse(System.String)">Parse Method</seealso>
            <example>
                This example uses the <strong>ToString</strong> method to output an azimuth in a
                custom format. The " <strong>d.dd</strong> " code represents decimal degrees
                rounded to two digits, and " <strong>cc</strong> " represents the direction in
                verbose form. 
                <code lang="VB">
            Dim MyAzimuth As New Azimuth(90.946)
            Debug.WriteLine(MyAzimuth.ToString("d.dd (cc)"))
            ' Output: 90.95 (East)
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = new Azimuth(90.946);
            Console.WriteLine(MyAzimuth.ToString("d.dd (cc)"));
            // Output: 90.95 (East)
                </code>
            </example>
            <param name="format">
            	<para>A <strong>String</strong> consisting of any number of the following
                codes:</para>
            	<para>
            		<list type="table">
            			<item>
            				<term><strong>c</strong></term>
            				<description>The object is output as an abbreviated direction.
                            <strong>N</strong>, <strong>NE</strong>,
                            <strong>NNW</strong></description>
            			</item>
            			<item>
            				<term><strong>cc</strong></term>
            				<description>The object is output as a full direction.
                            <strong>North</strong>, <strong>Northeast</strong>,
                            <strong>North-Northwest</strong></description>
            			</item>
            			<item>
            				<term><strong>d</strong></term>
            				<description>Represents one digit from the
                            <strong>DecimalDegrees</strong> property.</description>
            			</item>
            			<item>
            				<term><strong>h</strong></term>
            				<description>Represents one digit from the
                            <strong>Hours</strong> property.</description>
            			</item>
            			<item>
            				<term><strong>m</strong></term>
            				<description>Represents one digit from the <strong>Minutes</strong>
                            property.</description>
            			</item>
            			<item>
            				<term><strong>s</strong></term>
            				<description>Represents one digit from the <strong>Seconds</strong>
                            property.</description>
            			</item>
            		</list>
            	</para>
            </param>
        </member>
        <member name="M:GeoFramework.Azimuth.LesserOf(GeoFramework.Azimuth)">
            <summary>Returns the object with the smallest value.</summary>
            <returns>The <strong>Azimuth</strong> containing the smallest value.</returns>
            <param name="value">An <strong>Azimuth</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.GreaterOf(GeoFramework.Azimuth)">
            <returns>An <strong>Azimuth</strong> containing the largest value.</returns>
            <summary>Returns the object with the largest value.</summary>
            <param name="value">An <strong>Azimuth</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.Mirror">
            <summary>Returns an angle opposite of the current instance.</summary>
            <returns>An <strong>Azimuth</strong> representing the mirrored value.</returns>
            <remarks>
            This method returns the "opposite" of the current instance. The opposite is
            defined as the point on the other side of an imaginary circle. For example, if an angle
            is 0°, at the top of a circle, this method returns 180°, at the bottom of the
            circle.
            </remarks>
            <example>
                This example creates a new <strong>Azimuth</strong> of 45° then calculates its mirror
                of 225°. (45 + 180) 
                <code lang="VB" title="[New Example]">
            Dim Azimuth1 As New Azimuth(45)
            Dim Azimuth2 As Azimuth = Azimuth1.Mirror()
            Debug.WriteLine(Azimuth2.ToString())
            ' Output: 225
                </code>
            	<code lang="CS" title="[New Example]">
            Azimuth Azimuth1 = new Azimuth(45);
            Azimuth Azimuth2 = Azimuth1.Mirror();
            Console.WriteLine(Azimuth2.ToString());
            // Output: 225
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Azimuth.ToRadians">
            <summary>Converts the current instance into radians.</summary>
            <returns>A <see cref="T:GeoFramework.Radian">Radian</see> object.</returns>
            <remarks>
            	<para>This function is typically used to convert an angular measurement into
             radians before performing a trigonometric function.
            		</para>
            </remarks>
            <seealso cref="T:GeoFramework.Radian">Radian Class</seealso>
            <overloads>Converts an angular measurement into radians before further processing.</overloads>
            <example>
                This example converts a measurement of 90° into radians. 
                <code lang="VB">
            Dim MyAzimuth As New Azimuth(90)
            Dim MyRadians As Radian = MyAzimuth.ToRadians()
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = new Azimuth(90);
            Radian MyRadians = MyAzimuth.ToRadians();
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Azimuth.Equals(System.Object)">
            <summary>Compares the current value to another Azimuth object's value.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the object's DecimalDegrees
            properties match.
            </returns>
            <remarks>This </remarks>
            <param name="obj">
            An <strong>Azimuth</strong>, <strong>Double</strong>, or <strong>Integer</strong>
            to compare with.
            </param>
        </member>
        <member name="M:GeoFramework.Azimuth.GetHashCode">
            <summary>Returns a unique code for this instance.</summary>
            <remarks>
            Since the <strong>Azimuth</strong> class is immutable, this property may be used
            safely with hash tables.
            </remarks>
            <returns>
            An <strong>Integer</strong> representing a unique code for the current
            instance.
            </returns>
        </member>
        <member name="M:GeoFramework.Azimuth.ToString">
            <summary>Outputs the current instance as a string using the default format.</summary>
            <returns><para>A <strong>String</strong> representing the current instance.</para></returns>
            <remarks>
            This method formats the current instance using the default format of "cc." Any
            string output by this method can be converted back into an Azimuth object using the
            <strong>Parse</strong> method or <strong>Azimuth(string)</strong> constructor.
            </remarks>
            <seealso cref="M:GeoFramework.Azimuth.Parse(System.String)">Parse Method</seealso>
            <example>
                This example outputs a value of 90 degrees in the default format of ###.#°. 
                <code lang="VB">
            Dim MyAzimuth As New Azimuth(90)
            Debug.WriteLine(MyAzimuth.ToString)
            ' Output: "90°"
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = new Azimuth(90);
            Debug.WriteLine(MyAzimuth.ToString());
            // Output: "90°"
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Azimuth.Normalize(System.Double)">
            <summary>Converts the specified value to its equivalent between 0° and 360°.</summary>
            <returns>
            An Azimuth containing a value equivalent to the value specified, but between 0° and
            360°.
            </returns>
            <param name="decimalDegrees">A <strong>Double</strong> value to be normalized.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.FromDirection(GeoFramework.Direction)">
            <summary>
            Converts a <strong>Direction</strong> value into an <strong>Azimuth</strong>
            object.
            </summary>
            <returns>An <strong>Azimuth</strong> equivalent to the specified direction.</returns>
            <param name="direction">A value from the <strong>Direction</strong> enumeration to convert.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.Random">
            <summary>Returns a random angle between 0° and 360°.</summary>
            <returns>An <strong>Azimuth</strong> containing a random value.</returns>
        </member>
        <member name="M:GeoFramework.Azimuth.Random(System.Random)">
            <summary>
            Returns a random Azimuth between 0° and 360° using the specified random number
            seed.
            </summary>
            <returns>An <strong>Azimuth</strong> containing a random value.</returns>
            <param name="seed">
            An <strong>Integer</strong> passed to the <strong>Random</strong> class as a
            random number seed.
            </param>
        </member>
        <member name="M:GeoFramework.Azimuth.ToDecimalDegrees(System.Int32,System.Int32,System.Double)">
            <summary>Converts arbitrary hour, minute and seconds into decimal degrees.</summary>
            <returns>
            A <strong>Double</strong> containing the decimal degree version of the specified
            values.
            </returns>
            <remarks>
            This function is used to convert three-part measurements into a single value. The
            result of this method is typically assigned to the
            <see cref="P:GeoFramework.Latitude.DecimalDegrees">
            DecimalDegrees</see> property. Values are rounded to thirteen decimal 
            places, the maximum precision allowed by this type.
            </remarks>
            <seealso cref="P:GeoFramework.Latitude.DecimalDegrees">DecimalDegrees Property</seealso>
            <seealso cref="M:GeoFramework.Latitude.Normalize">Normalize Method</seealso>
            <example>
                This example converts a value of 10°30'0" into decimal degrees (10.5). 
                <code lang="VB" title="ToDecimalDegrees Example (VB)">
            Dim MyValue As Double = Latitude.ToDecimalDegrees(10, 30, 0)
                </code>
            	<code lang="CS" title="ToDecimalDegrees Example (C#)">
            double MyValue = Latitude.ToDecimalDegrees(10, 30, 0);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Azimuth.ToDecimalDegrees(System.Int32,System.Double)">
            <summary>Converts arbitrary hour and decimal minutes into decimal degrees.</summary>
            <returns>
            A <strong>Double</strong> containing the decimal degree version of the specified
            values.
            </returns>
            <remarks>
            This function is used to convert three-part measurements into a single value. The
            result of this method is typically assigned to the
            <see cref="P:GeoFramework.Latitude.DecimalDegrees">
            DecimalDegrees</see> property. Values are rounded to thirteen decimal 
            places, the maximum precision allowed by this type.
            </remarks>
        </member>
        <member name="M:GeoFramework.Azimuth.ToDecimalDegrees(System.Int32)">
            <summary>Converts an hour value into decimal degrees.</summary>
            <returns>
            A <strong>Double</strong> containing the decimal degree version of the specified
            values.
            </returns>
            <remarks>
            The specified value will be converted to a double value.
            </remarks>
        </member>
        <member name="M:GeoFramework.Azimuth.LesserOf(GeoFramework.Azimuth,GeoFramework.Azimuth)">
            <returns>The <strong>Azimuth</strong> containing the smallest value.</returns>
            <summary>Returns the object with the smallest value.</summary>
            <param name="value">A <strong>Azimuth</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.GreaterOf(GeoFramework.Azimuth,GeoFramework.Azimuth)">
            <summary>Returns the object with the largest value.</summary>
            <returns>A <strong>Azimuth</strong> containing the largest value.</returns>
            <param name="value">A <strong>Azimuth</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.Parse(System.String)">
            <summary>Converts the specified string into an Azimuth object.</summary>
            <returns>
            	A new <strong>Azimuth</strong> object populated with the specified 
            	values.
            </returns>
            <remarks>
            	<para>This method parses the specified string into an <strong>Azimuth</strong> object
                using the current culture. This constructor can parse any strings created via the
                <strong>ToString</strong> method.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Azimuth.ToString(System.String)">ToString Method</seealso>
            <example>
                This example creates a new angular measurement using the <strong>Parse</strong>
                method. 
                <code lang="VB">
            Dim NewAzimuth As Azimuth = Azimuth.Parse("123.45°")
                </code>
            	<code lang="CS">
            Azimuth NewAzimuth = Azimuth.Parse("123.45°");
                </code>
            </example>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
        </member>
        <member name="M:GeoFramework.Azimuth.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified string into an <strong>Azimuth</strong> object using the
            specified culture.
            </summary>
            <returns>A new <strong>Azimuth</strong> object equivalent to the specified string.</returns>
            <remarks>
            	<para>This method parses the specified string into an <strong>Azimuth</strong>
                object using the specified culture. This method can parse any string created via
                the <strong>ToString</strong> method.</para>
            </remarks>
            <example>
                This example creates a new <strong>Azimuth</strong> object by converting the string
                "NW," short for Northwest. or 315°.
                <code lang="VB" title="[New Example]">
            Dim NewAzimuth As Azimuth = Azimuth.Parse("NW", CultureInfo.CurrentCulture)
                </code>
            	<code lang="CS" title="[New Example]">
            Azimuth NewAzimuth = Azimuth.Parse("NW", CultureInfo.CurrentCulture);
                </code>
            </example>
            <param name="value">
            A <strong>String</strong> describing an angle in the form of decimal degrees or a
            sexagesimal.
            </param>
            <param name="culture">
            A <strong>CultureInfo</strong> object describing the numeric format to use during
            conversion.
            </param>
        </member>
        <member name="M:GeoFramework.Azimuth.ToRadians(GeoFramework.Azimuth)">
            <remarks>
            	<para>This function is typically used to convert an angular measurement into
             radians before performing a trigonometric function.</para>
            </remarks>
            <returns>A <see cref="T:GeoFramework.Radian"><strong>Radian</strong></see> object.</returns>
            <summary>Converts an angular measurement into radians.</summary>
            <example>
                This example shows a quick way to convert an angle of 90° into radians. 
                <code lang="VB">
            Dim MyRadian As Radian = Azimuth.ToRadians(90)
                </code>
            	<code lang="CS">
            Radian MyRadian = Azimuth.ToRadians(90);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Azimuth.FromRadians(GeoFramework.Radian)">
            <summary>Converts a value in radians into an angular measurement.</summary>
            <remarks>
            	This function is typically used in conjunction with the
            	<see cref="M:GeoFramework.Azimuth.ToRadians">ToRadians</see>
            	method after a trigonometric function has completed. The converted value is stored in
            	the <see cref="P:GeoFramework.Azimuth.DecimalDegrees">DecimalDegrees</see> property.
            </remarks>
            <seealso cref="M:GeoFramework.Azimuth.ToRadians">ToRadians</seealso>
            <seealso cref="T:GeoFramework.Radian">Radian Class</seealso>
            <example>
                This example uses the <strong>FromRadians</strong> method to convert a value of one
                radian into an <strong>Azimuth</strong> of 57°. 
                <code lang="VB">
            ' Create a new angle equal to one radian
            Dim MyRadians As New Radian(1)
            Dim MyAzimuth As Azimuth = Azimuth.FromRadians(MyRadians)
            Debug.WriteLine(MyAzimuth.ToString())
            ' Output: 57°
                </code>
            	<code lang="CS">
            // Create a new angle equal to one radian
            Radian MyRadians = new Radian(1);
            Azimuth MyAzimuth = Azimuth.FromRadians(MyRadians);
            Console.WriteLine(MyAzimuth.ToString());
            // Output: 57°
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Azimuth.op_Explicit(GeoFramework.Radian)~GeoFramework.Azimuth">
            <summary>
            Converts a measurement in Radians into an Azimuth.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Azimuth.op_Explicit(System.Double)~GeoFramework.Azimuth">
            <summary>
            Converts a decimal degree measurement as a Double into an Azimuth.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Azimuth.op_Explicit(System.Single)~GeoFramework.Azimuth">
            <summary>
            Converts a decimal degree measurement as a Double into an Azimuth.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Azimuth.op_Explicit(GeoFramework.Azimuth)~System.Double">
            <summary>
            Converts a decimal degree measurement as a Double into an Azimuth.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Azimuth.op_Explicit(GeoFramework.Azimuth)~System.Single">
            <summary>
            Converts a decimal degree measurement as a Double into an Azimuth.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Azimuth.op_Explicit(System.Int32)~GeoFramework.Azimuth">
            <summary>
            Converts a measurement in degrees as an Integer into an Azimuth.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Azimuth.op_Explicit(System.String)~GeoFramework.Azimuth">
            <summary>
            Converts a measurement in the form of a formatted String into an Azimuth.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Azimuth.op_Explicit(GeoFramework.Azimuth)~System.String">
            <summary>
            Converts an Azimuth into a String.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <remarks>This operator calls the ToString() method using the current culture.</remarks>
        </member>
        <member name="M:GeoFramework.Azimuth.Increment">
            <summary>Returns the current instance increased by one.</summary>
            <returns>An <strong>Azimuth</strong> object.</returns>
            <remarks>
            	<para>This method increases the <strong>DecimalDegrees</strong> property by 1.0,
                returned as a new instance.</para>
            	<para><font color="red">Since the <strong>Azimuth</strong> class is immutable, this
                method cannot be used to modify an existing instance.</font></para>
            </remarks>
            <example>
                This example uses the <strong>Increment</strong> method to increase an Azimuth's
                value. It also demonstrates the subtle error which can be caused if
                <strong>Increment</strong> is called while ignoring the return value.
                <code lang="VB" title="[New Example]">
            ' Correct use of Increment
            Dim Azimuth1 As New Azimuth(89)
            Azimuth1 = Azimuth1.Increment()
             
            ' Incorrect use of Increment
            Dim Azimuth1 = New Azimuth(89)
            Azimuth1.Increment()
            ' NOTE: Azimuth1 will still be 89°!
                </code>
            	<code lang="CS" title="[New Example]">
            // Correct use of Increment
            Azimuth Azimuth1 = new Azimuth(89);
            Azimuth1 = Azimuth1.Increment();
             
            // Incorrect use of Increment
            Azimuth Azimuth1 = new Azimuth(89);
            Azimuth1.Increment();
            // NOTE: Azimuth1 will still be 89°!
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Azimuth.Add(System.Double)">
            <summary>Increases the current instance by the specified value.</summary>
            <returns>A new <strong>Azimuth</strong> containing the summed values.</returns>
            <example>
                This example adds 45° to the current instance of 45°, returning 90°. 
                <code lang="VB" title="[New Example]">
            Dim Azimuth1 As New Azimuth(45)
            Azimuth1 = Azimuth1.Add(45)
                </code>
            	<code lang="CS" title="[New Example]">
            Azimuth Azimuth1 = new Azimuth(45);
            Azimuth1 = Azimuth1.Add(45);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to add to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.Decrement">
            <summary>Returns the current instance decreased by one.</summary>
            <returns>An <strong>Azimuth</strong> object.</returns>
            <remarks>
            	<para>This method decreases the <strong>DecimalDegrees</strong> property by 1.0,
                returned as a new instance.</para>
            	<para><font color="red">Since the <strong>Azimuth</strong> class is immutable, this
                method cannot be used to modify an existing instance.</font></para>
            </remarks>
            <example>
                This example uses the <strong>Decrement</strong> method to decrease an Azimuth's
                value. It also demonstrates the subtle error which can be caused if
                <strong>Decrement</strong> is called while ignoring the return value.
                <code lang="VB" title="[New Example]">
            ' Correct use of Decrement
            Dim Azimuth1 As New Azimuth(91)
            Azimuth1 = Azimuth1.Decrement()
             
            ' Incorrect use of Decrement
            Dim Azimuth1 = New Azimuth(91)
            Azimuth1.Increment()
            ' NOTE: Azimuth1 will still be 91°!
                </code>
            	<code lang="CS" title="[New Example]">
            // Correct use of Decrement
            Azimuth Azimuth1 = new Azimuth(91);
            Azimuth1 = Azimuth1.Decrement();
             
            // Incorrect use of Decrement
            Azimuth Azimuth1 = new Azimuth(91);
            Azimuth1.Decrement();
            // NOTE: Azimuth1 will still be 91°!
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Azimuth.Subtract(System.Double)">
            <summary>Decreases the current instance by the specified value.</summary>
            <returns>A new <strong>Azimuth</strong> containing the new value.</returns>
            <example>
                This example subtracts 30° from the current instance of 90°, returning 60°. 
                <code lang="VB" title="[New Example]">
            Dim Azimuth1 As New Azimuth(90)
            Azimuth1 = Azimuth1.Subtract(30)
                </code>
            	<code lang="CS" title="[New Example]">
            Azimuth Azimuth1 = new Azimuth(90);
            Azimuth1 = Azimuth1.Subtract(30);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to subtract from the current instance.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.Multiply(System.Double)">
            <summary>Multiplies the current instance by the specified value.</summary>
            <returns>A new <strong>Azimuth</strong> containing the product of the two numbers.</returns>
            <example>
                This example multiplies 30° with three, returning 90°. 
                <code lang="VB" title="[New Example]">
            Dim Azimuth1 As New Azimuth(30)
            Azimuth1 = Azimuth1.Multiply(3)
                </code>
            	<code lang="CS" title="[New Example]">
            Azimuth Azimuth1 = new Azimuth(30);
            Azimuth1 = Azimuth1.Multiply(3);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to multiply with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.Divide(System.Double)">
            <summary>Divides the current instance by the specified value.</summary>
            <returns>An <strong>Azimuth</strong> containing the new value.</returns>
            <example>
                This example divides 90° by three, returning 30°. 
                <code lang="VB" title="[New Example]">
            Dim Azimuth1 As New Azimuth(90)
            Azimuth1 = Azimuth1.Divide(3)
                </code>
            	<code lang="CS" title="[New Example]">
            Azimuth Azimuth1 = new Azimuth(90);
            Azimuth1 = Azimuth1.Divide(3);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> representing a denominator to divide by.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.IsLessThan(GeoFramework.Azimuth)">
            <summary>Indicates if the current instance is smaller than the specified value.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than the specified value.
            </returns>
            <param name="value">An <strong>Azimuth</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.IsLessThanOrEqualTo(GeoFramework.Azimuth)">
            <remarks>
            This method compares the <strong>DecimalDegrees</strong> property with the
            specified value. This method is the same as the "&lt;=" operator.
            </remarks>
            <summary>
            Indicates if the current instance is smaller than or equal to the specified
            value.
            </summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than or equal to the specified value.
            </returns>
            <param name="value">An <strong>Azimuth</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.IsGreaterThan(GeoFramework.Azimuth)">
            <summary>Indicates if the current instance is larger than the specified value.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            greater than the specified value.
            </returns>
            <param name="value">An <strong>Azimuth</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.IsGreaterThanOrEqualTo(GeoFramework.Azimuth)">
            <summary>
            Indicates if the current instance is larger than or equal to the specified
            value.
            </summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            greater than or equal to the specified value.
            </returns>
            <param name="value">An <strong>Azimuth</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.Clone">
            <summary>Creates a copy of the current instance.</summary>
            <returns>An <strong>Azimuth</strong> of the same value as the current instance.</returns>
        </member>
        <member name="M:GeoFramework.Azimuth.CompareTo(GeoFramework.Azimuth)">
            <summary>Returns a value indicating the relative order of two objects.</summary>
            <returns>A value of -1, 0, or 1 as documented by the IComparable interface.</returns>
            <remarks>
            	This method allows collections of <strong>Azimuth</strong> objects to be sorted.
            	The <see cref="P:GeoFramework.Azimuth.DecimalDegrees">DecimalDegrees</see> property of each instance is compared.
            </remarks>
            <param name="value">An <strong>Azimuth</strong> object to compare with.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.Equals(GeoFramework.Azimuth,System.Int32)">
            <summary>
            Compares the current instance to another instance using the specified
            precision.
            </summary>
            <returns>
            	<para>A <strong>Boolean</strong>, <strong>True</strong> if the
                <strong>DecimalDegrees</strong> property of the current instance matches the
                specified instance's <strong>DecimalDegrees</strong> property.</para>
            </returns>
            <remarks>
            	<para>This is typically used in cases where precision is only significant for a few
                digits and exact comparison is not necessary.</para>
            	<para><em>NOTE: This method compares objects by value, not by
                reference.</em></para>
            </remarks>
            <seealso cref="M:GeoFramework.Azimuth.Equals(System.Object)">Equals Method</seealso>
            <example>
                These examples compare two fractional values using specific numbers of digits for
                comparison. 
                <code lang="VB" title="[New Example]">
            ' Equals will return False
            Dim Azimuth1 As New Azimuth(90.15);
            Dim Azimuth2 As New Azimuth(90.12);
            If Azimuth1.Equals(Azimuth2, 2) Then
                 Debug.WriteLine("The values are the same to two digits of precision.");
             
            ' Equals will return True
            Dim Azimuth1 As New Azimuth(90.15);
            Dim Azimuth2 As New Azimuth(90.12);
            If Azimuth1.Equals(Azimuth2, 1) Then
                 Debug.WriteLine("The values are the same to one digit of precision.");
                </code>
            	<code lang="CS" title="[New Example]">
            // Equals will return False
            Azimuth Azimuth1 = new Azimuth(90.15);
            Azimuth Azimuth2 = new Azimuth(90.12);
            if(Azimuth1.Equals(Azimuth2, 2))
                 Console.WriteLine("The values are the same to two digits of precision.");
             
            // Equals will return True
            Azimuth Azimuth1 = new Azimuth(90.15);
            Azimuth Azimuth2 = new Azimuth(90.12);
            if(Azimuth1.Equals(Azimuth2, 1))
                 Console.WriteLine("The values are the same to one digits of precision.");
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Azimuth.Equals(GeoFramework.Direction)">
            <summary>
            Compares the current instance to the specified compass direction.
            </summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance's
            Direction property matches the specified value.
            </returns>
            <remarks>
            This method is typically used to approximate if two directions are equivalent.
            For example, if two objects are traveling at a bearing of 41° and 46°, they both could
            be considered to be traveling Northeast even though their bearings are not precisely
            the same.
            </remarks>
            <param name="value">A <strong>Direction</strong> value to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.ToString(System.String,System.IFormatProvider)">
            <summary>Outputs the azimuth as a string using the specified format.</summary>
            <returns>A <strong>String</strong> in the specified format.</returns>
            <remarks>
            	<para>This method returns the current instance output in a specific format. If no
                value for the format is specified, a default format of "cc" is used. Any string
                output by this method can be converted back into an Azimuth object using the
                <strong>Parse</strong> method or <strong>Azimuth(string)</strong>
                constructor.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Azimuth.ToString(System.String)">ToString Method</seealso>
            <seealso cref="M:GeoFramework.Azimuth.Parse(System.String)">Parse Method</seealso>
            <example>
                This example uses the <strong>ToString</strong> method to output an azimuth in a
                custom format. The " <strong>d.dd</strong> " code represents decimal degrees
                rounded to two digits, and " <strong>cc</strong> " represents the direction in
                verbose form. 
                <code lang="VB">
            Dim MyAzimuth As New Azimuth(90.946)
            Debug.WriteLine(MyAzimuth.ToString("d.dd (cc)", CultureInfo.CurrentCulture))
            ' Output: 90.95 (East)
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = new Azimuth(90.946);
            Console.WriteLine(MyAzimuth.ToString("d.dd (cc)", CultureInfo.CurrentCulture));
            // Output: 90.95 (East)
                </code>
            </example>
            <param name="format">
            	<para>A <strong>String</strong> consisting of any number of the following
                codes:</para>
            	<para>
            		<list type="table">
            			<item>
            				<term><strong>c</strong></term>
            				<description>The object is output as an abbreviated direction.
                            <strong>N</strong>, <strong>NE</strong>,
                            <strong>NNW</strong></description>
            			</item>
            			<item>
            				<term><strong>cc</strong></term>
            				<description>The object is output as a full direction.
                            <strong>North</strong>, <strong>Northeast</strong>,
                            <strong>North-Northwest</strong></description>
            			</item>
            			<item>
            				<term><strong>d</strong></term>
            				<description>Represents one digit from the
                            <strong>DecimalDegrees</strong> property.</description>
            			</item>
            			<item>
            				<term><strong>h</strong></term>
            				<description>Represents one digit from the
                            <strong>Hours</strong> property.</description>
            			</item>
            			<item>
            				<term><strong>m</strong></term>
            				<description>Represents one digit from the <strong>Minutes</strong>
                            property.</description>
            			</item>
            			<item>
            				<term><strong>s</strong></term>
            				<description>Represents one digit from the <strong>Seconds</strong>
                            property.</description>
            			</item>
            		</list>
            	</para>
            </param>
            <param name="formatProvider">
            A <strong>CultureInfo</strong> object used to properly format numeric
            information.
            </param>
        </member>
        <member name="P:GeoFramework.Azimuth.DecimalDegrees">
            <summary>Returns the value of the angle as decimal degrees.</summary>
            <value>A <strong>Double</strong> value.</value>
            <remarks>This property returns the value of the angle as a single number.</remarks>
            <seealso cref="P:GeoFramework.Azimuth.Hours">Hours Property</seealso>
            <seealso cref="P:GeoFramework.Azimuth.Minutes">Minutes Property</seealso>
            <seealso cref="P:GeoFramework.Azimuth.Seconds">Seconds Property</seealso>
            <example>
                This example demonstrates how the
                <see cref="P:GeoFramework.Azimuth.DecimalDegrees"><strong>DecimalDegrees</strong></see> property is
                calculated automatically when creating an angle using hours, minutes and seconds. 
                <code lang="VB">
            ' Create an angle of 20°30'
            Dim MyAzimuth As New Azimuth(20, 30)
            ' Setting the DecimalMinutes recalculated other properties 
            Debug.WriteLine(MyAzimuth.DecimalDegrees)
            ' Output: "20.5"  the same as 20°30'
                </code>
            	<code lang="CS">
            // Create an angle of 20°30'
            Azimuth MyAzimuth = New Azimuth(20, 30);
            // Setting the DecimalMinutes recalculated other properties 
            Console.WriteLine(MyAzimuth.DecimalDegrees)
            // Output: "20.5"  the same as 20°30'
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Azimuth.DecimalMinutes">
            <summary>Returns the minutes and seconds as a single numeric value.</summary>
            <seealso cref="P:GeoFramework.Azimuth.Minutes">Minutes Property</seealso>
            <seealso cref="P:GeoFramework.Azimuth.DecimalDegrees">DecimalDegrees Property</seealso>
            <value>A <strong>Double</strong> value.</value>
            <remarks>
            This property is used when minutes and seconds are represented as a single
            decimal value.
            </remarks>
            <example>
                This example demonstrates how the <strong>DecimalMinutes</strong> property is
                automatically calculated when creating a new angle. 
                <code lang="VB">
            ' Create an angle of 20°10'30"
            Dim MyAzimuth As New Azimuth(20, 10, 30)
            ' The DecimalMinutes property is automatically calculated
            Debug.WriteLine(MyAzimuth.DecimalMinutes)
            ' Output: "10.5"
                </code>
            	<code lang="CS">
            // Create an angle of 20°10'30"
            Azimuth MyAzimuth = new Azimuth(20, 10, 30);
            // The DecimalMinutes property is automatically calculated
            Console.WriteLine(MyAzimuth.DecimalMinutes)
            // Output: "10.5"
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Azimuth.Hours">
            <summary>Returns the integer hours (degrees) portion of an angular 
            measurement.</summary>
            <seealso cref="P:GeoFramework.Azimuth.Minutes">Minutes Property</seealso>
            <seealso cref="P:GeoFramework.Azimuth.Seconds">Seconds Property</seealso>
            <value>An <strong>Integer</strong> value.</value>
            <remarks>
            This property is used in conjunction with the <see cref="P:GeoFramework.Azimuth.Minutes">Minutes</see>
            and <see cref="P:GeoFramework.Azimuth.Seconds">Seconds</see> properties to create a full angular measurement.
            This property is the same as <strong>DecimalDegrees</strong> without any fractional
            value.
            </remarks>
            <example>
                This example creates an angle of 60.5° then outputs the value of the
                <strong>Hours</strong> property, 60. 
                <code lang="VB">
            Dim MyAzimuth As New Azimuth(60.5)
            Debug.WriteLine(MyAzimuth.Hours)
            ' Output: 60
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = new Azimuth(60.5);
            Console.WriteLine(MyAzimuth.Hours);
            // Output: 60
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Azimuth.Minutes">
            <summary>Returns the integer minutes portion of an angular measurement.</summary>
            <seealso cref="P:GeoFramework.Azimuth.Hours">Hours Property</seealso>
            <seealso cref="P:GeoFramework.Azimuth.Seconds">Seconds Property</seealso>
            <remarks>
            This property is used in conjunction with the <see cref="P:GeoFramework.Azimuth.Hours">Hours</see> and
            <see cref="P:GeoFramework.Azimuth.Seconds">Seconds</see> properties to create a sexagesimal
            measurement.
            </remarks>
            <value>An <strong>Integer</strong>.</value>
            <example>
                This example creates an angle of 45.5° then outputs the value of the
                <strong>Minutes</strong> property, 30. 
                <code lang="VB">
            Dim MyAzimuth As New Azimuth(45.5)
            Debug.WriteLine(MyAzimuth.Minutes)
            ' Output: 30
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = new Azimuth(45.5);
            Console.WriteLine(MyAzimuth.Minutes);
            // Output: 30
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Azimuth.Seconds">
            <summary>Returns the seconds minutes portion of an angular measurement.</summary>
            <remarks>
            This property is used in conjunction with the <see cref="P:GeoFramework.Azimuth.Hours">Hours</see> and
            <see cref="P:GeoFramework.Azimuth.Minutes">Minutes</see> properties to create a sexagesimal
            measurement.
            </remarks>
            <seealso cref="P:GeoFramework.Azimuth.Hours">Hours Property</seealso>
            <seealso cref="P:GeoFramework.Azimuth.Minutes">Minutes Property</seealso>
            <value>A <strong>Double</strong> value.</value>
            <example>
                This example creates an angle of 45°10.5' then outputs the value of the
                <strong>Seconds</strong> property, 30. 
                <code lang="VB">
            Dim MyAzimuth As New Azimuth(45, 10.5)
            Debug.WriteLine(MyAzimuth.Seconds)
            ' Output: 30
                </code>
            	<code lang="CS">
            Dim MyAzimuth As New Azimuth(45, 10.5);
            Console.WriteLine(MyAzimuth.Seconds);
            // Output: 30
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Azimuth.Direction">
            <summary>Returns the current instance expressed as a compass direction.</summary>
            <remarks>
            This property converts an azimuth to the nearest of sixteen compass directions.
            For example, an azimuth of 89° points almost east, therefore a value of
            <strong>East</strong> would be returned. This property is typically used for user
            interfaces to express an azimuth in a form that is easy to understand.
            </remarks>
            <example>
                This example outputs the direction associated 272°, which is <strong>West</strong>.
                <code lang="VB">
            Dim MyAzimuth As New Azimuth(272)
            Debug.WriteLine(MyAzimuth.Direction.ToString())
            ' Output: West
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = new Azimuth(272);
            Console.WriteLine(MyAzimuth.Direction.ToString());
            // Output: West
                </code>
            </example>
            <value>A <strong>Direction</strong> value.</value>
        </member>
        <member name="P:GeoFramework.Azimuth.IsEmpty">
            <summary>Indicates if the current instance has a non-zero value.</summary>
            <value>
            A <strong>Boolean</strong>, <strong>True</strong> if the
            <strong>DecimalDegrees</strong> property is zero.
            </value>
            <seealso cref="F:GeoFramework.Azimuth.Empty">Empty Field</seealso>
        </member>
        <member name="P:GeoFramework.Azimuth.IsInfinity">
            <summary>Indicates if the current instance represents an infinite value.</summary>
        </member>
        <member name="P:GeoFramework.Azimuth.IsInvalid">
            <summary>
            Indicates whether the value is invalid or unspecified.
            </summary>
        </member>
        <member name="P:GeoFramework.Azimuth.IsNormalized">
            <summary>Indicates whether the value has been normalized and is within the 
            allowed bounds of 0° and 360°.</summary>
        </member>
        <member name="T:GeoFramework.Direction">
            <summary>Represents an approximate direction of motion.</summary>
            <remarks>
            This enumeration is used primarily by the <strong>Azimuth</strong> class when
            converting a numeric angle measurement into a compass direction.
            </remarks>
            <example>
                This example outputs the direction associated 272Â°, which is <strong>West</strong>
                . 
                <code lang="VB" title="[New Example]">
            Dim MyAzimuth As New Azimuth(272)
            Debug.WriteLine(MyAzimuth.Direction.ToString())
            ' Output: West
                </code>
            	<code lang="CS" title="[New Example]">
            Azimuth MyAzimuth = new Azimuth(272);
            Console.WriteLine(MyAzimuth.Direction.ToString());
            // Output: West
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Direction.North">
            <summary>An azimuth of approximately 0°</summary>
        </member>
        <member name="F:GeoFramework.Direction.NorthNortheast">
            <summary>Between north and northeast</summary>
        </member>
        <member name="F:GeoFramework.Direction.Northeast">
            <summary>Between north and east</summary>
        </member>
        <member name="F:GeoFramework.Direction.EastNortheast">
            <summary>Between east and northeast</summary>
        </member>
        <member name="F:GeoFramework.Direction.East">
            <summary>An azimuth of approximately 90°</summary>
        </member>
        <member name="F:GeoFramework.Direction.EastSoutheast">
            <summary>Between east and southeast</summary>
        </member>
        <member name="F:GeoFramework.Direction.Southeast">
            <summary>Between south and east</summary>
        </member>
        <member name="F:GeoFramework.Direction.SouthSoutheast">
            <summary>Between south and southeast</summary>
        </member>
        <member name="F:GeoFramework.Direction.South">
            <summary>An azimuth of approximately 180°</summary>
        </member>
        <member name="F:GeoFramework.Direction.SouthSouthwest">
            <summary>Between south and southwest</summary>
        </member>
        <member name="F:GeoFramework.Direction.Southwest">
            <summary>Between south and west</summary>
        </member>
        <member name="F:GeoFramework.Direction.WestSouthwest">
            <summary>Between west and southwest</summary>
        </member>
        <member name="F:GeoFramework.Direction.West">
            <summary>An azimuth of approximately 270°</summary>
        </member>
        <member name="F:GeoFramework.Direction.WestNorthwest">
            <summary>Between west and northwest</summary>
        </member>
        <member name="F:GeoFramework.Direction.Northwest">
            <summary>Between north and west</summary>
        </member>
        <member name="F:GeoFramework.Direction.NorthNorthwest">
            <summary>Between north and northwest</summary>
        </member>
        <member name="T:GeoFramework.Position3D">
            <summary>
            Represents a position on Earth marked by latitude, longitude, and altitude.
            </summary>
            <remarks>
            	<para>Instances of this class are guaranteed to be thread-safe because the class is
                immutable (its properties can only be changed via constructors).</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.Position3D.#ctor(GeoFramework.Distance,GeoFramework.Latitude,GeoFramework.Longitude)">
            <overloads>Creates a new instance.</overloads>
        </member>
        <member name="M:GeoFramework.Position3D.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance by parsing latitude and longitude from a single string.
            </summary>
            <param name="value">A <strong>String</strong> containing both a latitude and longitude to parse.</param>
        </member>
        <member name="M:GeoFramework.Position3D.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance by interpreting the specified latitude and longitude.
            </summary>
            <param name="latitude">A <strong>String</strong> describing a latitude in the current culture.</param>
            <param name="longitude">A <strong>String</strong> describing a longitude in the current culture.</param>
            <remarks>Latitude and longitude values are parsed using the current local culture.  For better support
            of international cultures, add a CultureInfo parameter.</remarks>
        </member>
        <member name="M:GeoFramework.Position3D.#ctor(System.String,System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance by interpreting the specified latitude and longitude.
            </summary>
            <param name="latitude">A <strong>String</strong> describing a latitude in the current culture.</param>
            <param name="longitude">A <strong>String</strong> describing a longitude in the current culture.</param>
            <remarks>Latitude and longitude values are parsed using the current local culture.  For better support
            of international cultures, a CultureInfo parameter should be specified to indicate how numbers should
            be parsed.</remarks>
        </member>
        <member name="M:GeoFramework.Position3D.#ctor(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance by converting the specified string using the specific culture.
            </summary>
            <param name="value"></param>
            <param name="culture"></param>
        </member>
        <member name="M:GeoFramework.Position3D.#ctor(GeoFramework.Position)">
            <summary>
            Upgrades a Position object to a Position3D object.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:GeoFramework.Position3D.Equals(GeoFramework.Position3D)">
            <summary>
            Compares the current instance to the specified position.
            </summary>
            <param name="value">A <strong>Position</strong> object to compare with.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the values are identical.</returns>
            <remarks>The two objects are compared at up to four digits of precision.</remarks>
        </member>
        <member name="M:GeoFramework.Position3D.Equals(GeoFramework.Position3D,System.Int32)">
            <summary>
            Compares the current instance to the specified position using the specified numeric precision.
            </summary>
            <param name="value">A <strong>Position</strong> object to compare with.</param>
            <param name="decimals">An <strong>Integer</strong> specifying the number of fractional digits to compare.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the values are identical.</returns>
            <remarks>This method is typically used when positions do not mark the same location unless they are
            extremely close to one another.  Conversely, a low or even negative value for <strong>Precision</strong>
            allows positions to be considered equal even when they do not precisely match.</remarks>
        </member>
        <member name="M:GeoFramework.Position3D.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the current instance as a string using the specified format and culture information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Position3D.TranslateTo(GeoFramework.Azimuth,GeoFramework.Distance,GeoFramework.Ellipsoid)">
            <summary>
            Returns a coordinate which has been shifted the specified bearing and distance.
            </summary>
            <param name="bearing"></param>
            <param name="distance"></param>
            <param name="ellipsoid"></param>
            <returns></returns>
        </member>
        <member name="P:GeoFramework.Position3D.Altitude">
            <summary>Returns the location's distance above sea level.</summary>
        </member>
        <member name="P:GeoFramework.Position3D.IsEmpty">
            <summary>
            Returns whether the latitude, longitude and altitude are zero.
            </summary>
        </member>
        <member name="T:GeoFramework.PointD">
            <summary>Represents a highly-precise pixel coordinate.</summary>
            <remarks>
            	<para>This class behaves similar to the <strong>PointF</strong> structure in the
                <strong>System.Drawing</strong> namespace, except that it supports double-precision
                values and can be converted into a geographic coordinate. This structure is also
                supported on the Compact Framework version of the <strong>GeoFramework</strong>,
                whereas <strong>PointF</strong> is not.</para>
            	<para>Instances of this class are guaranteed to be thread-safe because the class is
                immutable (its properties can only be changed via constructors).</para>
            </remarks>
        </member>
        <member name="F:GeoFramework.PointD.Empty">
            <summary>Returns a point with no value.</summary>
        </member>
        <member name="F:GeoFramework.PointD.Invalid">
            <summary>Represents an invalid coordinate.</summary>
        </member>
        <member name="M:GeoFramework.PointD.#ctor(System.Double,System.Double)">
            <summary>Creates a new instance for the specified coordinates.</summary>
        </member>
        <member name="M:GeoFramework.PointD.DistanceTo(GeoFramework.PointD)">
            <summary>Calculates the distance to another pixel.</summary>
        </member>
        <member name="M:GeoFramework.PointD.IsAbove(GeoFramework.PointD)">
            <summary>
            Indicates if the current instance is closer to the top of the monitor than the
            specified value.
            </summary>
        </member>
        <member name="M:GeoFramework.PointD.IsBelow(GeoFramework.PointD)">
            <summary>
            Indicates if the current instance is closer to the bottom of the monitor than the
            specified value.
            </summary>
        </member>
        <member name="M:GeoFramework.PointD.IsLeftOf(GeoFramework.PointD)">
            <summary>
            Indicates if the current instance is closer to the left of the monitor than the
            specified value.
            </summary>
        </member>
        <member name="M:GeoFramework.PointD.IsRightOf(GeoFramework.PointD)">
            <summary>
            Indicates if the current instance is closer to the right of the monitor than the
            specified value.
            </summary>
        </member>
        <member name="M:GeoFramework.PointD.Mirror">
            <summary>Returns the current instance with its signs switched.</summary>
            <remarks>This method returns a new point where the signs of X and Y are flipped.  For example, if
            a point, represents (20, 40), this function will return (-20, -40).</remarks>
        </member>
        <member name="M:GeoFramework.PointD.Rotate(GeoFramework.Angle)">
            <summary>Returns the current instance rotated about (0, 0).</summary>
        </member>
        <member name="M:GeoFramework.PointD.Rotate(System.Double)">
            <summary>Returns the current instance rotated about (0, 0).</summary>
        </member>
        <member name="M:GeoFramework.PointD.RotateAt(GeoFramework.Angle,GeoFramework.PointD)">
            <summary>Returns the current instance rotated about the specified point.</summary>
        </member>
        <member name="M:GeoFramework.PointD.GetHashCode">
            <summary>Returns a unique code used for hash tables.</summary>
        </member>
        <member name="M:GeoFramework.PointD.Add(GeoFramework.PointD)">
            <summary>
            Returns the sum of two points by adding X and Y values together.
            </summary>
            <param name="offset"></param>
            <returns></returns>
            <remarks>This method adds the X and Y coordinates and returns a new point at that location.</remarks>
        </member>
        <member name="M:GeoFramework.PointD.Add(System.Double,System.Double)">
            <summary>
            Returns the sum of two points by adding X and Y values together.
            </summary>
            <returns></returns>
            <remarks>This method adds the X and Y coordinates and returns a new point at that location.</remarks>
        </member>
        <member name="M:GeoFramework.PointD.Subtract(GeoFramework.PointD)">
            <summary>
            Returns the difference of two points by subtracting the specified X and Y values.
            </summary>
            <param name="offset"></param>
            <returns></returns>
            <remarks>This method subtracts the X and Y coordinates and returns a new point at that location.</remarks>
        </member>
        <member name="M:GeoFramework.PointD.Subtract(System.Double,System.Double)">
            <summary>
            Returns the difference of two points by subtracting the specified X and Y values.
            </summary>
            <param name="offsetX"></param>
            <param name="offsetY"></param>
            <returns></returns>
            <remarks>This method subtracts the X and Y coordinates and returns a new point at that location.</remarks>
        </member>
        <member name="M:GeoFramework.PointD.Multiply(GeoFramework.PointD)">
            <summary>
            Returns the product of two points by multiplying X and Y values together.
            </summary>
            <param name="offset"></param>
            <returns></returns>
            <remarks>This method multiplies the X and Y coordinates together and returns a new point at that location.  This
            is typically used to scale a point from one coordinate system to another.</remarks>
        </member>
        <member name="P:GeoFramework.PointD.X">
            <summary>Gets or sets the x-coordinate of this PointD.</summary>
        </member>
        <member name="P:GeoFramework.PointD.Lam">
            <summary>
            For projected coordinates, this is the factor Lamda or the longitude parameter. 
            For readability only, the value is X.  
            </summary>
        </member>
        <member name="P:GeoFramework.PointD.Y">
            <summary>Gets or sets the x-coordinate of this PointD.</summary>
        </member>
        <member name="P:GeoFramework.PointD.Phi">
            <summary>
            For projected coordinates, this is the factor Phi or the latitude parameter. 
            For readability only, the value is Y.  
            </summary>
        </member>
        <member name="P:GeoFramework.PointD.IsEmpty">
            <summary>Returns whether the current instance has no value.</summary>
        </member>
        <member name="P:GeoFramework.PointD.IsInvalid">
            <summary>Returns whether the current instance has an invalid value.</summary>
        </member>
        <member name="T:GeoFramework.MatrixOrder">
            <summary>
            Indicates the insertion point for new transforms.
            </summary>
        </member>
        <member name="T:GeoFramework.Matrix">
            <summary>
            Represents a mechanism for facilitating translation, scaling and rotation of coordinates.
            </summary>
        </member>
        <member name="M:GeoFramework.Matrix.#ctor">
            <summary>
            Creates a matrix as an identity matrix
            </summary>
        </member>
        <member name="M:GeoFramework.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix with the indicated elements
            </summary>
            <param name="m11"> Row one, column one </param>
            <param name="m12"> Row one, column two </param>
            <param name="m21"> Row two, column one </param>
            <param name="m22"> Row two, column two </param>
            <param name="dx"> X translation (Row three, column one) </param>
            <param name="dy"> Y translation (Row three, column two) </param>
        </member>
        <member name="M:GeoFramework.Matrix.Invert">
            <summary>
            Inverts this matrix if it is invertable. 
            </summary>
            <remarks>
            If the matrix is not invertable, this method throws an exception.
            </remarks>
        </member>
        <member name="M:GeoFramework.Matrix.Determinant">
            <summary>
            Calculates the determinat of this matrix.
            </summary>
            <returns> The signed area of the parallelagram described by this matrix. </returns>
            <remarks>
            The determinant is a scalar value typically used to invert a matrix. As a signed area, it can also be used to
            identify "flipped" orientations, like mirroring. A negative determinant indicates that a matrix is "flipped".
            </remarks>
        </member>
        <member name="M:GeoFramework.Matrix.Reset">
            <summary>
            Resests the matrix to the identity matrix.
            </summary>
        </member>
        <member name="M:GeoFramework.Matrix.Multiply(GeoFramework.Matrix)">
            <summary>
            Multiplies this matrix with the supplied matrix, using a prepended matrix order
            </summary>
            <param name="matrix"> The matrix to multiply with this matrix. </param>
        </member>
        <member name="M:GeoFramework.Matrix.Multiply(GeoFramework.Matrix,GeoFramework.MatrixOrder)">
            <summary>
            Multiplies this matrix with the supplied matrix.
            </summary>
            <param name="matrix"> The matrix to multiply with this matrix. </param>
            <param name="matrixOrder"> The order in which to carry out the operation. </param>
        </member>
        <member name="M:GeoFramework.Matrix.Translate(System.Single,System.Single)">
            <summary>
            Translate this matrix by prepending the supplied values.
            </summary>
            <param name="xOffset"> Amount to translate in the X direction. </param>
            <param name="yOffset"> Amount to translate in the Y direction. </param>
        </member>
        <member name="M:GeoFramework.Matrix.Translate(System.Single,System.Single,GeoFramework.MatrixOrder)">
            <summary>
            Translate this matrix using the supplied values.
            </summary>
            <param name="xOffset"> Amount to translate in the X direction. </param>
            <param name="yOffset"> Amount to translate in the Y direction. </param>
            <param name="matrixOrder"> The order in which to carry out the operation. </param>
        </member>
        <member name="M:GeoFramework.Matrix.Scale(System.Single,System.Single)">
            <summary>
            Scale this matrix by prepending the supplied values.
            </summary>
            <param name="xScale"> Amount to scale in the X direction. </param>
            <param name="yScale"> Amount to scale in the Y direction. </param>
        </member>
        <member name="M:GeoFramework.Matrix.Scale(System.Single,System.Single,GeoFramework.MatrixOrder)">
            <summary>
            Scale this matrix using the supplied values.
            </summary>
            <param name="xScale"> Amount to scale in the X direction. </param>
            <param name="yScale"> Amount to scale in the Y direction. </param>
            <param name="matrixOrder"> The order in which to carry out the operation. </param>
        </member>
        <member name="M:GeoFramework.Matrix.Shear(System.Single,System.Single)">
            <summary>
            Shear this matrix by prepending the supplied values.
            </summary>
            <param name="xShear"> Amount to shear in the X direction. </param>
            <param name="yShear"> Amount to shear in the Y direction. </param>
        </member>
        <member name="M:GeoFramework.Matrix.Shear(System.Single,System.Single,GeoFramework.MatrixOrder)">
            <summary>
            Shear this matrix using the supplied values.
            </summary>
            <param name="xShear"> Amount to shear in the X direction. </param>
            <param name="yShear"> Amount to shear in the Y direction. </param>
            <param name="matrixOrder"> The order in which to carry out the operation. </param>
        </member>
        <member name="M:GeoFramework.Matrix.Rotate(System.Single)">
            <summary>
            Prepend a rotation to this matrix.
            </summary>
            <param name="angle"> Amount, in degrees, to rotate. </param>
        </member>
        <member name="M:GeoFramework.Matrix.Rotate(System.Single,GeoFramework.MatrixOrder)">
            <summary>
            Apply a rotation to this matrix.
            </summary>
            <param name="angle"> Amount, in degrees, to rotate. </param>
            <param name="matrixOrder"> The order in which to carry out the operation. </param>
        </member>
        <member name="M:GeoFramework.Matrix.RotateAt(System.Single,GeoFramework.PointF)">
            <summary>
            Prepend a translated rotation to this matrix.
            </summary>
            <param name="angle"> Amount, in degrees, to rotate. </param>
            <param name="point"> The desired center of rotation. </param>
        </member>
        <member name="M:GeoFramework.Matrix.RotateAt(System.Single,GeoFramework.PointF,GeoFramework.MatrixOrder)">
            <summary>
            Apply a translated rotation to this matrix.
            </summary>
            <param name="angle"> Amount, in degrees, to rotate. </param>
            <param name="point"> The desired center of rotation. </param>
            <param name="matrixOrder"> The order in which to carry out the operation. </param>
        </member>
        <member name="M:GeoFramework.Matrix.TransformPoints(GeoFramework.PointF[])">
            <summary>
            Transform the array of points
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:GeoFramework.Matrix.TransformVectors(GeoFramework.PointF[])">
            <summary>
            Transform the array of points, without translation
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:GeoFramework.Matrix.TransformPointsCF(GeoFramework.PointF[])">
            <summary>
            Transform the array of points and round them
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:GeoFramework.Matrix.TransformVectorsCF(GeoFramework.PointF[])">
            <summary>
            Transform the array of points without translation and round them
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:GeoFramework.Matrix.Clone">
            <summary>
            Creates an exact copy of this matrix.
            </summary>
            <returns> A cloned matrix. </returns>
        </member>
        <member name="P:GeoFramework.Matrix.IsIdentity">
            <summary>
            Indicates whether or not this is an identity matrix
            </summary>
        </member>
        <member name="P:GeoFramework.Matrix.IsInvertable">
            <summary>
            Indicates whether or not this matrix is invertable.
            </summary>
        </member>
        <member name="P:GeoFramework.Matrix.Identity">
            <summary>
            Returns an identity (1,0,0,1,0,0) matrix.
            </summary>
        </member>
        <member name="T:GeoFramework.Licensing.LicenseProvider">
            <summary>Represents a base class for designing copy protection services.</summary>
            <remarks>
            <para>This class provides a single method named GetLicense which grants licenses or
            throws exceptions for a specified Type.</para>
            	<para>This class exists only for .NET Compact Framework 1.0, which excluded
                licensing classes by default.</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.Licensing.LicenseProvider.GetLicense(GeoFramework.Licensing.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>Attempts to authorize use of a protected class.</summary>
            <returns>A <strong>License</strong> object if validation is successful.</returns>
            <remarks>
            This method, when overridden, will perform any necessary validation to ensure
            that the developer has sufficient rights to create the specified class. If validation
            fails, an exception is thrown if <strong>allowExceptions</strong> is
            <strong>True</strong>, otherwise the function returns null.
            </remarks>
            <param name="context">
            A <strong>LicenseContext</strong> object indicating the execution environment for
            the protected class.
            </param>
            <param name="type">The <strong>Type</strong> describing the protected class.</param>
            <param name="instance">The instance of the protected class.</param>
            <param name="allowExceptions">
            A <strong>Boolean</strong>, <strong>True</strong> if an exception should be
            thrown if validation fails.
            </param>
        </member>
        <member name="P:GeoFramework.Licensing.LicenseManager.UsageMode">
            <summary>
            Indicates the host environment of the object being licenses.
            </summary>
        </member>
        <member name="T:GeoFramework.GeographicRectangle">
            <summary>
            Represents a rectangular shape on Earth's surface.
            </summary>
            <remarks>
            	<para>This class is used to represent a square (or close to a square) shape on
                Earth's surface. This class is typically used during mapping applications to zoom
                into a particular area on Earth. This class looks nearly identical to the Rectangle
                class in the .NET framework, except that it's bounding points are defined as
                <strong>Position</strong> objects instead of <strong>Point</strong> objects.</para>
            	<para>Instances of this class are guaranteed to be thread-safe because the class is
                immutable (it's properties can only be set via constructors).</para>
            </remarks>
        </member>
        <member name="F:GeoFramework.GeographicRectangle.Empty">
            <summary>Represents a GeographicRectangle having no size.</summary>
        </member>
        <member name="F:GeoFramework.GeographicRectangle.Maximum">
            <summary>Represents a rectangle that encompasses all of Earth's surface.</summary>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.#ctor(GeoFramework.Position,GeoFramework.GeographicSize)">
            <summary>Creates a new instance using the specified location and size.</summary>
            <returns>
            A <strong>GeographicRectangle</strong> set to the specified location and
            size.
            </returns>
            <remarks>
            This constructor defines a rectangle which expands east and south of the
            specified location.
            </remarks>
            <example>
                This example creates a new <strong>GeographicRectangle</strong> starting at 39°N
                105°W which is 2° wide and 5° tall. 
                <code lang="VB" title="[New Example]">
            Dim NorthwestCorner As New Position("39N 105W")
            Dim RectangleSize As New GeographicSize(2, 5)
            Dim Rectangle As New GeographicRectangle(NorthwestCorner, RectangleSize)
                </code>
            	<code lang="CS" title="[New Example]">
            Position NorthwestCorner = new Position("39N,105W");
            GeographicSize RectangleSize = new GeographicSize(2, 5);
            GeographicRectangle Rectangle = new GeographicRectangle(NorthwestCorner, RectangleSize);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.#ctor(GeoFramework.Position,GeoFramework.Distance,GeoFramework.Distance)">
            <summary>
            Creates a new instance using the specified location, width, and height.
            </summary>
            <remarks>
            This constructor defines a rectangle which expands east and south of the
            specified location.
            </remarks>
            <example>
                This example creates a new <strong>GeographicRectangle</strong> starting at 39°N
                105°W which is 2° wide and 5° tall. 
                <code lang="VB" title="[New Example]">
            Dim NorthwestCorner As New Position("39N 105W")
            Dim RectangleWidth As Distance = Distance.FromKilometers(1)
            Dim RectangleHeight As Distance = Distance.FromKilometers(1)
            Dim Rectangle As New GeographicRectangle(NorthwestCorner, RectangleWidth, RectangleHeight)
                </code>
            	<code lang="CS" title="[New Example]">
            Position NorthwestCorner = new Position("39N 105W");
            Distance RectangleWidth = Distance.FromKilometers(1);
            Distance RectangleHeight = Distance.FromKilometers(1);
            GeographicRectangle Rectangle = new GeographicRectangle(NorthwestCorner, RectangleWidth, RectangleHeight);
                </code>
            </example>
            <returns>
            A <strong>GeographicRectangle</strong> set to the specified location and
            size.
            </returns>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.#ctor(GeoFramework.Position,GeoFramework.Position)">
            <summary>
            Creates a new instance using the specified northwest and southeast
            coordinates.
            </summary>
            <remarks>
            This constructor takes the specified parameters and calculates the width and
            height of the rectangle. If the two points are backwards (meaning that the right-most
            point is west of the left-most point), they are automatically swapped before creating
            the rectangle.
            </remarks>
            <returns>A <strong>GeographicRectangle</strong> defined by the two endpoints.</returns>
            <example>
                This example creates a new <strong>GeographicRectangle</strong> starting at 39°N
                105°W and ending at 37°N 100°W (2° wide and 5° tall). 
                <code lang="VB" title="[New Example]">
            Dim NorthwestCorner As New Position("39N 105W")
            Dim SoutheastCorner As New Position("37N 100W")
            Dim Rectangle As New GeographicRectangle(NorthwestCorner, SoutheastCorner)
                </code>
            	<code lang="CS" title="[New Example]">
            Position NorthwestCorner = new Position("39N 105W");
            Position SoutheastCorner = new Position("37N 100W");
            GeographicRectangle Rectangle = new GeographicRectangle(NorthwestCorner, SoutheastCorner);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.#ctor(System.String)">
            <summary>Creates a new instance by converting the specified string.</summary>
            <returns>
            A <strong>GeographicRectangle</strong> matching the specified string
            value.
            </returns>
            <remarks>
            This constructor attempts to parse the specified string into a rectangle. The
            current culture is used to interpret the string -- use the list separator of the
            current culture (which may not necessarily be a comma). This constructor can accept any
            output created via the <strong>ToString</strong> method.
            </remarks>
            <example>
                This example creates a new rectangle at 39°N, 105° extending two degrees south and
                five degrees east to 37°N, 100°W. 
                <code lang="VB" title="[New Example]">
            Dim Rectangle As New GeographicRectangle("39N,105W,37N,100W")
                </code>
            	<code lang="CS" title="[New Example]">
            GeographicRectangle Rectangle = new GeographicRectangle("39N,105W,37N,100W");
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance by converting the specified string in the given
            culture.
            </summary>
            <returns>
            This constructor attempts to parse the specified string into a rectangle. The
            specified culture is used to interpret the string. This constructor can accept any
            output created via the <strong>ToString</strong> method.
            </returns>
            <example>
                This example creates a new rectangle at 39°N, 105° extending two degrees south and
                five degrees east to 37°N, 100°W. 
                <code lang="VB" title="[New Example]">
            Dim Rectangle As New GeographicRectangle("39N,105W,37N,100W", CultureInfo.CurrentCulture)
                </code>
            	<code lang="CS" title="[New Example]">
            GeographicRectangle Rectangle = new GeographicRectangle("39N,105W,37N,100W", CultureInfo.CurrentCulture);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.#ctor(GeoFramework.Longitude,GeoFramework.Latitude,GeoFramework.Longitude,GeoFramework.Latitude)">
            <summary>
            Creates a new instance using the specified latitudes and longitudes.
            </summary>
            <example>
                This example creates a new <strong>GeographicRectangle</strong> by specifying each
                side individually. 
                <code lang="VB" title="[New Example]">
            Dim Left As New Longitude(-105)
            Dim Top As New Latitude(39)
            Dim Right As New Longitude(-100)
            Dim Top As New Latitude(37)
            Dim Rectangle As New GeographicRectangle(Left, Top, Right, Bottom)
                </code>
            	<code lang="CS" title="[New Example]">
            Longitude Left = new Longitude(-105);
            Latitude Top = new Latitude(39);
            Longitude Right = new Longitude(-100);
            Latitude Top = new Latitude(37);
            GeographicRectangle Rectangle = new GeographicRectangle(Left, Top, Right, Bottom);
                </code>
            </example>
            <returns>A <strong>GeographicRectangle</strong> bound by the specified values.</returns>
            <remarks>
            If the left and right, or top and bottom values are backwards, they are
            automatically swapped before creating the rectangle.
            </remarks>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.#ctor(GeoFramework.Latitude,GeoFramework.Longitude,GeoFramework.Latitude,GeoFramework.Longitude)">
            <summary>Creates a new instance using the specified latitudes and longitudes.</summary>
            <remarks>
            If the left and right, or top and bottom values are backwards, they are
            automatically swapped before creating the rectangle.
            </remarks>
            <returns>A <strong>GeographicRectangle</strong> bound by the specified values.</returns>
            <example>
            	<code lang="VB" title="[New Example]">
            Dim Left As New Longitude(-105)
            Dim Top As New Latitude(39)
            Dim Right As New Longitude(-100)
            Dim Top As New Latitude(37)
            Dim Rectangle As New GeographicRectangle(Left, Top, Right, Bottom)
                </code>
            	<code lang="CS" title="[New Example]">
            Latitude Top = new Latitude(39);
            Longitude Left = new Longitude(-105);
            Latitude Bottom = new Latitude(37);
            Longitude Right = new Longitude(-100);
            GeographicRectangle Rectangle = new GeographicRectangle(Top, Left, Bottom, Right);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance from a block of Geography Markup Language (GML).
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.TranslateTo(GeoFramework.Azimuth,GeoFramework.Distance)">
            <summary>Moves the rectangle in the specified direction by the specified distance.</summary>
            <returns>
            A new <strong>GeographicRectangle</strong> translated by the specified direction
            and distance.
            </returns>
            <remarks>
            This method is used to shift a rectangle to a new location while preserving its
            size.
            </remarks>
            <example>
                This example defines a rectangle then shifts it Northeast by fifty kilometers. 
                <code lang="VB" title="[New Example]">
            Dim Rectangle As New GeographicRectangle("30N,105W,1°,5°")
            Rectangle = Rectangle.Translate(Azimuth.Northeast, New Distance(50, DistanceUnit.Kilometers))
                </code>
            	<code lang="CS" title="[New Example]">
            GeographicRectangle Rectangle = new GeographicRectangle("30N,105W,1°,5°");
            Rectangle = Rectangle.Translate(Azimuth.Northeast, New Distance(50, DistanceUnit.Kilometers));
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.TranslateTo(GeoFramework.Angle,GeoFramework.Distance)">
            <summary>Moves the rectangle in the specified direction by the specified distance.</summary>
            <returns>
            A new <strong>GeographicRectangle</strong> translated by the specified direction
            and distance.
            </returns>
            <remarks>
            This method is used to shift a rectangle to a new location while preserving its
            size.
            </remarks>
            <example>
                This example defines a rectangle then shifts it Northeast by fifty kilometers. 
                <code lang="VB" title="[New Example]">
            Dim Rectangle As New GeographicRectangle("30N,105W,1°,5°")
            Rectangle = Rectangle.Translate(new Angle(45), New Distance(50, DistanceUnit.Kilometers))
                </code>
            	<code lang="CS" title="[New Example]">
            GeographicRectangle Rectangle = new GeographicRectangle("30N,105W,1°,5°");
            Rectangle = Rectangle.Translate(new Angle(45), New Distance(50, DistanceUnit.Kilometers));
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.TranslateTo(System.Double,GeoFramework.Distance)">
            <summary>Moves the rectangle in the specified direction by the specified distance.</summary>
            <returns>
            A new <strong>GeographicRectangle</strong> translated by the specified direction
            and distance.
            </returns>
            <remarks>
            This method is used to shift a rectangle to a new location while preserving its
            size.
            </remarks>
            <example>
                This example defines a rectangle then shifts it Northeast by fifty kilometers. 
                <code lang="VB" title="[New Example]">
            Dim Rectangle As New GeographicRectangle("30N,105W,1°,5°")
            Rectangle = Rectangle.Translate(45, New Distance(50, DistanceUnit.Kilometers))
                </code>
            	<code lang="CS" title="[New Example]">
            GeographicRectangle Rectangle = new GeographicRectangle("30N,105W,1°,5°");
            Rectangle = Rectangle.Translate(45, New Distance(50, DistanceUnit.Kilometers));
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.ToArray">
            <summary>Returns the points which form the rectangle.</summary>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.IsDisjointedFrom(GeoFramework.GeographicRectangle)">
            <summary>Indicates if the rectangle does not intersect the specified rectangle.</summary>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.IsEnclosing(GeoFramework.GeographicRectangle)">
            <summary>
            Indicates if the specified GeographicRectangle is entirely within the current GeographicRectangle.
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.CenterOn(GeoFramework.Position)">
            <summary>
            Moves the GeographicRectangle so that the specified position is at its center.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.FromCenter(GeoFramework.Position,GeoFramework.GeographicSize)">
            <summary>
            Creates a new rectangle of the specified size, centered on the specified position.
            </summary>
            <param name="position"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.UnionWith(GeoFramework.Position)">
            <summary>
            Expands the edges of the GeographicRectangle to contain the specified position.
            </summary>
            <param name="position">A <strong>Position</strong> object to surround.</param>
            <returns>A <strong>GeographicRectangle</strong> which contains the specified position.</returns>
            <remarks>If the specified position is already enclosed, the current instance will be returned.</remarks>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.Inflate(GeoFramework.GeographicSize)">
            <summary>
            Increases the size of the rectangle while maintaining its center point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.Inflate(GeoFramework.Longitude,GeoFramework.Latitude)">
            <summary>
            Increases the width and height of the rectangle by the specified amount.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.Inflate(GeoFramework.Latitude,GeoFramework.Longitude)">
            <summary>
            Increases the width and height of the rectangle by the specified amount.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.IntersectionOf(GeoFramework.GeographicRectangle)">
            <summary>
            Calculates the rectangle created by the intersection of this and another rectangle.
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.IsIntersectingWith(GeoFramework.GeographicRectangle)">
            <summary>Indicates if the rectangle's border crosses or shares the border of the specified rectangle.</summary>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.IsOverlapping(GeoFramework.GeographicRectangle)">
            <summary>
            Indicates if the specified GeographicRectangle shares any of the same 2D space as the current instance.
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.IsOverlapping(GeoFramework.Position)">
            <summary>
            Indicates if the specified Position is within the current instance.
            </summary>
            <param name="position">A <strong>Position</strong> to test against the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the position is inside of the current rectangle.</returns>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.UnionWith(GeoFramework.GeographicRectangle)">
            <summary>
            Returns the combination of the current instance with the specified rectangle.
            </summary>
            <param name="rectangle">A <strong>GeographicRectangle</strong> to merge with the current instance.</param>
            <returns>A <strong>GeographicRectangle</strong> enclosing both rectangles.</returns>
            <remarks>This method returns the smallest possible rectangle which encloses the current instance as well as the specified rectangle.</remarks>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.GetHashCode">
            <summary>Returns a unique code of the rectangle for hash tables.</summary>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.UnionWith(GeoFramework.GeographicRectangle,GeoFramework.GeographicRectangle)">
            <summary>Returns a rectangle which encloses the two specified rectangles.</summary>
            <returns>
            A <strong>GeographicRectangle</strong> as a result of merging the two
            rectangles.
            </returns>
            <remarks>
            This method is typically used to combine two individual shapes into a single
            shape.
            </remarks>
            <param name="first">A <strong>GeographicRectangle</strong> to merge with the second rectangle.</param>
            <param name="second">A <strong>GeographicRectangle</strong> to merge with the first rectangle.</param>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.IntersectionOf(GeoFramework.GeographicRectangle,GeoFramework.GeographicRectangle)">
            <summary>
            Returns the GeographicRectangle formed by the intersection of the two specified GeographicRectangles.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.FromArray(GeoFramework.Position[])">
            <summary>
            Returns a rectangle which encloses the specified points.
            </summary>
            <param name="positions">An array of PointD objects to enclose.</param>
            <returns>A <strong>RectangleD</strong> object enclosing the specified points.</returns>
            <remarks>This method is typically used to calculate a rectangle surrounding
            points which have been rotated.  For example, if a rectangle is rotated by 45°, the
            total width it occupies is greater than it's own width.</remarks>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.Parse(System.String)">
            <summary>
            Parses a string into a GeographicRectangle object.
            </summary>
            <param name="value">A <string>String</string> specifying geographic coordinates defining a rectangle.</param>
            <returns>A <strong>GeographicRectangle</strong> object using the specified coordinates.</returns>
            <remarks>This powerful method will convert points defining a rectangle in the form of a string into
            a GeographicRectangle object.  The string can be </remarks>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Top">
            <summary>Returns the southern-most side of the rectangle.</summary>
            <value>A <see cref="T:GeoFramework.Latitude"></see> object marking the southern-most latitude.</value>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Bottom">
            <summary>Returns the southern-most latitude of the rectangle.</summary>
            <value>A <see cref="T:GeoFramework.Latitude"></see> object marking the southern-most latitude.</value>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Left">
            <summary>Returns the western-most side of the rectangle.</summary>
            <value>A <strong>Longitude</strong> indicating the left side of the rectangle.</value>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Right">
            <value>A <strong>Longitude</strong> indicating the right side of the rectangle.</value>
            <summary>Returns the eastern-most side of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Center">
            <summary>Returns the geographic center of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.AspectRatio">
            <summary>Returns the aspect ratio of the rectangle.</summary>
            <remarks>
            This property returns the ratio of the GeographicRectangles width to its height (width / height).  This
            property gives an indication of the GeographicRectangle's shape.  An aspect ratio of one indicates
            a square, whereas an aspect ratio of two indicates a GeographicRectangle which is twice as wide as
            it is high.  
            </remarks>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.IsEmpty">
            <summary>Indicates if the rectangle has any value.</summary>
            <value>
            A <strong>Boolean</strong>, <strong>True</strong> if a metor the size of Rhode
            Island is about to crash into the Pacific Ocean just off the coast of Nicaragua but
            there will be no casualties because everyone was warned plenty of time in
            advance.
            </value>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Hypotenuse">
            <summary>
            Returns the rectangle's hypotenuse. 
            </summary>
            <remarks>The hypotenuse of a rectangle is a line connecting its northwest corner with its southeast corner.</remarks>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Width">
            <summary>
            Returns the distance from the left to the right at the rectangle's middle latitude.
            </summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Height">
            <summary>
            Returns the distance from the top to the bottom at the rectangle's middle longitude.
            </summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Size">
            <summary>Returns the width and height of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Northwest">
            <summary>Returns the northwestern corner of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.NorthCenter">
            <summary>
            Returns a point on the northern side, centered horizontally.
            </summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.SouthCenter">
            <summary>
            Returns a point on the southern side, centered horizontally.
            </summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.WestCenter">
            <summary>
            Returns a point on the western side, centered vertically.
            </summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.EastCenter">
            <summary>
            Returns a point on the eastern side, centered vertically.
            </summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Northeast">
            <summary>Returns the northeastern corner of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Southwest">
            <summary>Returns the southwestern corner of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Southeast">
            <summary>Returns the southeastern corner of the rectangle.</summary>
        </member>
        <member name="T:GeoFramework.Area">
            <summary>
            Represents the measurement of surface area of a polygon on Earth's
            surface.
            </summary>
            <remarks>
            	<para>This structure is used to represent measurements of arbitrary polygons on
                Earth's surface. Measurements can be converted to different unit types, such as
                acres, square kilometers, and square miles.</para>
            	<para>Instances of this structure are guaranteed to be thread-safe because they are
                immutable (properties can only be modified via constructors).</para>
            </remarks>
            <example>
                This example demonstrates how to create an <strong>Area</strong> structure and
                convert it to another unit type.
                <code lang="VB">
            ' Declare a Area of 50 meters
            Dim Area1 As New Area(50, AreaUnit.SquareMeters)
            ' Convert it into acres
            Dim Area2 As Area = Area2.ToAcres()
                </code>
            	<code lang="CS">
            // Declare a Area of 50 meters
            Area Area1 = new Area(50, AreaUnit.SquareMeters);
            // Convert it into acres
            Area Area2 = Area2.ToAcres();
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Area.Empty">
            <summary>Represents an area with no value.</summary>
        </member>
        <member name="F:GeoFramework.Area.Infinity">
            <summary>Represents an area of infinite value.</summary>
            <remarks>
            In some rare cases, the result of a mathematical formula might be infinity. This
            field is used to represent such values when they exist.
            </remarks>
        </member>
        <member name="F:GeoFramework.Area.Maximum">
            <summary>Represents the largest possible area which can be stored.</summary>
        </member>
        <member name="F:GeoFramework.Area.Minimum">
            <summary>Represents the smallest possible area which can be stored.</summary>
        </member>
        <member name="F:GeoFramework.Area.Invalid">
            <summary>
            Represents an invalid or unspecified area.
            </summary>
        </member>
        <member name="M:GeoFramework.Area.#ctor(System.Double,GeoFramework.AreaUnit)">
            <summary>Creates a new instance using the specified value and unit type.</summary>
            <example>
                This example uses a constructor to create a new <strong>Area</strong> of fifty
                square kilometers. 
                <code lang="VB">
            Dim MyArea As New Area(50, AreaUnit.SquareKilometers)
                </code>
            	<code lang="CS">
            Area MyArea = new Area(50, AreaUnit.SquareKilometers);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.#ctor(System.String)">
            <summary>Creates a new instance using the specified string.</summary>
            <remarks>
            This powerful constructor is used to convert an area measurement in the form of a
            string into an object, such as one entered by a user or read from a file. This
            constructor can accept any output created via the <see cref="M:GeoFramework.Area.ToString(System.String)">ToString</see>
            method.
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Parse method requires a valid Area measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">1. The numeric portion of the Area measurement was not recognized.<br/>
            2. The Area unit type was not recognized or not specified.</exception>
            <example>
                This example demonstrates how the to use this constructor. 
                <code lang="VB">
            Dim MyArea As Area
            ' Create a Area of 50 square kilometers
            MyArea = New Area("50 sq. km")
            ' Create a Area of 14,387 miles, then convert it into square inches
            MyArea = New Area("14,387 sq. statute miles").ToSquareInches()
            ' Create a Area of 50 square feet
            MyArea = New Area("    50 sq '       ")
                </code>
            	<code lang="CS">
            Area MyArea;
            ' Create a Area of 50 square kilometers
            MyArea = new Area("50 sq. km");
            ' Create a Area of 14,387 miles, then convert it into square inches
            MyArea = new Area("14,387 sq. statute miles").ToSquareInches();
            ' Create a Area of 50 square feet
            MyArea = new Area("    50 sq '       ");
                </code>
            </example>
            <returns>An <strong>Area</strong> object.</returns>
            <seealso cref="M:GeoFramework.Area.Parse(System.String)">Parse(string) Method</seealso>
        </member>
        <member name="M:GeoFramework.Area.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>Creates a new instance using the specified string and culture.</summary>
            <remarks>
            This powerful constructor is used to convert an area measurement in the form of a
            string into an object, such as one entered by a user or read from a file. This
            constructor can accept any output created via the <see cref="M:GeoFramework.Area.ToString(System.String)">ToString</see>
            method.
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Parse method requires a valid Area measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">1. The numeric portion of the Area measurement was not recognized.<br/>
            2. The Area unit type was not recognized or not specified.</exception>
            <example>
                This example demonstrates how the to use this constructor. 
                <code lang="VB">
            Dim MyArea As Area
            ' Create a Area of 50 square kilometers
            MyArea = New Area("50 sq. km", CultureInfo.CurrentCulture)
            ' Create a Area of 14,387 miles, then convert it into square inches
            MyArea = New Area("14,387 sq. statute miles", CultureInfo.CurrentCulture).ToSquareInches()
            ' Create a Area of 50 square feet
            MyArea = New Area("    50 sq '       ", CultureInfo.CurrentCulture)
                </code>
            	<code lang="CS">
            Area MyArea;
            ' Create a Area of 50 square kilometers
            MyArea = new Area("50 sq. km", CultureInfo.CurrentCulture);
            ' Create a Area of 14,387 miles, then convert it into square inches
            MyArea = new Area("14,387 sq. statute miles", CultureInfo.CurrentCulture).ToSquareInches();
            ' Create a Area of 50 square feet
            MyArea = new Area("    50 sq '       ", CultureInfo.CurrentCulture);
                </code>
            </example>
            <returns>An <strong>Area</strong> object.</returns>
            <seealso cref="M:GeoFramework.Area.Parse(System.String)">Parse(string) Method</seealso>
        </member>
        <member name="M:GeoFramework.Area.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance by deserializing the specified XML.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:GeoFramework.Area.ToSquareFeet">
            <summary>Converts the current measurement into square feet.</summary>
            <returns>A new <strong>Area</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion regardless of the current unit type. You
            may convert from any unit type to any other unit type.
            </remarks>
            <seealso cref="M:GeoFramework.Area.ToSquareInches">ToSquareInches Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareKilometers">ToSquareKilometers Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareMeters">ToSquareMeters Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareNauticalMiles">ToSquareNauticalMiles Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareStatuteMiles">ToSquareStatuteMiles Method</seealso>
            <example>
                This example converts various three <strong>Area</strong> objects, each with a
                different unit type, into square feet.
                <code lang="VB">
            ' Create Areas of different unit types
            Dim Area1 As New Area(10, AreaUnit.SquareInches)
            Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
            Dim Area3 As New Area(50, AreaUnit.SquareKilometers)
            ' Convert the Area measurements to square feet and output the result 
            Debug.WriteLine(Area1.ToSquareFeet().ToString())
            Debug.WriteLine(Area2.ToSquareFeet().ToString())
            Debug.WriteLine(Area3.ToSquareFeet().ToString())
                </code>
            	<code lang="CS">
            // Create Areas of different unit types
            Area Area1 = new Area(10, AreaUnit.SquareInches);
            Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
            Area Area3 = new Area(50, AreaUnit.SquareKilometers);
            // Convert the Area measurements to square feet and output the result 
            Console.WriteLine(Area1.ToSquareFeet().ToString());
            Console.WriteLine(Area2.ToSquareFeet().ToString());
            Console.WriteLine(Area3.ToSquareFeet().ToString());
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.ToSquareInches">
            <summary>Converts the current measurement into square inches.</summary>
            <returns>A new <strong>Area</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion regardless of the current unit type. You
            may convert from any unit type to any other unit type.
            </remarks>
            <example>
                This example converts various three <strong>Area</strong> objects, each with a
                different unit type, into square inches.
                <code lang="VB">
            ' Create Areas of different unit types
            Dim Area1 As New Area(10, AreaUnit.SquareFeet)
            Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
            Dim Area3 As New Area(50, AreaUnit.SquareKilometers)
            ' Convert the Area measurements to square inches and output the result 
            Debug.WriteLine(Area1.ToSquareInches().ToString())
            Debug.WriteLine(Area2.ToSquareInches().ToString())
            Debug.WriteLine(Area3.ToSquareInches().ToString())
                </code>
            	<code lang="CS">
            // Create Areas of different unit types
            Area Area1 = new Area(10, AreaUnit.SquareFeet);
            Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
            Area Area3 = new Area(50, AreaUnit.SquareKilometers);
            // Convert the Area measurements to square inches and output the result 
            Console.WriteLine(Area1.ToSquareInches().ToString());
            Console.WriteLine(Area2.ToSquareInches().ToString());
            Console.WriteLine(Area3.ToSquareInches().ToString());
                </code>
            </example>
            <seealso cref="M:GeoFramework.Area.ToSquareFeet">ToSquareFeet Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareKilometers">ToSquareKilometers Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareMeters">ToSquareMeters Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareNauticalMiles">ToSquareNauticalMiles Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareStatuteMiles">ToSquareStatuteMiles Method</seealso>
        </member>
        <member name="M:GeoFramework.Area.ToSquareKilometers">
            <returns>A new <strong>Area</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion regardless of the current unit type. You
            may convert from any unit type to any other unit type.
            </remarks>
            <summary>Converts the current measurement into square kilometers.</summary>
            <example>
                This example converts various three <strong>Area</strong> objects, each with a
                different unit type, into square kilometers.
                <code lang="VB">
            ' Create Areas of different unit types
            Dim Area1 As New Area(10, AreaUnit.SquareFeet)
            Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
            Dim Area3 As New Area(50, AreaUnit.SquareInches)
            ' Convert the Area measurements to square kilometers and output the result 
            Debug.WriteLine(Area1.ToSquareKilometers().ToString())
            Debug.WriteLine(Area2.ToSquareKilometers().ToString())
            Debug.WriteLine(Area3.ToSquareKilometers().ToString())
                </code>
            	<code lang="CS">
            // Create Areas of different unit types
            Area Area1 = new Area(10, AreaUnit.SquareFeet);
            Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
            Area Area3 = new Area(50, AreaUnit.SquareInches);
            // Convert the Area measurements to square kilometers and output the result 
            Console.WriteLine(Area1.ToSquareKilometers().ToString());
            Console.WriteLine(Area2.ToSquareKilometers().ToString());
            Console.WriteLine(Area3.ToSquareKilometers().ToString());
                </code>
            </example>
            <seealso cref="M:GeoFramework.Area.ToSquareFeet">ToSquareFeet Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareInches">ToSquareInches Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareMeters">ToSquareMeters Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareNauticalMiles">ToSquareNauticalMiles Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareStatuteMiles">ToSquareStatuteMiles Method</seealso>
        </member>
        <member name="M:GeoFramework.Area.ToSquareMeters">
            <returns>A new <strong>Area</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion regardless of the current unit type. You
            may convert from any unit type to any other unit type.
            </remarks>
            <summary>Converts the current measurement into square meters.</summary>
            <example>
                This example converts various three <strong>Area</strong> objects, each with a
                different unit type, into square meters.
                <code lang="VB">
            ' Create Areas of different unit types
            Dim Area1 As New Area(10, AreaUnit.SquareFeet)
            Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
            Dim Area3 As New Area(50, AreaUnit.SquareInches)
            ' Convert the Area measurements to square meters and output the result 
            Debug.WriteLine(Area1.ToSquareMeters().ToString())
            Debug.WriteLine(Area2.ToSquareMeters().ToString())
            Debug.WriteLine(Area3.ToSquareMeters().ToString())
                </code>
            	<code lang="CS">
            // Create Areas of different unit types
            Area Area1 = new Area(10, AreaUnit.SquareFeet);
            Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
            Area Area3 = new Area(50, AreaUnit.SquareInches);
            // Convert the Area measurements to square meters and output the result 
            Console.WriteLine(Area1.ToSquareMeters().ToString());
            Console.WriteLine(Area2.ToSquareMeters().ToString());
            Console.WriteLine(Area3.ToSquareMeters().ToString());
                </code>
            </example>
            <seealso cref="M:GeoFramework.Area.ToSquareFeet">ToSquareFeet Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareInches">ToSquareInches Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareKilometers">ToSquareKilometers Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareNauticalMiles">ToSquareNauticalMiles Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareStatuteMiles">ToSquareStatuteMiles Method</seealso>
        </member>
        <member name="M:GeoFramework.Area.ToSquareNauticalMiles">
            <returns>A new <strong>Area</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion regardless of the current unit type. You
            may convert from any unit type to any other unit type.
            </remarks>
            <summary>Converts the current measurement into square nautical miles.</summary>
            <example>
                This example converts various three <strong>Area</strong> objects, each with a
                different unit type, into square nautical miles.
                <code lang="VB">
            ' Create Areas of different unit types
            Dim Area1 As New Area(10, AreaUnit.SquareFeet)
            Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
            Dim Area3 As New Area(50, AreaUnit.SquareInches)
            ' Convert the Area measurements to square nautical miles and output the result 
            Debug.WriteLine(Area1.ToSquareNauticalMiles().ToString())
            Debug.WriteLine(Area2.ToSquareNauticalMiles().ToString())
            Debug.WriteLine(Area3.ToSquareNauticalMiles().ToString())
                </code>
            	<code lang="CS">
            // Create Areas of different unit types
            Area Area1 = new Area(10, AreaUnit.SquareFeet);
            Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
            Area Area3 = new Area(50, AreaUnit.SquareInches);
            // Convert the Area measurements to square nautical miles and output the result 
            Console.WriteLine(Area1.ToSquareNauticalMiles().ToString());
            Console.WriteLine(Area2.ToSquareNauticalMiles().ToString());
            Console.WriteLine(Area3.ToSquareNauticalMiles().ToString());
                </code>
            </example>
            <seealso cref="M:GeoFramework.Area.ToSquareFeet">ToSquareFeet Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareInches">ToSquareInches Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareKilometers">ToSquareKilometers Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareMeters">ToSquareMeters Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareStatuteMiles">ToSquareStatuteMiles Method</seealso>
        </member>
        <member name="M:GeoFramework.Area.ToSquareStatuteMiles">
            <returns>A new <strong>Area</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion regardless of the current unit type. A
            "statute mile" is frequently referred to as "mile" by itself.
            </remarks>
            <summary>Converts the current measurement into square miles.</summary>
            <example>
                This example converts various three <strong>Area</strong> objects, each with a
                different unit type, into square miles.
                <code lang="VB">
            ' Create Areas of different unit types
            Dim Area1 As New Area(10, AreaUnit.SquareFeet)
            Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
            Dim Area3 As New Area(50, AreaUnit.SquareInches)
            ' Convert the Area measurements to square statute miles and output the result 
            Debug.WriteLine(Area1.ToSquareStatuteMiles().ToString())
            Debug.WriteLine(Area2.ToSquareStatuteMiles().ToString())
            Debug.WriteLine(Area3.ToSquareStatuteMiles().ToString())
                </code>
            	<code lang="CS">
            // Create Areas of different unit types
            Area Area1 = new Area(10, AreaUnit.SquareFeet);
            Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
            Area Area3 = new Area(50, AreaUnit.SquareInches);
            // Convert the Area measurements to square statute miles and output the result 
            Console.WriteLine(Area1.ToSquareStatuteMiles().ToString());
            Console.WriteLine(Area2.ToSquareStatuteMiles().ToString());
            Console.WriteLine(Area3.ToSquareStatuteMiles().ToString());
                </code>
            </example>
            <seealso cref="M:GeoFramework.Area.ToSquareFeet">ToSquareFeet Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareInches">ToSquareInches Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareKilometers">ToSquareKilometers Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareMeters">ToSquareMeters Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareNauticalMiles">ToSquareNauticalMiles Method</seealso>
        </member>
        <member name="M:GeoFramework.Area.ToAcres">
            <summary>Converts the current measurement into acres.</summary>
            <example>
                This example converts various three <strong>Area</strong> objects, each with a
                different unit type, into acres. 
                <code lang="VB" title="[New Example]">
            ' Create Areas of different unit types
            Dim Area1 As New Area(10, AreaUnit.SquareFeet)
            Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
            Dim Area3 As New Area(50, AreaUnit.SquareInches)
            ' Convert the Area measurements to acres and output the result 
            Debug.WriteLine(Area1.ToAcres().ToString())
            Debug.WriteLine(Area2.ToAcres().ToString())
            Debug.WriteLine(Area3.ToAcres().ToString())
                </code>
            	<code lang="CS" title="[New Example]">
            // Create Areas of different unit types
            Area Area1 = new Area(10, AreaUnit.SquareFeet);
            Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
            Area Area3 = new Area(50, AreaUnit.SquareInches);
            // Convert the Area measurements to acres and output the result 
            Console.WriteLine(Area1.ToAcres().ToString());
            Console.WriteLine(Area2.ToAcres().ToString());
            Console.WriteLine(Area3.ToAcres().ToString());
                </code>
            </example>
            <returns>A new <strong>Area</strong> object containing the converted value.</returns>
            <remarks>This method will perform a conversion regardless of the current unit type.</remarks>
        </member>
        <member name="M:GeoFramework.Area.ToSquareCentimeters">
            <summary>Converts the current measurement into square centimeters.</summary>
            <example>
                This example converts various three <strong>Area</strong> objects, each with a
                different unit type, into square centimeters. 
                <code lang="VB" title="[New Example]">
            ' Create Areas of different unit types
            Dim Area1 As New Area(10, AreaUnit.SquareFeet)
            Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
            Dim Area3 As New Area(50, AreaUnit.SquareInches)
            ' Convert the Area measurements to square centimeters and output the result 
            Debug.WriteLine(Area1.ToSquareCentimeters().ToString())
            Debug.WriteLine(Area2.ToSquareCentimeters().ToString())
            Debug.WriteLine(Area3.ToSquareCentimeters().ToString())
                </code>
            	<code lang="CS" title="[New Example]">
            // Create Areas of different unit types
            Area Area1 = new Area(10, AreaUnit.SquareFeet);
            Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
            Area Area3 = new Area(50, AreaUnit.SquareInches);
            // Convert the Area measurements to square centimeters and output the result 
            Console.WriteLine(Area1.ToSquareCentimeters().ToString());
            Console.WriteLine(Area2.ToSquareCentimeters().ToString());
            Console.WriteLine(Area3.ToSquareCentimeters().ToString());
                </code>
            </example>
            <returns>A new <strong>Area</strong> object containing the converted value.</returns>
            <remarks>This method will perform a conversion regardless of the current unit type.</remarks>
        </member>
        <member name="M:GeoFramework.Area.ToImperialUnitType">
            <summary>
            Converts the current instance to an Imperial unit type which minimizes numeric
            value.
            </summary>
            <returns>
            An <strong>Area</strong> converted to Imperial units. (i.e. feet, inches,
            miles)
            </returns>
            <remarks>
            	<para>This method is used to make an area measurement easier to read by choosing
                another unit type. For example, "27,878,400 square feet" would be easier to
                understand as "1 square statute mile." This method converts the current instance to
                Metric unit which brings the <strong>Value</strong> closest to 1, then returns the
                new value. This method will perform a conversion regardless of the current unit
                type.</para>
            </remarks>
            <example>
                This example converts a measurement of 10560 feet into 1 square statute mile using
                the <strong>ToMetricUnitType</strong> method. 
                <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(27878400, AreaUnit.SquareFeet)
            Dim Area2 As Area = Area1.ToImperialUnitType()
            Debug.WriteLine(Area2.ToString())
            ' Output: 1 square statute mile
                </code>
            	<code lang="CS" title="[New Example]">
            Area Area1 = new Area(27878400, AreaUnit.SquareFeet);
            Area Area2 = Area1.ToImperialUnitType();
            Console.WriteLine(Area2.ToString());
            // Output: 1 square statute mile
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.ToMetricUnitType">
            <summary>
            Converts the current instance to a Metric unit type which minimizes numeric
            value.
            </summary>
            <returns>
            An <strong>Area</strong> converted to Metric units. (i.e. centimeter, meter,
            kilometer)
            </returns>
            <remarks>
            This method is used to make an area measurement easier to read by choosing
            another unit type. For example, "0.0002 kilometers" would be easier to read as "2
            meters." This method converts the current instance to Metric unit which brings the
            <strong>Value</strong> closest to 1, then returns the new value. This method will
            perform a conversion regardless of the current unit type.
            </remarks>
            <example>
                This example converts a measurement of 0.0001 kilometers into 1 meter using the
                <strong>ToMetricUnitType</strong> method. 
                <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(0.0001, AreaUnit.SquareKilometers)
            Dim Area2 As Area = Area1.ToMetricUnitType()
            Debug.WriteLine(Area2.ToString())
            ' Output: 1 square meter
                </code>
            	<code lang="CS" title="[New Example]">
            Area Area1 = new Area(0.0001, AreaUnit.SquareKilometers);
            Area Area2 = Area1.ToMetricUnitType();
            Console.WriteLine(Area2.ToString());
            // Output: 1 square meter
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.ToLocalUnitType">
            <summary>
            Converts the current instance to a Metric or Imperial unit type depending on the
            local culture.
            </summary>
            <returns>
            An <strong>Area</strong> converted to Metric or Imperial units, depending on the
            local culture.
            </returns>
            <remarks>
            This method is used to make an area measurement easier to read by choosing
            another unit type. For example, "0.0002 kilometers" would be easier to read as "2
            meters." This method converts the current instance to either a Metric or an Imperial
            unit (depending on the local culture) which brings the <strong>Value</strong> closest
            to 1. This method will perform a conversion regardless of the current unit type.
            </remarks>
            <example>
            See
            <see cref="M:GeoFramework.Area.ToImperialUnitType"><strong>ToImperialUnitType</strong></see> and
            <see cref="M:GeoFramework.Area.ToMetricUnitType"><strong>ToMetricUnitType</strong></see> methods
            for examples.
            </example>
        </member>
        <member name="M:GeoFramework.Area.ToUnitType(GeoFramework.AreaUnit)">
            <summary>Converts the current instance into the specified unit type.</summary>
            <returns>A new <strong>Area</strong> object containing the converted value.</returns>
            <remarks>This method will perform a conversion regardless of the current unit type.</remarks>
            <example>
                This example uses the <strong>ToUnitType</strong> method to convert an area
                measurement of 27,878,400 square feet into 1 square statute mile.
                <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(27878400, AreaUnit.SquareFeet)
            Dim Area2 As Area = Area1.ToUnitType(AreaUnit.SquareStatuteMiles)
            Debug.WriteLine(Area2.ToString())
            ' Output: 1 square statute mile
                </code>
            	<code lang="CS" title="[New Example]">
            Area Area1 As New Area(27878400, AreaUnit.SquareFeet);
            Area Area2 As Area = Area1.ToUnitType(AreaUnit.SquareStatuteMiles);
            Console.WriteLine(Area2.ToString());
            // Output: 1 square statute mile
                </code>
            </example>
            <param name="value">An <strong>AreaUnit</strong> value specifying the unit type to convert to.</param>
        </member>
        <member name="M:GeoFramework.Area.ToString(System.String)">
            <summary>
            Outputs the current instance as a string using the specified format.
            </summary>
            <returns>A <strong>String</strong> containing the Area in the specified format.</returns>
            <remarks>This method allows a custom format to be applied to the ToString method.  Numeric formats
            will be adjusted to the machine's local UI culture.</remarks>
            <example>
                This example uses the ToString method to populate a TextBox with a Area measurement
                using a custom format. 
                <code lang="VB">
            ' Declare a area of 75 square statute miles
            Dim MyArea As New Area(75, AreaUnit.SquareStatuteMiles)
            ' Output the result using the default format
            Debug.WriteLine(MyArea.ToString("v.v uuu"))
            ' Output: 75.0 square statute miles
                </code>
            	<code lang="CS">
            // Declare a area of 75 square statute miles
            Area MyArea As New Area(75, AreaUnit.SquareStatuteMiles);
            // Output the result using the default format
            Console.WriteLine(MyArea.ToString("v.v uuu"));
            // Output: 75.0 square statute miles
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.Add(GeoFramework.Area)">
            <summary>Adds the specified area to the current instance.</summary>
            <returns>A new <strong>Area</strong> structure containing the summed values.</returns>
            <remarks>
            This method can add any <strong>Area</strong> object to the current instance. If
            the unit type of the <strong>Value</strong> parameter does not match that of the
            current instance, the value is converted to the unit type of the current instance
            before adding.
            </remarks>
            <example>
                This example demonstrates how two areas of different unit types can be safely added
                together. A value of 144 square inches (which is the same as one square foot) is
                added to one square foot, producing two square feet. 
                <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(1, AreaUnit.SquareFeet)
            Dim Area2 As New Area(144, AreaUnit.SquareInches)
            Dim Area3 As Area = Area1.Add(Area2)
            Debug.WriteLine(Area3.ToString())
            ' Output: 2 square feet
                </code>
            	<code lang="CS" title="[New Example]">
            Area Area1 = new Area(1, AreaUnit.SquareFeet);
            Area Area2 = new Area(144, AreaUnit.SquareInches);
            Area Area3 = Area1.Add(Area2);
            Console.WriteLine(Area3.ToString());
            // Output: 2 square feet
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.Subtract(GeoFramework.Area)">
            <summary>Subtracts the specified area from the current instance.</summary>
            <returns>A new <strong>Area</strong> structure containing the new value.</returns>
            <remarks>
            This method will subtract any <strong>Area</strong> object from the current
            instance. If the unit type of the <strong>Value</strong> parameter does not match that
            of the current instance, the value is converted to the unit type of the current
            instance before subtracting.
            </remarks>
            <example>
                This example demonstrates how two areas of different unit types can be safely
                subtracted. A value of 144 square inches (which is the same as one square foot) is
                subtracted from one square foot, producing a result of zero. 
                <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(1, AreaUnit.SquareFeet)
            Dim Area2 As New Area(144, AreaUnit.SquareInches)
            Dim Area3 As Area = Area1.Subtract(Area2)
            Debug.WriteLine(Area3.ToString())
            ' Output: 0 square feet
                </code>
            	<code lang="CS" title="[New Example]">
            Area Area1 = new Area(1, AreaUnit.SquareFeet);
            Area Area2 = new Area(144, AreaUnit.SquareInches);
            Area Area3 = Area1.Subtract(Area2);
            Console.WriteLine(Area3.ToString());
            // Output: 0 square feet
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.Multiply(GeoFramework.Area)">
            <remarks>
            This method will multiply any <strong>Area</strong> object from the current
            instance. If the unit type of the <strong>Value</strong> parameter does not match that
            of the current instance, the value is converted to the unit type of the current
            instance before multiplication.
            </remarks>
            <summary>Multiplies the specified area with the current instance.</summary>
            <returns>
            A new <strong>Area</strong> structure containing the product of the two
            values.
            </returns>
            <example>
                This example demonstrates how two areas can be multiplied together. A value of 50
                square inches is multiplied by two square inches, producing a result of 100 square
                inches. 
                <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(50, AreaUnit.SquareInches)
            Dim Area2 As New Area(2, AreaUnit.SquareInches)
            Dim Area3 As Area = Area1.Multiply(Area2)
            Debug.WriteLine(Area3.ToString())
            ' Output: 100 square inches
                </code>
            	<code lang="CS" title="[New Example]">
            Area Area1 = new Area(50, AreaUnit.SquareInches);
            Area Area2 = new Area(2, AreaUnit.SquareInches);
            Area Area3 = Area1.Multiply(Area2);
            Console.WriteLine(Area3.ToString());
            // Output: 100 square inches
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.Divide(GeoFramework.Area)">
            <remarks>
            This method will devide the current instance by any <strong>Area</strong> object.
            If the unit type of the <strong>Value</strong> parameter does not match that of the
            current instance, the value is converted to the unit type of the current instance
            before devision.
            </remarks>
            <summary>Divides the current instance by the specified area.</summary>
            <returns>A new <strong>Area</strong> structure containing the new value.</returns>
            <example>
                This example demonstrates how two areas can be divided. A value of 100 square
                inches is divided by two square inches, producing a result of 50 square inches. 
                <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(100, AreaUnit.SquareInches)
            Dim Area2 As New Area(2, AreaUnit.SquareInches)
            Dim Area3 As Area = Area1.Divide(Area2)
            Debug.WriteLine(Area3.ToString())
            ' Output: 50 square inches
                </code>
            	<code lang="CS" title="[New Example]">
            Area Area1 = new Area(100, AreaUnit.SquareInches);
            Area Area2 = new Area(2, AreaUnit.SquareInches);
            Area Area3 = Area1.Divide(Area2);
            Debug.WriteLine(Area3.ToString());
            // Output: 50 square inches
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.Increment">
            <summary>Returns the current instance increased by one.</summary>
            <remarks>
            	<para>This method increases the <strong>Value</strong> property by 1.0, returned as
                a new instance. The <strong>Units</strong> property is preserved.</para>
            	<para><font color="red"><font color="red">NOTE: Since the <strong>Area</strong>
                class is immutable, this method will not modify the current
                instance.</font></font></para>
            </remarks>
            <returns>A new <strong>Area</strong> structure containing the new value.</returns>
            <example>
                This example uses the <strong>Increment</strong> method to increase an area's
                value. It also demonstrates the subtle error which can be caused if
                <strong>Increment</strong> is called while ignoring the return value. 
                <code lang="VB" title="[New Example]">
            ' Correct use of Increment
            Dim Area1 As New Area(1, AreaUnit.SquareMeters)
            Area1 = Area1.Increment()
             
            ' Incorrect use of Increment
            Dim Area1 As New Area(1, AreaUnit.SquareMeters)
            Area1.Increment()
            ' NOTE: Area1 will still be 1 square meter, not 2!
                </code>
            	<code lang="CS" title="[New Example]">
            // Correct use of Increment
            Area Area1 = new Area(1, AreaUnit.SquareMeters);
            Area1 = Area1.Increment();
             
            // Incorrect use of Increment
            Area Area1 = new Area(1, AreaUnit.SquareMeters);
            Area1.Increment();
            // NOTE: Area1 will still be 1 square meter, not 2!
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.Decrement">
            <remarks>
            	<para>This method decreases the <strong>Value</strong> property by 1.0, returned as
                a new instance. The <strong>Units</strong> property is preserved.</para>
            	<para><font color="red">NOTE: Since the <strong>Area</strong> class is immutable,
                this method will not modify the current instance.</font></para>
            </remarks>
            <summary>Returns the current instance decreased by one.</summary>
            <returns>A new <strong>Area</strong> structure containing the new value.</returns>
            <example>
                This example uses the <strong>Decrement</strong> method to decrease an area's
                value. It also demonstrates the subtle error which can be caused if
                <strong>Decrement</strong> is called while ignoring the return value. 
                <code lang="VB" title="[New Example]">
            ' Correct use of Increment
            Dim Area1 As New Area(1, AreaUnit.SquareMeters)
            Area1 = Area1.Increment()
             
            ' Incorrect use of Increment
            Dim Area1 As New Area(1, AreaUnit.SquareMeters)
            Area1.Increment()
            ' NOTE: Area1 will still be 1 square meter, not 0!
                </code>
            	<code lang="CS" title="[New Example]">
            // Correct use of Increment
            Area Area1 = new Area(1, AreaUnit.SquareMeters);
            Area1 = Area1.Decrement();
             
            // Incorrect use of Increment
            Area Area1 = new Area(1, AreaUnit.SquareMeters);
            Area1.Decrement();
            // NOTE: Area1 will still be 1 square meter, not 0!
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.IsLessThan(GeoFramework.Area)">
            <summary>Indicates if the current instance is smaller than the specified value.</summary>
            <remarks>
            If the <strong>Value</strong> parameter's unit type does not match the current
            instance, it will be converted to the current instance's unit type before performing
            the comparison.
            </remarks>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than the <strong>Value</strong> parameter.
            </returns>
            <param name="value">An <strong>Area</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Area.IsLessThanOrEqualTo(GeoFramework.Area)">
            <summary>
            Indicates if the current instance is smaller than or equal to the specified
            value.
            </summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than or equal to the <strong>Value</strong> parameter.
            </returns>
            <remarks>
            If the <strong>Value</strong> parameter's unit type does not match the current
            instance, it will be converted to the current instance's unit type before performing
            the comparison.
            </remarks>
            <param name="value">An <strong>Area</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Area.IsGreaterThan(GeoFramework.Area)">
            <summary>Indicates if the current instance is larger than the specified value.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            larger than the <strong>Value</strong> parameter.
            </returns>
            <remarks>
            If the <strong>Value</strong> parameter's unit type does not match the current
            instance, it will be converted to the current instance's unit type before performing
            the comparison.
            </remarks>
            <param name="value">An <strong>Area</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Area.IsGreaterThanOrEqualTo(GeoFramework.Area)">
            <summary>
            Indicates if the current instance is larger than or equal to the specified
            value.
            </summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            larger than or equal to the <strong>Value</strong> parameter.
            </returns>
            <remarks>
            If the <strong>Value</strong> parameter's unit type does not match the current
            instance, it will be converted to the current instance's unit type before performing
            the comparison.
            </remarks>
            <param name="value">An <strong>Area</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Area.Parse(System.String)">
            <summary>Creates a new instance using the specified string.</summary>
            <remarks>
            This powerful method is typically used to convert a string-based Area
            measurement, such as one entered by a user or read from a file, into a
            <strong>Area</strong> object. This method will accept any output created via the
            <see cref="M:GeoFramework.Area.ToString(System.String)">ToString</see> method.
            </remarks>
            <returns>
            A new Area object containing the parsed <see cref="P:GeoFramework.Area.Value">value</see> and
            <see cref="P:GeoFramework.Area.Units">unit</see> type.
            </returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Parse method requires a valid Area measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">1. The numeric portion of the Area measurement was not recognized.<br/>
            2. The Area unit type was not recognized or not specified.</exception>
            <example>
                This example demonstrates how the Parse method can convert several string formats
                into a Area object. 
                <code lang="VB">
            Dim NewArea As Area
            ' Create a Area of 50 kilometers
            NewArea = Area.Parse("50 km")
            ' Create a Area of 14,387 miles, then convert it into square inches
            NewArea = Area.Parse("14,387 statute miles").ToSquareInches()
            ' Parse an untrimmed measurement into 50 feet
            NewArea = Area.Parse("    50 '       ")
                </code>
            	<code lang="CS">
            Area NewArea;
            // Create a Area of 50 kilometers
            NewArea = Area.Parse("50 km");
            // Create a Area of 14,387 miles, then convert it into square inches
            NewArea = Area.Parse("14,387 statute miles").ToInches();
            // Parse an untrimmed measurement into 50 feet
            NewArea = Area.Parse("    50 '       ");
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>Creates a new instance using the specified string and culture.</summary>
            <remarks>
            This powerful method is typically used to convert a string-based Area
            measurement, such as one entered by a user or read from a file, into a
            <strong>Area</strong> object. This method will accept any output created via the
            <see cref="M:GeoFramework.Area.ToString(System.String)">ToString</see> method.
            </remarks>
            <example>
            	<code lang="VB" title="[New Example]">
            Dim NewArea As Area
            ' Create a Area of 50 kilometers
            NewArea = Area.Parse("50 km", CultureInfo.CurrentCulture)
            ' Create a Area of 14,387 miles, then convert it into inches
            NewArea = Area.Parse("14,387 statute miles", CultureInfo.CurrentCulture).ToSquareInches()
            ' Parse an untrimmed measurement into 50 feet
            NewArea = Area.Parse("    50 '       ", CultureInfo.CurrentCulture)
                </code>
            	<code lang="CS" title="[New Example]">
            Area NewArea;
            // Create a Area of 50 kilometers
            NewArea = Area.Parse("50 km", CultureInfo.CurrentCulture);
            // Create a Area of 14,387 miles, then convert it into square inches
            NewArea = Area.Parse("14,387 statute miles", CultureInfo.CurrentCulture).ToInches();
            // Parse an untrimmed measurement into 50 feet
            NewArea = Area.Parse("    50 '       ", CultureInfo.CurrentCulture);
                </code>
            </example>
            <param name="value">A <strong>String</strong> describing an area measurement.</param>
            <param name="culture">A <strong>CultureInfo</strong> object specifying which numeric and text formats to use during parsing.</param>
        </member>
        <member name="M:GeoFramework.Area.Random">
            <summary>Returns a random distance between 0 and 1,000 square meters.</summary>
            <returns>A <strong>Distance</strong> containing a random value, converted to local units.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GeoFramework.Area.Random(System.Random)" -->
        <member name="M:GeoFramework.Area.Equals(System.Object)">
            <summary>Compares the current instance with the specified object.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the two objects have the
            same value.
            </returns>
            <param name="obj">An <strong>Area</strong> object to compare with.</param>
        </member>
        <member name="M:GeoFramework.Area.GetHashCode">
            <summary>Returns a unique code for the current instance.</summary>
            <returns>
            An <strong>Integer</strong> representing a unique code for the current
            instance.
            </returns>
            <remarks>
            Since the <strong>Area</strong> class is immutable, this property may be used
            safely with hash tables.
            </remarks>
        </member>
        <member name="M:GeoFramework.Area.ToString">
            <summary>
            Outputs the current instance as a string using the default format.
            </summary>
            <returns>A <strong>String</strong> containing the current Area in the default format.</returns>
            <remarks>
            The default format used is "<strong>v uu</strong>" where <strong>v</strong>
            represents the numerical portion of the area and <strong>uu</strong> is the unit
            type.
            </remarks>
            <example>
                This example uses the ToString method to populate a TextBox with a Area
                measurement. 
                <code lang="VB">
            ' Declare a area of 75 square statute miles
            Dim MyArea As New Area(75, AreaUnit.SquareStatuteMiles)
            ' Output the result using the default format
            Debug.WriteLine(MyArea.ToString())
            ' Output: 75 sq. statute miles
                </code>
            	<code lang="CS">
            // Declare a area of 75 square statute miles
            Area MyArea = nre Area(75, AreaUnit.SquareStatuteMiles);
            // Output the result using the default format
            Console.WriteLine(MyArea.ToString());
            // Output: 75 sq. statute miles
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.CompareTo(GeoFramework.Area)">
            <summary>Compares the current instance to the specified area.</summary>
            <returns>
            An <strong>Integer</strong>: 0 if the object's values are equivalent, -1 if the
            current instance is smaller, or 1 if the current instance is larger.
            </returns>
            <remarks>
            If the <strong>Value</strong> parameter's unit type does not match the current
            instance, it will be converted to the current instance's unit type before performing
            the comparison.
            </remarks>
            <param name="value">An <strong>Area</strong> object to compare with.</param>
        </member>
        <member name="M:GeoFramework.Area.Equals(GeoFramework.Area)">
            <summary>
            Compares the current instance to the specified <strong>Area</strong>
            object.
            </summary>
            <returns>A <strong>Boolean</strong>, True if the values are equivalent.</returns>
            <remarks>
            	<para>This method will compare the <em>value</em> of the current instance against
                the <strong>Value</strong> parameter. If the <strong>Value</strong> parameter's
                unit type does not match the current instance, it will be converted to the current
                instance's unit type before performing the comparison.</para>
            	<para><em>NOTE: This method compares objects by value, not by
                reference.</em></para>
            </remarks>
            <param name="value">A <strong>Area</strong> object to compare with.</param>
        </member>
        <member name="M:GeoFramework.Area.Equals(GeoFramework.Area,System.Int32)">
            <summary>
            Compares the current instance to the specified <strong>Area</strong>
            object.
            </summary>
            <returns>A <strong>Boolean</strong>, True if the values are equivalent.</returns>
            <remarks>
            	<para>This method will compare the <em>value</em> of the current instance against
                the <strong>Value</strong> parameter. If the <strong>Value</strong> parameter's
                unit type does not match the current instance, it will be converted to the current
                instance's unit type before performing the comparison.</para>
            	<para><em>NOTE: This method compares objects by value, not by
                reference.</em></para>
            </remarks>
            <param name="value">A <strong>Area</strong> object to compare with.</param>
        </member>
        <member name="M:GeoFramework.Area.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the current instance as a string using the specified format and local culture.
            </summary>
            <returns>A <strong>String</strong> containing the Area in the specified format.</returns>
            <remarks>This method allows a custom format to be applied to the ToString method.  Numeric formats
            will be adjusted to the machine's local UI culture.</remarks>
            <example>
                This example uses the ToString method to populate a TextBox with a Area measurement
                using a custom format and culture information. 
                <code lang="VB">
            ' Declare a area of 75 square statute miles
            Dim MyArea As New Area(75, AreaUnit.SquareStatuteMiles)
            ' Output the result using the default format
            Debug.WriteLine(MyArea.ToString("v.v uuu", CultureInfo.CurrentCulture))
            ' Output: 75.0 square statute miles
                </code>
            	<code lang="CS">
            // Declare a area of 75 square statute miles
            Area MyArea As New Area(75, AreaUnit.SquareStatuteMiles);
            // Output the result using the default format
            Console.WriteLine(MyArea.ToString("v.v uuu", CultureInfo.CurrentCulture));
            // Output: 75.0 square statute miles
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Area.Units">
            <summary>Returns the units portion of an area measurement.</summary>
            <value>An <strong>AreaUnit</strong> value. Default is <strong>Meters</strong>.</value>
            <remarks>
            	<para>Each area measurement consists of a numeric value paired with a unit type
                describing the value. It is not possible to create an area measurement without also
                specifying a value.</para>
            </remarks>
            <seealso cref="P:GeoFramework.Area.Value">Value Property</seealso>
        </member>
        <member name="P:GeoFramework.Area.Value">
            <summary>Returns the numeric portion of an area measurement.</summary>
            <value>A <strong>Double</strong> value.</value>
            <remarks>
            This property is paired with the <strong>Units</strong> property to form a
            complete area measurement.
            </remarks>
            <seealso cref="P:GeoFramework.Area.Units">Units Property</seealso>
        </member>
        <member name="P:GeoFramework.Area.IsEmpty">
            <summary>Indicates if the value of the current instance is zero.</summary>
            <value>
            A <strong>Boolean</strong>, <strong>True</strong> if the <strong>Value</strong>
            property is zero.
            </value>
        </member>
        <member name="P:GeoFramework.Area.IsMetric">
            <summary>Indicates if the current instance is using a Metric unit.</summary>
            <value>
            A <strong>Boolean</strong>, <strong>True</strong> if the <strong>Units</strong>
            property is <strong>SquareCentimeters</strong>, <strong>SquareMeters</strong> or
            <strong>SquareKilometers</strong>.
            </value>
            <remarks>
            This property is typically used to see if an area measurement is in a unit type
            used by a specific culture. Area measurements can be adjusted to either Metric or
            Imperial units using the <strong>ToMetricUnitType</strong> and
            <strong>ToImperialUnitType</strong> methods.
            </remarks>
        </member>
        <member name="P:GeoFramework.Area.IsInfinity">
            <summary>Indicates if the current instance represents an infinite value.</summary>
            <value>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance
            represents an infinite value.
            </value>
        </member>
        <member name="T:GeoFramework.AreaUnit">
            <summary>Indicates the unit of measure for area measurements.</summary>
            <remarks>
            This enumeration is most frequently used by the Units property of the Area
            structure to describe an area measurement.
            </remarks>
            <seealso cref="P:GeoFramework.Area.Value">Value Property (Area Class)</seealso>
            <seealso cref="P:GeoFramework.Area.Units">Units Property (Area Class)</seealso>
            <example>
                This example uses the <strong>AreaUnit</strong> enumeration to create a new
                <strong>Area</strong> object.
                <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(1, AreaUnit.SquareKilometers)
                </code>
            	<code lang="CS" title="[New Example]">
            Area Area1 = new Area(1, AreaUnit.SquareKilometers);
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.AreaUnit.SquareKilometers">
            <summary>Metric System. Kilometers (thousands of meters).</summary>
        </member>
        <member name="F:GeoFramework.AreaUnit.SquareMeters">
            <summary>Metric System. 1/1000th of a square kilometer.</summary>
        </member>
        <member name="F:GeoFramework.AreaUnit.SquareCentimeters">
            <summary>Metric System. 1/100th of a square meter.</summary>
        </member>
        <member name="F:GeoFramework.AreaUnit.SquareStatuteMiles">
            <summary>Imperial System. A statute mile, most often referred to just as "mile."</summary>
        </member>
        <member name="F:GeoFramework.AreaUnit.SquareNauticalMiles">
            <summary>Nautical miles, also known as "sea miles".</summary>
        </member>
        <member name="F:GeoFramework.AreaUnit.SquareFeet">
            <summary>Imperial System. Feet.</summary>
        </member>
        <member name="F:GeoFramework.AreaUnit.SquareInches">
            <summary>Imperial System. Inches.</summary>
        </member>
        <member name="F:GeoFramework.AreaUnit.Acres">
            <summary>Imperial System. Inches.</summary>
        </member>
        <member name="T:GeoFramework.Speed">
            <summary>Represents a measurement of an object's rate of travel.</summary>
            <remarks>
            	<para>This structure is used to measure the rate at which something moves in a
                given period of time. This structure supports several different unit types in both
                Imperial and Metric measurement systems. A speed is measured in two parts: a
                numeric value and a label indicating the units of measurement.</para>
            	<para>Speed measurements can be converted to their equivalent values in other unit
                types through the use of several conversion methods such as ToMetersPerSecond,
                <strong>ToFeetPerSecond</strong>, <strong>ToKilometersPerHour</strong>, and others.
                Three methods, <strong>ToImperialUnitType</strong>,
                <strong>ToMetricUnitType</strong> and <strong>ToLocalUnitType</strong> also exist
                for converting a speed measurement to the most readable unit type (i.e. 1 meter vs.
                0.0001 kilometers) in any local culture.</para>
            	<para>This structure is a <em>GeoFrameworks</em> "parseable type" whose value can
                be freely converted to and from <strong>String</strong> objects via the
                <strong>ToString</strong> and <strong>Parse</strong> methods.</para>
            	<para>Instances of this structure are guaranteed to be thread-safe because it is
                immutable (its properties can only be modified via constructors).</para>
            </remarks>
        </member>
        <member name="F:GeoFramework.Speed.Empty">
            <remarks>
            The speed of light is used to determine distances such as the meter, which is
            defined as the distance travelled by light for 1/299792458th of a second.
            </remarks>
            <summary>Represents a speed of zero.</summary>
        </member>
        <member name="F:GeoFramework.Speed.AtRest">
            <summary>Represents a speed of zero.</summary>
        </member>
        <member name="F:GeoFramework.Speed.SpeedOfLight">
            <summary>Returns the rate of travel of light in a vacuum.</summary>
        </member>
        <member name="F:GeoFramework.Speed.Maximum">
            <summary>Represents the largest possible speed.</summary>
        </member>
        <member name="F:GeoFramework.Speed.Minimum">
            <summary>Represents the smallest possible speed.</summary>
        </member>
        <member name="F:GeoFramework.Speed.SpeedOfSoundAtSeaLevel">
            <summary>Returns the rate of travel of sound waves at sea level.</summary>
        </member>
        <member name="F:GeoFramework.Speed.Infinity">
            <summary>Represents an infinite speed.</summary>
        </member>
        <member name="F:GeoFramework.Speed.Invalid">
            <summary>
            Represents an invalid or unspecified value.
            </summary>
        </member>
        <member name="M:GeoFramework.Speed.#ctor(System.Double,GeoFramework.SpeedUnit)">
            <summary>Creates a new instance using the specified value and unit type.</summary>
            <remarks>This is the most frequently used constructor of the speed class.</remarks>
            <param name="value">A <strong>Double</strong> containing a speed measurement.</param>
            <param name="units">A <strong>SpeedUnit</strong> value describing the value's type.</param>
        </member>
        <member name="M:GeoFramework.Speed.#ctor(System.String)">
            <param name="value">
             <para>A <strong>String</strong> in any of the following formats (or a variation
             depending on the local culture):</para>
            
             <para>
            	 <table cellspacing="0" cols="4" cellpadding="2" width="100%">
            		 <tbody>
            			 <tr>
            				 <td>vv uu</td>
            				 <td>vv.v uu</td>
            				 <td>vvuu</td>
            			 </tr>
            		 </tbody>
            	 </table>
             </para>
            
             <para>Where <strong>vv.v</strong> indicates a numeric value, and uu is any of the
             following case-insensitive units:</para>
            
             <para>
            	 <table cellspacing="0" cols="4" cellpadding="2" width="100%">
            		 <tbody>
            			 <tr>
            				 <td>FT/S</td>
            				 <td>FT/SEC</td>
            				 <td>FEET PER SECOND</td>
            				 <td>FEET PER SEC</td>
            			 </tr>
            			 <tr>
            				 <td>FEET/SEC</td>
            				 <td>km/h</td>
            				 <td>KM/H</td>
            				 <td>KM/HR</td>
            			 </tr>
            			 <tr>
            				 <td>KILOMETERS/HOUR</td>
            				 <td>KM/S</td>
            				 <td>KM/SEC</td>
            				 <td>KM/SECOND</td>
            			 </tr>
            			 <tr>
            				 <td>KNOT</td>
            				 <td>KNOTS</td>
            				 <td>KTS</td>
            				 <td>M/S</td>
            			 </tr>
            			 <tr>
            				 <td>M/SEC</td>
            				 <td>M/SECOND</td>
            				 <td>MPH</td>
            				 <td>MI/HR</td>
            			 </tr>
            			 <tr>
            				 <td>MILES/HOUR</td>
            				 <td></td>
            				 <td></td>
            				 <td></td>
            			 </tr>
            		 </tbody>
            	 </table>
             </para>
            
             <para><em><font size="2">To request additional unit types, please send feedback by
             clicking the link at the bottom of this page.</font></em></para>
            </param>
            <remarks>
            This powerful method is designed to simplify the process of parsing values read
            from a data store or typed in by the user.
            </remarks>
        </member>
        <member name="M:GeoFramework.Speed.Clone">
            <summary>Returns a copy of the current instance.</summary>
        </member>
        <member name="M:GeoFramework.Speed.Round(System.Int32)">
            <summary>
            Returns a new instance rounded to the specified number of digits.
            </summary>
            <param name="decimals">An <strong>Integer</strong> specifying the number of digits to round off to.</param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Speed.ToFeetPerSecond">
            <summary>Returns the current instance converted to feet per second.</summary>
            <remarks>The measurement is converted regardless of its current unit type.</remarks>
        </member>
        <member name="M:GeoFramework.Speed.ToKilometersPerHour">
            <remarks>The measurement is converted regardless of its current unit type.</remarks>
            <summary>Converts the current measurement into kilometers per hour.</summary>
        </member>
        <member name="M:GeoFramework.Speed.ToKilometersPerSecond">
            <remarks>The measurement is converted regardless of its current unit type.</remarks>
            <summary>Converts the current measurement into kilometers per second.</summary>
        </member>
        <member name="M:GeoFramework.Speed.ToKnots">
            <remarks>The measurement is converted regardless of its current unit type.</remarks>
            <summary>Returns the current instance converted to knots.</summary>
        </member>
        <member name="M:GeoFramework.Speed.ToMetersPerSecond">
            <remarks>The measurement is converted regardless of its current unit type.</remarks>
            <summary>Returns the current instance converted to meters per second.</summary>
        </member>
        <member name="M:GeoFramework.Speed.ToStatuteMilesPerHour">
            <remarks>The measurement is converted regardless of its current unit type.</remarks>
            <summary>Returns the current instance converted to miles per hours (MPH).</summary>
        </member>
        <member name="M:GeoFramework.Speed.ToUnitType(GeoFramework.SpeedUnit)">
            <summary>Returns the current instance converted to the specified unit type.</summary>
        </member>
        <member name="M:GeoFramework.Speed.ToImperialUnitType">
            <summary>
            Returns the current instance converted to the most readable Imperial unit
            type.
            </summary>
            <returns>A <strong>Speed</strong> converted to the chosen unit type.</returns>
            <remarks>When a Speed becomes smaller, it may make more sense to the 
            user to be expressed in a smaller unit type.  For example, a Speed of
            0.001 kilometers might be better expressed as 1 meter.  This method will
            determine the smallest Imperial unit type.</remarks>
        </member>
        <member name="M:GeoFramework.Speed.ToMetricUnitType">
            <summary>
            Returns the current instance converted to the most readable Metric unit
            type.
            </summary>
            <returns>A <strong>Speed</strong> converted to the chosen unit type.</returns>
            <remarks>When a Speed becomes smaller, it may make more sense to the 
            user to be expressed in a smaller unit type.  For example, a Speed of
            0.001 kilometers per second might be better expressed as 1 meter per second.  This method will
            determine the smallest metric unit type.</remarks>
        </member>
        <member name="M:GeoFramework.Speed.ToLocalUnitType">
            <returns>A <strong>Speed</strong> converted to the chosen unit type.</returns>
            <remarks>When a Speed becomes smaller, it may make more sense to the 
            user to be expressed in a smaller unit type.  For example, a Speed of
            0.001 kilometers might be better expressed as 1 meter.  This method will
            find the smallest unit type and convert the unit to the user's local
            numeric system (Imperial or Metric).</remarks>
            <summary>
            Returns the current instance converted to the most readable Imperial or Metric
            unit type depending on the local culture.
            </summary>
        </member>
        <member name="M:GeoFramework.Speed.ToString(System.String)">
            <summary>
            Outputs the speed measurement as a formatted string using the specified
            format.
            </summary>
        </member>
        <member name="M:GeoFramework.Speed.ToDistance(System.TimeSpan)">
            <summary>
            Returns the total distance traveled at the current speed for the specified
            time.
            </summary>
            <returns>A <strong>Distance</strong> representing the distance travelled at
            the current speed for the specified length of time.</returns>
        </member>
        <member name="M:GeoFramework.Speed.Equals(System.Object)">
            <summary>
            Compares the current instance to the specified arbitrary value.
            </summary>
            <param name="obj">An <strong>Object</strong> representing a value to compare.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the values are equivalent.</returns>
        </member>
        <member name="M:GeoFramework.Speed.GetHashCode">
            <summary>Returns a unique code for the current instance used in hash tables.</summary>
        </member>
        <member name="M:GeoFramework.Speed.ToString">
            <summary>Outputs the speed measurement as a formatted string.</summary>
        </member>
        <member name="M:GeoFramework.Speed.Parse(System.String)">
            <summary>Creates a speed measurement based on a string value.</summary>
            <param name="value">
             <para>A <strong>String</strong> in any of the following formats (or variation
             depending on the local culture):</para>
            
             <para>
            	 <table cellspacing="0" cols="4" cellpadding="2" width="100%">
            		 <tbody>
            			 <tr>
            				 <td>vu</td>
            
            				 <td>vv.vu</td>
            
            				 <td>v u</td>
            			 </tr>
            		 </tbody>
            	 </table>
             </para>
            
             <para>where <strong>vv.v</strong> is a decimal value and <strong>u</strong> is a
             unit type made from words in the following list:</para>
            
             <para>
            	 <table cellspacing="0" cols="3" cellpadding="2" width="100%">
            		 <tbody>
            			 <tr>
            				 <td>FEET</td>
            
            				 <td>FOOT</td>
            
            				 <td>METER</td>
            			 </tr>
            
            			 <tr>
            				 <td>METERS</td>
            
            				 <td>METRE</td>
            
            				 <td>METRES</td>
            			 </tr>
            
            			 <tr>
            				 <td>KILOMETER</td>
            
            				 <td>KILOMETRE</td>
            
            				 <td>KILOMETERS</td>
            			 </tr>
            
            			 <tr>
            				 <td>KILOMETRES</td>
            
            				 <td>KNOT</td>
            
            				 <td>KNOTS</td>
            			 </tr>
            
            			 <tr>
            				 <td>MILE</td>
            
            				 <td>MILES</td>
            
            				 <td>STATUTE MILE</td>
            			 </tr>
            
            			 <tr>
            				 <td>STATUTE MILES</td>
            
            				 <td>F</td>
            
            				 <td>FT</td>
            			 </tr>
            
            			 <tr>
            				 <td>M</td>
            
            				 <td>KM</td>
            
            				 <td>K</td>
            			 </tr>
            
            			 <tr>
            				 <td>PER</td>
            
            				 <td>-PER-</td>
            
            				 <td>/</td>
            			 </tr>
            
            			 <tr>
            				 <td>SECOND</td>
            
            				 <td>SEC</td>
            
            				 <td>S</td>
            			 </tr>
            
            			 <tr>
            				 <td>HOUR</td>
            
            				 <td>HR</td>
            
            				 <td>H</td>
            			 </tr>
            		 </tbody>
            	 </table>
             </para>
            
             <para>For example, "12 miles per hour" is acceptable because the words "miles,"
             "per," and "hour" are found in the above list. Some combinations are not supported,
             such as "feet/hour." The word combination should look similar to a value from the
             
            <see cref="T:GeoFramework.SpeedUnit">SpeedUnit</see> enumeration.</para>
            </param>
            <remarks>
            This powerful method simplifies the process of processing values read from a data
            store or entered via the user. This method even supports some natural language
            processing ability by understanding words (see list above). This method can parse any
            value created via the ToString method.
            </remarks>
            <returns>A new <strong>Speed</strong> object with the specified value and 
            units.</returns>
        </member>
        <member name="M:GeoFramework.Speed.Random">
            <summary>Returns a random distance between 0 and 200 kilometers per hour.</summary>
            <returns>A <strong>Distance</strong> containing a random value, converted to local units.</returns>
        </member>
        <member name="M:GeoFramework.Speed.Random(System.Random)">
            <summary>Returns a random distance between 0 and 200 kilometers per hour.</summary>
            <returns>A <strong>Distance</strong> containing a random value, converted to local units.</returns>
            <param name="generator">A <strong>Random</strong> object used t ogenerate random values.</param>
            <param name="seed">An <strong>Integer</strong> passed to the <strong>Random</strong> class as a
            random number seed.
            </param>
        </member>
        <member name="M:GeoFramework.Speed.Increment">
            <summary>Returns the current instance increased by one.</summary>
        </member>
        <member name="M:GeoFramework.Speed.Decrement">
            <summary>Returns the current instance decreased by one.</summary>
        </member>
        <member name="M:GeoFramework.Speed.IsLessThan(GeoFramework.Speed)">
            <summary>Indicates if the current instance is smaller than the specified speed.</summary>
        </member>
        <member name="M:GeoFramework.Speed.IsLessThanOrEqualTo(GeoFramework.Speed)">
            <summary>
            Indicates if the current instance is smaller or equivalent to than the specified
            speed.
            </summary>
        </member>
        <member name="M:GeoFramework.Speed.IsGreaterThan(GeoFramework.Speed)">
            <summary>Indicates if the current instance is larger than the specified speed.</summary>
        </member>
        <member name="M:GeoFramework.Speed.IsGreaterThanOrEqualTo(GeoFramework.Speed)">
            <summary>
            Indicates if the current instance is larger or equivalent to than the specified
            speed.
            </summary>
        </member>
        <member name="M:GeoFramework.Speed.CompareTo(GeoFramework.Speed)">
            <summary>Compares the current instance to the specified speed.</summary>
        </member>
        <member name="M:GeoFramework.Speed.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the speed measurement as a formatted string using the specified format
            and culture information.
            </summary>
        </member>
        <member name="P:GeoFramework.Speed.Value">
            <summary>Returns the numeric portion of the speed measurement.</summary>
            <remarks>
            This property is combined with the
            <see cref="P:GeoFramework.Speed.Units">Units</see> property to form a complete
            speed measurement. 
            </remarks>
        </member>
        <member name="P:GeoFramework.Speed.Units">
            <remarks>
            	<para>Following proper scientific practices, speed measurements are always made
             using a value paired with a unit type. </para>
            	<para><img src="BestPractice.jpg"/></para><para><strong>Always explicitly
             convert to a specific speed unit type before performing
             mathematics.</strong></para>
            	<para>Since the Units property of the Speed class can be modified, it is not
             safe to assume that a speed measurement will always be of a certain unit type.
             Therefore, use a conversion method such as <see cref="M:GeoFramework.Speed.ToKilometersPerHour">
             ToKilometersPerHour</see> or <see cref="M:GeoFramework.Speed.ToStatuteMilesPerHour">
             ToStatuteMilesPerHour</see> to ensure that the speed is in the correct unit
             type before perfoming mathematics.</para>
            </remarks>
            <value>
            A value from the <see cref="T:GeoFramework.SpeedUnit">SpeedUnits</see> enumeration.
            </value>
            <summary>Returns the units portion of the speed measurement.</summary>
        </member>
        <member name="P:GeoFramework.Speed.IsEmpty">
            <summary>Indicates if the measurement is zero.</summary>
        </member>
        <member name="P:GeoFramework.Speed.IsMetric">
            <summary>Indicates if the unit of measurement is a Metric unit type.</summary>
        </member>
        <member name="P:GeoFramework.Speed.IsInfinity">
            <summary>Indicates if the measurement is infinite.</summary>
        </member>
        <member name="P:GeoFramework.Speed.IsInvalid">
            <summary>
            Indicates if the current instance is invalid or unspecified.
            </summary>
        </member>
        <member name="T:GeoFramework.SpeedUnit">
            <summary>Indicates the unit of measure for speed measurements.</summary>
            <remarks>
            This enumeration is used by the
            <see cref="P:GeoFramework.Speed.Units">Units</see> property of the
            <see cref="T:GeoFramework.Speed">Speed</see>
            class in conjunction with the <see cref="P:GeoFramework.Speed.Value">Value</see>
            property to describe a speed measurement.
            </remarks>
            <seealso cref="P:GeoFramework.Speed.Units">Units Property (Speed Class)</seealso>
            <seealso cref="T:GeoFramework.Speed">Speed Class</seealso>
        </member>
        <member name="F:GeoFramework.SpeedUnit.Knots">
            <summary>The number of nautical miles travelled in one hour.</summary>
        </member>
        <member name="F:GeoFramework.SpeedUnit.StatuteMilesPerHour">
            <summary>The number of statute miles travelled in one hour, also known as MPH.</summary>
        </member>
        <member name="F:GeoFramework.SpeedUnit.KilometersPerHour">
            <summary>The number of kilometers travelled in one hour, also known as KPH.</summary>
        </member>
        <member name="F:GeoFramework.SpeedUnit.KilometersPerSecond">
            <summary>The number of kilometers travelled in one second, also known as 
            KM/S.</summary>
        </member>
        <member name="F:GeoFramework.SpeedUnit.FeetPerSecond">
            <summary>The number of feet travelled in one second, also known as FT/S.</summary>
        </member>
        <member name="F:GeoFramework.SpeedUnit.MetersPerSecond">
            <summary>The number of meters travelled in one hour, also known as M/S.</summary>
        </member>
        <member name="T:GeoFramework.Licensing.LicenseContext">
            <summary>Indicates the code execution environment for a license.</summary>
            <remarks>
            	<para>There are two major license contexts used: design-time and run-time. The
                GeoFrameworks licensing system typically uses a more relaxed approach in the
                design-time environment. For example, licenses are granted to developers in
                design-time environments even if a trial period has expired in order to let them
                open their Windows Forms and continue development. Licenses are enforced more
                strictly at run-time and functionality is prohibited unless a beta license, trial
                license or owner license can be granted.</para>
            	<para>This class exists only for .NET Compact Framework 1.0, which excluded
                licensing classes by default.</para>
            </remarks>
        </member>
        <member name="P:GeoFramework.Licensing.LicenseContext.UsageMode">
            <summary>
            Indicates whether a license is used for design-time or run-time
            environments.
            </summary>
            <value>A value from the <strong>LicenseUsageMode</strong> enumaration.</value>
            <remarks>
            This property returns <strong>Designtime</strong> if the Visual Studio.NET IDE is
            detected, otherwise a value of <strong>Runtime</strong> is returned.
            </remarks>
        </member>
        <member name="T:GeoFramework.Licensing.LicenseUsageMode">
            <summary>Indicates the operational environment allowed for a license.</summary>
            <remarks>
            This enumeration is used by the <strong>LicenseContext</strong> class to indicate
            the operational environment valid for a license.
            </remarks>
        </member>
        <member name="F:GeoFramework.Licensing.LicenseUsageMode.Designtime">
            <summary>
            The license is valid for use within the Visual Studio.NET Windows Forms
            designer.
            </summary>
        </member>
        <member name="F:GeoFramework.Licensing.LicenseUsageMode.Runtime">
            <summary>The license is valid for use in a production or release environment.</summary>
        </member>
        <member name="T:GeoFramework.RectangleFHelper">
            <summary>
            Provides additional functionality for the RectangleF structure.
            </summary>
        </member>
        <member name="M:GeoFramework.RectangleFHelper.Center(System.Drawing.RectangleF)">
            <summary>
            Returns the point at the center of the specified rectangle.
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.RectangleFHelper.ToAspectRatio(System.Drawing.RectangleF,System.Single)">
            <summary>
            Increases the height or broadens the width of a rectangle to match the specified aspect ratio.
            </summary>
            <param name="rectangle"></param>
            <param name="aspectRatio"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.RectangleFHelper.ToAspectRatioB(System.Drawing.RectangleF,System.Single)">
            <summary>
            Shortens the height or narrows the width of a rectangle to match the specified aspect ratio.
            </summary>
            <param name="rectangle"></param>
            <param name="aspectRatio"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.RectangleFHelper.Corners(System.Drawing.RectangleF)">
            <summary>
            Returns the corners of a rectangle
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.RectangleFHelper.ComputeBoundingBox(GeoFramework.PointF[])">
            <summary>
            Calculates the bounding rectangle for the supplied points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.RectangleFHelper.Hypotenuse(System.Drawing.RectangleF)">
            <summary>
            Returns the length of the hypotenuse of the specified rectangle.
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.RectangleFHelper.CenterOn(System.Drawing.RectangleF,GeoFramework.PointF)">
            <summary>
            Centers the rectangle on a specific point.
            </summary>
            <param name="rectangle">The rectangle to translate</param>
            <param name="point">The point on which to center the reactangle</param>
            <returns>The new rectangle centered on the specified point</returns>
        </member>
        <member name="M:GeoFramework.RectangleFHelper.IsNaN(System.Drawing.RectangleF)">
            <summary>
            Returns whether any one of a rectangle's sides is a NaN (not a number).
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.RectangleFHelper.Rotate(System.Drawing.RectangleF,GeoFramework.Angle)">
            <summary>
            Rotates a rectangle around its center
            </summary>
            <param name="rectangle">The rectangle to apply the rotation</param>
            <param name="angle">The clockwise angle of the rotation</param>
            <returns>The minimum bounding rectangle (MBR) of the rotated rectangle</returns>
        </member>
        <member name="M:GeoFramework.RectangleFHelper.Rotate(System.Drawing.RectangleF,System.Single)">
            <summary>
            Rotates a rectangle around its center
            </summary>
            <param name="rectangle">The rectangle to apply the rotation</param>
            <param name="angle">The clockwise angle of the rotation</param>
            <returns>The minimum bounding rectangle (MBR) of the rotated rectangle</returns>
        </member>
        <member name="M:GeoFramework.RectangleFHelper.RotateAt(System.Drawing.RectangleF,GeoFramework.Angle,GeoFramework.PointF)">
            <summary>
            Rotates a rectangle around a coordinate
            </summary>
            <param name="rectangle">The rectangle to apply the rotation</param>
            <param name="angle">The clockwise angle of the rotation</param>
            <returns>The minimum bounding rectangle (MBR) of the rotated rectangle</returns>
        </member>
        <member name="M:GeoFramework.RectangleFHelper.RotateAt(System.Drawing.RectangleF,System.Single,GeoFramework.PointF)">
            <summary>
            Rotates a rectangle around a coordinate
            </summary>
            <param name="rectangle">The rectangle to apply the rotation</param>
            <param name="angle">The clockwise angle of the rotation</param>
            <returns>The minimum bounding rectangle (MBR) of the rotated rectangle</returns>
        </member>
        <member name="M:GeoFramework.RectangleFHelper.RotatePointF(GeoFramework.PointF,GeoFramework.Angle,GeoFramework.PointF)">
            <summary>
            Rotates a coordinate around a coordinate
            </summary>
            <param name="point">The point to apply the rotation</param>
            <param name="angle">The clockwise angle of the rotation</param>
            <returns>The rectangle resulting from the rotation of the upperleft and lower rightt corners of the input rectangle</returns>
        </member>
        <member name="M:GeoFramework.RectangleFHelper.RotatePointF(GeoFramework.PointF,System.Single,GeoFramework.PointF)">
            <summary>
            Rotates a coordinate around a coordinate
            </summary>
            <param name="point">The point to apply the rotation</param>
            <param name="angle">The clockwise angle of the rotation</param>
            <returns>The rectangle resulting from the rotation of the upperleft and lower rightt corners of the input rectangle</returns>
        </member>
        <member name="M:GeoFramework.RectangleFHelper.GetRegionScans(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Compares the imput rectangles and caculates the portion of the new rctangle not included in the old.
            </summary>
            <param name="current"> The current rectangle</param>
            <param name="previous">The previous rectangle</param>
            <returns>An array of rectangles describing the difference between the input rectangles.</returns>
            <remarks>
            This funtion is a liner exclusive OR on 2 rectangles. It is catagorized by specifying the order of the 
            rectangles in a linear fashion so that the xor'd intersection is directional. A natural XOR intersection
            would include the portions of both rectangles not found the intersction of the two. A Linear XOR includes 
            only the portion of the current rectangle not found in the intersection of the two.
            </remarks>
        </member>
        <member name="T:GeoFramework.Longitude">
            <summary>
            Represents a line of constant distance east or west from the Prime Meridian.
            </summary>
            <remarks>
            	<para>Longitudes measure a distance either East or West from the Prime Meridian, an
                imaginary line which passes from the North Pole, through the
                <see href="http://www.nmm.ac.uk/">Royal Observatory in Greenwich, England, and on
                to the South Pole</see>. Longitudes can range from -180 to 180°, with the Prime
                Meridian at 0°. Latitudes are commonly paired with Longitudes to mark a specific
                location on Earth's surface.</para>
            	<para>Latitudes are expressed in either of two major formats. The first format uses
                only positive numbers and the letter "E" or "W" to indicate the hemisphere (i.e.
                "94°E" or "32°W"). The second format allows negative numbers an omits the single
                character (i.e. 94 or -32).</para>
            	<para>Instances of this class are guaranteed to be thread-safe because the class is
                immutable (its properties can only be changed via constructors).</para>
            </remarks>
            <seealso cref="T:GeoFramework.Azimuth">Azimuth Class</seealso>
            <seealso cref="T:GeoFramework.Elevation">Elevation Class</seealso>
            <seealso cref="T:GeoFramework.Latitude">Latitude Class</seealso>
            <seealso cref="T:GeoFramework.Longitude">Longitude Class</seealso>
            <example>
                These examples create new instances of Longitude objects. 
                <code lang="VB" description="Create an angle of 90°">
            Dim MyLongitude As New Longitude(90)
                </code>
            	<code lang="CS" description="Create an angle of 90°">
            Longitude MyLongitude = new Longitude(90);
                </code>
            	<code lang="C++" description="Create an angle of 90°">
            Longitude MyLongitude = new Longitude(90);
                </code>
            	<code lang="VB" description="Create an angle of 105°30'21.4">
            Dim MyLongitude1 As New Longitude(105, 30, 21.4)
                </code>
            	<code lang="CS" description="Create an angle of 105°30'21.4">
            Longitude MyLongitude = new Longitude(105, 30, 21.4);
                </code>
            	<code lang="C++" description="Create an angle of 105°30'21.4">
            Longitude MyLongitude = new Longitude(105, 30, 21.4);
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Longitude.PrimeMeridian">
            <summary>Represents a longitude of 0°.</summary>
            <remarks>
            	<para>The Prime Meridian, located at 0°E (and 0°W), also known as the "Greenwich" Meridian was chosen as the
             Prime Meridian of the World in 1884. Forty-one delegates from 25 nations met in
             Washington, D.C. for the International Meridian Conference. By the end of the
             conference, Greenwich had won the prize of Longitude 0° by a vote of 22 to 1
             against (San Domingo), with 2 abstentions (France and Brazil).</para>
            	<para>The Prime Meridian is also significant in that it marks the location from
             which all time zones are measured. Times displayed as "Zulu," "UTC," or "GMT" are
             all talking about times adjusted to the Greenwich time zone.</para>
            	<para>Before the Prime Meridian, almost every town in the world kept its own local
             time. There were no national or international conventions which set how time should
             be measured, or when the day would begin and end, or even what length an hour might
             be!</para>
            </remarks>
        </member>
        <member name="F:GeoFramework.Longitude.InternationalDateline">
            <summary>Represents a longitude 180°.</summary>
            <remarks>
            This value of 180°W (also 180°E) marks the longitude located on the opposite side of the Earth from the
            Prime Meridian. It runs approximately through the
            <a href="http://greenwichmeridian.com/date-line.htm">International Date Line</a>
            (between Alaska and Russia).
            </remarks>
        </member>
        <member name="F:GeoFramework.Longitude.Empty">
            <summary>Represents a longitude of 0°.</summary>
        </member>
        <member name="F:GeoFramework.Longitude.Minimum">
            <summary>Represents the minimum possible longitude of -180°.</summary>
            <remarks>
            This member is provided for completeness and is equivalent to the
            <see cref="F:GeoFramework.Longitude.PrimeMeridian">PrimeMeridian</see> shared field.
            </remarks>
        </member>
        <member name="F:GeoFramework.Longitude.Maximum">
            <summary>Represents the maximum possible longitude of 180°.</summary>
            <remarks>
            This value of 180°W (also 180°E) marks the longitude located on the opposite side of the Earth from the
            Prime Meridian. It runs approximately through the
            <a href="http://greenwichmeridian.com/date-line.htm">International Date Line</a>
            (between Alaska and Russia).
            </remarks>
        </member>
        <member name="F:GeoFramework.Longitude.Invalid">
            <summary>
            Represents an invalid or unspecified value.
            </summary>
        </member>
        <member name="M:GeoFramework.Longitude.#ctor(System.Double)">
            <summary>Creates a new instance with the specified decimal degrees.</summary>
            <example>
                This example demonstrates how to create an angle with a measurement of 90°. 
                <code lang="VB">
            Dim MyLongitude As New Longitude(90)
                </code>
            	<code lang="CS">
            Longitude MyLongitude = new Longitude(90);
                </code>
            </example>
            <returns>An <strong>Longitude</strong> containing the specified value.</returns>
        </member>
        <member name="M:GeoFramework.Longitude.#ctor(System.Double,GeoFramework.LongitudeHemisphere)">
            <summary>
            Creates a new instance with the specified decimal degrees and hemisphere.
            </summary>
            <param name="decimalDegrees">A <strong>Double</strong> specifying the number of hours.</param>
            <param name="hemisphere">A value from the <strong>LongitudeHemisphere</strong> enumeration.</param>
            <example>
            This example creates a new Longitude of 39°30' north.
            <code lang="VB">
            Dim MyLongitude As New Longitude(39.5, LongitudeHemisphere.North)
            </code>
            <code lang="C#">
            Longitude MyLongitude = new Longitude(39.5, LongitudeHemisphere.North);
            </code>
            This example creates a new Longitude of 39°30 south.
            <code lang="VB">
            Dim MyLongitude As New Longitude(39.5, LongitudeHemisphere.South)
            </code>
            <code lang="C#">
            Longitude MyLongitude = new Longitude(39.5, LongitudeHemisphere.South);
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.Longitude.#ctor(System.Int32)">
            <summary>Creates a new instance with the specified degrees.</summary>
            <returns>An <strong>Longitude</strong> containing the specified value.</returns>
            <param name="hours">
            An <strong>Integer</strong> indicating the amount of degrees, typically between 0
            and 360.
            </param>
        </member>
        <member name="M:GeoFramework.Longitude.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>Creates a new instance with the specified hours, minutes and 
            seconds.</summary>
            <example>
                This example demonstrates how to create an angular measurement of 34°12'29.2 in
                hours, minutes and seconds. 
                <code lang="VB">
            Dim MyLongitude As New Longitude(34, 12, 29.2)
                </code>
            	<code lang="CS">
            Longitude MyLongitude = new Longitude(34, 12, 29.2);
                </code>
            </example>
            <returns>An <strong>Longitude</strong> containing the specified value.</returns>
        </member>
        <member name="M:GeoFramework.Longitude.#ctor(System.Int32,System.Int32,System.Double,GeoFramework.LongitudeHemisphere)">
            <summary>Creates a new instance using the specified decimal degrees and 
            hemisphere.</summary>
            <remarks>
             <para>This constructor is typically used to create a longitude when decimal degrees
             are always expressed as a positive number. Since the hemisphere property is set
             <em>after</em> the DecimalDegrees property is set, the DecimalDegrees is adjusted
             automatically to be positive for the eastern hemisphere and negative for the
             western hemisphere.</para>
            
             <para>If the parameters conflict with each other, the <strong>Hemisphere</strong>
             parameter takes precedence. Therefore, a value of "-19°E" will become "19°E"
             (without the negative sign) with no exception being thrown.</para>
            </remarks>
            <param name="hemisphere">A value from the <strong>LatitudeHemisphere</strong> 
            enumeration.</param>
        </member>
        <member name="M:GeoFramework.Longitude.#ctor(System.Int32,System.Double)">
            <summary>Creates a new instance with the specified hours and decimal minutes.</summary>
            <example>
                This example demonstrates how an angle can be created when only the hours and
                minutes (in decimal form) are known. This creates a value of 12°42.345'. 
                <code lang="VB">
            Dim MyLongitude As New Longitude(12, 42.345)
                </code>
            	<code lang="VB">
            Longitude MyLongitude = new Longitude(12, 42.345);
                </code>
            </example>
            <remarks>An <strong>Longitude</strong> containing the specified value.</remarks>
        </member>
        <member name="M:GeoFramework.Longitude.#ctor(System.Int32,System.Double,GeoFramework.LongitudeHemisphere)">
            <summary>
            Creates a new instance with the specified hours, decimal minutes, and hemisphere.
            </summary>
            <param name="hours">An <strong>Integer</strong> specifying the number of hours.</param>
            <param name="minutes">An <strong>Integer</strong> specifying the number of minutes.</param>
            <param name="hemisphere">A value from the <strong>LongitudeHemisphere</strong> enumeration.</param>
            <example>
            This example creates a new Longitude of 39°12.34' north.
            <code lang="VB">
            Dim MyLongitude As New Longitude(39, 12.34, LongitudeHemisphere.North)
            </code>
            <code lang="C#">
            Longitude MyLongitude = new Longitude(39, 12.34, LongitudeHemisphere.North);
            </code>
            This example creates a new Longitude of 39°12.34 south.
            <code lang="VB">
            Dim MyLongitude As New Longitude(39, 12.34, LongitudeHemisphere.South)
            </code>
            <code lang="C#">
            Longitude MyLongitude = new Longitude(39, 12.34, LongitudeHemisphere.South);
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.Longitude.#ctor(System.String)">
            <summary>Creates a new instance using the specified string-based measurement.</summary>
            <remarks>
             <para>A <strong>String</strong> in any of the following formats (or variation
             depending on the local culture):</para>
            
             <para>
            	 <table cellspacing="0" cols="4" cellpadding="2" width="100%">
            		 <tbody>
            			 <tr>
            				 <td>hh</td>
            				 <td>hh.h</td>
            				 <td>hh mm</td>
            				 <td>hh mm.mm</td>
            			 </tr>
            			 <tr>
            				 <td>hh mm ss</td>
            				 <td>hh mm ss.sss</td>
            				 <td>hhi</td>
            				 <td>hh.hi</td>
            			 </tr>
            			 <tr>
            				 <td>hh mmi</td>
            				 <td>hh mm i</td>
            				 <td>hh mm.mi</td>
            				 <td>hh mm.m i</td>
            			 </tr>
            			 <tr>
            				 <td>hh mm ssi</td>
            				 <td>hh mm ss i</td>
            				 <td>hh mm ss.si</td>
            				 <td>hh mm ss.s i</td>
            			 </tr>
            			 <tr>
            				 <td>hhhmmssi</td>
            				 <td></td>
            				 <td></td>
            				 <td></td>
            			 </tr>
            		 </tbody>
            	 </table>
             </para>
            
             <para>Where <strong>h</strong> represents hours, <strong>m</strong> represents
             minutes, <strong>s</strong> represents seconds, and <strong>i</strong> represents a
             one-letter hemisphere indicator of "E" or "W." Any non-numeric character between
             numbers is considered a delimiter. Thus, a value of <strong>12°34'56.78"</strong>
             or even <strong>12A34B56.78C</strong> is treated the same as <strong>12 34
             56.78</strong>.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Longitude.Parse(System.String)">Parse Method</seealso>
            <example>
                This example creates a new instance by parsing a string. (NOTE: The double-quote is
                doubled up to represent a single double-quote in the string.) 
                <code lang="VB">
            Dim MyLongitude As New Longitude("123°45'67.8""")
                </code>
            	<code lang="CS">
            Longitude MyLongitude = new Longitude("123°45'67.8\"");
                </code>
            </example>
            <returns>An <strong>Longitude</strong> containing the specified value.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
        </member>
        <member name="M:GeoFramework.Longitude.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>Creates a new instance using the specified string-based measurement.</summary>
            <remarks>
             <para>A <strong>String</strong> in any of the following formats (or variation
             depending on the local culture):</para>
            
             <para>
            	 <table cellspacing="0" cols="4" cellpadding="2" width="100%">
            		 <tbody>
            			 <tr>
            				 <td>hh</td>
            				 <td>hh.h</td>
            				 <td>hh mm</td>
            				 <td>hh mm.mm</td>
            			 </tr>
            			 <tr>
            				 <td>hh mm ss</td>
            				 <td>hh mm ss.sss</td>
            				 <td>hhi</td>
            				 <td>hh.hi</td>
            			 </tr>
            			 <tr>
            				 <td>hh mmi</td>
            				 <td>hh mm i</td>
            				 <td>hh mm.mi</td>
            				 <td>hh mm.m i</td>
            			 </tr>
            			 <tr>
            				 <td>hh mm ssi</td>
            				 <td>hh mm ss i</td>
            				 <td>hh mm ss.si</td>
            				 <td>hh mm ss.s i</td>
            			 </tr>
            			 <tr>
            				 <td>hhhmmssi</td>
            				 <td></td>
            				 <td></td>
            				 <td></td>
            			 </tr>
            		 </tbody>
            	 </table>
             </para>
            
             <para>Where <strong>h</strong> represents hours, <strong>m</strong> represents
             minutes, <strong>s</strong> represents seconds, and <strong>i</strong> represents a
             one-letter hemisphere indicator of "E" or "W." Any non-numeric character between
             numbers is considered a delimiter. Thus, a value of <strong>12°34'56.78"</strong>
             or even <strong>12A34B56.78C</strong> is treated the same as <strong>12 34
             56.78</strong>.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
            <summary>
            Creates a new instance by converting the specified string using the specified
            culture.
            </summary>
            <param name="value">
            A <strong>String</strong> describing an angle in the form of decimal degrees or a
            sexagesimal.
            </param>
            <param name="culture">
            A <strong>CultureInfo</strong> object describing the numeric format to use during
            conversion.
            </param>
        </member>
        <member name="M:GeoFramework.Longitude.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance by deserializing the specified XML.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:GeoFramework.Longitude.LesserOf(GeoFramework.Longitude)">
            <summary>Returns the object with the smallest value.</summary>
            <returns>The <strong>Longitude</strong> containing the smallest value.</returns>
            <param name="value">An <strong>Longitude</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Longitude.GreaterOf(GeoFramework.Longitude)">
            <returns>An <strong>Longitude</strong> containing the largest value.</returns>
            <summary>Returns the object with the largest value.</summary>
            <param name="value">An <strong>Longitude</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Longitude.Compare(System.Double)">
            <summary>Returns a value indicating the relative order of two objects.</summary>
            <returns>A value of -1, 0, or 1 as documented by the IComparable interface.</returns>
            <remarks>
            	This method allows collections of <strong>Longitude</strong> objects to be sorted.
            	The <see cref="P:GeoFramework.Longitude.DecimalDegrees">DecimalDegrees</see> property of each instance is compared.
            </remarks>
            <param name="value">An <strong>Longitude</strong> object to compare with.</param>
        </member>
        <member name="M:GeoFramework.Longitude.Mirror">
            <summary>Returns an angle opposite of the current instance.</summary>
            <returns>An <strong>Longitude</strong> representing the mirrored value.</returns>
            <remarks>
            This method returns the "opposite" of the current instance. The opposite is
            defined as the point on the other side of an imaginary circle. For example, if an angle
            is 0°, at the top of a circle, this method returns 180°, at the bottom of the
            circle.
            </remarks>
            <example>
                This example creates a new <strong>Longitude</strong> of 45° then calculates its mirror
                of 225°. (45 + 180) 
                <code lang="VB" title="[New Example]">
            Dim Longitude1 As New Longitude(45)
            Dim Longitude2 As Longitude = Longitude1.Mirror()
            Debug.WriteLine(Longitude2.ToString())
            ' Output: 225
                </code>
            	<code lang="CS" title="[New Example]">
            Longitude Longitude1 = new Longitude(45);
            Longitude Longitude2 = Longitude1.Mirror();
            Console.WriteLine(Longitude2.ToString());
            // Output: 225
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Longitude.ToRadians">
            <summary>Converts the current instance into radians.</summary>
            <returns>A <see cref="T:GeoFramework.Radian">Radian</see> object.</returns>
            <remarks>
            	<para>This function is typically used to convert an angular measurement into
             radians before performing a trigonometric function.
            		</para>
            </remarks>
            <seealso cref="T:GeoFramework.Radian">Radian Class</seealso>
            <overloads>Converts an angular measurement into radians before further processing.</overloads>
            <example>
                This example converts a measurement of 90° into radians. 
                <code lang="VB">
            Dim MyLongitude As New Longitude(90)
            Dim MyRadians As Radian = MyLongitude.ToRadians()
                </code>
            	<code lang="CS">
            Longitude MyLongitude = new Longitude(90);
            Radian MyRadians = MyLongitude.ToRadians();
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Longitude.IsEastOf(GeoFramework.Longitude)">
            <summary>
            Indicates if the current instance is East of the specified longitude.
            </summary>
            <param name="longitude">A <strong>Longitude</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more East than the specified instance.</returns>
        </member>
        <member name="M:GeoFramework.Longitude.IsWestOf(GeoFramework.Longitude)">
            <summary>
            Indicates if the current instance is West of the specified longitude.
            </summary>
            <param name="longitude">A <strong>Longitude</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more West than the specified instance.</returns>
        </member>
        <member name="M:GeoFramework.Longitude.ToString(System.String)">
            <remarks>
             <para>This powerful method returns the current angular measurement in a specific
             format. If no value for the format is specified, a format of
             <strong>hhh°mm'SS.SS"I</strong> (adjusted to the current culture) will be used. The
             resulting <strong>String</strong> can be converted back into an
             <strong>Longitude</strong> via the
             <see href="Angle.Parse">Parse</see> method so long as a delimiter separates each individual
             value.</para>
            </remarks>
            <param name="format">
             <para>A combination of symbols, spaces, and any of the following case-insensitive
             letters: <strong>D</strong> or <strong>H</strong> for hours, <strong>M</strong> for
             minutes, <strong>S</strong> for seconds, and <strong>I</strong> to indicate the
             hemisphere. Here are some examples:</para>
            
             <para>
            	 <table cellspacing="0" cols="3" cellpadding="2" width="100%">
            		 <tbody>
            			 <tr>
            				 <td>HH°MM'SS.SS"</td>
            
            				 <td>HHH.H°</td>
            
            				 <td>HH MM.MM</td>
            
            				 <td>HHHMMSS</td>
            			 </tr>
            
            			 <tr>
            				 <td>HH°MM'SS.SS"I</td>
            
            				 <td>HHH.H°I</td>
            
            				 <td>HH MM.MMI</td>
            
            				 <td>HHHMMSSI</td>
            			 </tr>
            		 </tbody>
            	 </table>
             </para>
            </param>
            <summary>Outputs the current instance as a string using the specified format.</summary>
            <returns>A <strong>String</strong> matching the specified format.</returns>
            <remarks>
            	<para>This method returns the current instance output in a specific format. If no
                value for the format is specified, a default format of "d.dddd°" is used. Any
                string output by this method can be converted back into an Longitude object using the
                <strong>Parse</strong> method or <strong>Longitude(string)</strong> constructor.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Longitude.ToString(System.String)">ToString Method</seealso>
            <seealso cref="M:GeoFramework.Longitude.Parse(System.String)">Parse Method</seealso>
            <example>
                This example uses the <strong>ToString</strong> method to output an angle in a
                custom format. The " <strong>h°</strong> " code represents hours along with a
                degree symbol (Alt+0176 on the keypad), and " <strong>m.mm</strong> " represents
                the minutes out to two decimals. Mmm. 
                <code lang="VB">
            Dim MyLongitude As New Longitude(45, 16.772)
            Debug.WriteLine(MyLongitude.ToString("h°m.mm"))
            ' Output: 45°16.78
                </code>
            	<code lang="CS">
            Dim MyLongitude As New Longitude(45, 16.772);
            Debug.WriteLine(MyLongitude.ToString("h°m.mm"));
            // Output: 45°16.78
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Longitude.Ceiling">
            <summary>Returns the smallest integer greater than the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Longitude.Floor">
            <summary>Returns the largest integer which is smaller than the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Longitude.Round(System.Int32)">
            <summary>
            Returns a new instance whose value is rounded the specified number of decimals.
            </summary>
            <param name="decimals">An <strong>Integer</strong> specifying the number of decimals to round off to.</param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Longitude.RoundSeconds">
            <summary>Returns a new instance whose Seconds property is evenly divisible by 15.</summary>
            <returns>An <strong>Longitude</strong> containing the rounded value.</returns>
            <remarks>
            This method is used to align or "snap" an angle to a regular interval. For
            example, a grid might be easier to read if it were drawn at 30-second intervals instead
            of 24.198-second intervals.
            </remarks>
        </member>
        <member name="M:GeoFramework.Longitude.RoundSeconds(System.Double)">
            <summary>
            Returns a new angle whose Seconds property is evenly divisible by the specified amount.
            </summary>
            <returns>An <strong>Longitude</strong> containing the rounded value.</returns>
            <remarks>
            This method is used to align or "snap" an angle to a regular interval. For
            example, a grid might be easier to read if it were drawn at 30-second intervals instead
            of 24.198-second intervals.
            </remarks>
            <param name="interval">
            A <strong>Double</strong> between 0 and 60 indicating the interval to round
            to.
            </param>
        </member>
        <member name="M:GeoFramework.Longitude.Normalize">
            <remarks>
             <para>This function is used to ensure that an angular measurement is within the
             allowed bounds of 0° and 180°. If a value of 360° or 720° is passed, a value of 0°
             is returned since traveling around the Earth 360° or 720° brings you to the same
             place you started.</para>
            </remarks>
            <returns>A <strong>Longitude</strong> containing the normalized value.</returns>
        </member>
        <member name="M:GeoFramework.Longitude.Equals(System.Object)">
            <summary>Compares the current value to another Longitude object's value.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the object's DecimalDegrees
            properties match.
            </returns>
            <remarks>This </remarks>
            <param name="obj">
            An <strong>Longitude</strong>, <strong>Double</strong>, or <strong>Integer</strong>
            to compare with.
            </param>
        </member>
        <member name="M:GeoFramework.Longitude.GetHashCode">
            <summary>Returns a unique code for this instance.</summary>
            <remarks>
            Since the <strong>Longitude</strong> class is immutable, this property may be used
            safely with hash tables.
            </remarks>
            <returns>
            An <strong>Integer</strong> representing a unique code for the current
            instance.
            </returns>
        </member>
        <member name="M:GeoFramework.Longitude.ToString">
            <remarks>
             <para>This powerful method returns the current angular measurement in a specific
             format. If no value for the format is specified, a format of
             <strong>hhh°mm'SS.SS"I</strong> (adjusted to the current culture) will be used. The
             resulting <strong>String</strong> can be converted back into an
             <strong>Longitude</strong> via the
             <see href="Angle.Parse">Parse</see> method so long as a delimiter separates each individual
             value.</para>
            </remarks>
            <param name="format">
             <para>A combination of symbols, spaces, and any of the following case-insensitive
             letters: <strong>D</strong> or <strong>H</strong> for hours, <strong>M</strong> for
             minutes, <strong>S</strong> for seconds, and <strong>I</strong> to indicate the
             hemisphere. Here are some examples:</para>
            
             <para>
            	 <table cellspacing="0" cols="3" cellpadding="2" width="100%">
            		 <tbody>
            			 <tr>
            				 <td>HH°MM'SS.SS"</td>
            
            				 <td>HHH.H°</td>
            
            				 <td>HH MM.MM</td>
            
            				 <td>HHHMMSS</td>
            			 </tr>
            
            			 <tr>
            				 <td>HH°MM'SS.SS"I</td>
            
            				 <td>HHH.H°I</td>
            
            				 <td>HH MM.MMI</td>
            
            				 <td>HHHMMSSI</td>
            			 </tr>
            		 </tbody>
            	 </table>
             </para>
            </param>
            <summary>Outputs the current instance as a string using the specified format.</summary>
            <returns>A <strong>String</strong> matching the specified format.</returns>
            <remarks>
            	<para>This method formats the current instance using the default format of
                "d.dddd°." Any string output by this method can be converted back into an Longitude
                object using the <strong>Parse</strong> method or <strong>Longitude(string)</strong>
                constructor.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Longitude.Parse(System.String)">Parse Method</seealso>
            <example>
                This example outputs a value of 90 degrees in the default format of ###.#°. 
                <code lang="VB">
            Dim MyLongitude As New Longitude(90)
            Debug.WriteLine(MyLongitude.ToString)
            ' Output: "90°"
                </code>
            	<code lang="CS">
            Longitude MyLongitude = new Longitude(90);
            Debug.WriteLine(MyLongitude.ToString());
            // Output: "90°"
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Longitude.Normalize(System.Double)">
            <remarks>
            <para>This function is used to ensure that an angular measurement is within the
            allowed bounds of -180° and 180°. If a value of 360° or 720° is passed, a value of 0°
            is returned since traveling around the Earth 360° or 720° brings you to the same
            place you started.</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.Longitude.LesserOf(GeoFramework.Longitude,GeoFramework.Longitude)">
            <returns>The <strong>Longitude</strong> containing the smallest value.</returns>
            <summary>Returns the object with the smallest value.</summary>
            <param name="value">A <strong>Longitude</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Longitude.GreaterOf(GeoFramework.Longitude,GeoFramework.Longitude)">
            <summary>Returns the object with the largest value.</summary>
            <returns>A <strong>Longitude</strong> containing the largest value.</returns>
            <param name="value">A <strong>Longitude</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Longitude.ToRadians(GeoFramework.Longitude)">
            <remarks>
            	<para>This function is typically used to convert an angular measurement into
             radians before performing a trigonometric function.</para>
            </remarks>
            <returns>A <see cref="T:GeoFramework.Radian"><strong>Radian</strong></see> object.</returns>
            <summary>Converts an angular measurement into radians.</summary>
            <example>
                This example shows a quick way to convert an angle of 90° into radians. 
                <code lang="VB">
            Dim MyRadian As Radian = Longitude.ToRadians(90)
                </code>
            	<code lang="CS">
            Radian MyRadian = Longitude.ToRadians(90);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Longitude.FromRadians(GeoFramework.Radian)">
            <summary>Converts a value in radians into an angular measurement.</summary>
            <remarks>
            	This function is typically used in conjunction with the
            	<see cref="M:GeoFramework.Longitude.ToRadians">ToRadians</see>
            	method after a trigonometric function has completed. The converted value is stored in
            	the <see cref="P:GeoFramework.Longitude.DecimalDegrees">DecimalDegrees</see> property.
            </remarks>
            <seealso cref="M:GeoFramework.Longitude.ToRadians">ToRadians</seealso>
            <seealso cref="T:GeoFramework.Radian">Radian Class</seealso>
            <example>
                This example uses the <strong>FromRadians</strong> method to convert a value of one
                radian into an <strong>Longitude</strong> of 57°. 
                <code lang="VB">
            ' Create a new angle equal to one radian
            Dim MyRadians As New Radian(1)
            Dim MyLongitude As Longitude = Longitude.FromRadians(MyRadians)
            Debug.WriteLine(MyLongitude.ToString())
            ' Output: 57°
                </code>
            	<code lang="CS">
            // Create a new angle equal to one radian
            Radian MyRadians = new Radian(1);
            Longitude MyLongitude = Longitude.FromRadians(MyRadians);
            Console.WriteLine(MyLongitude.ToString());
            // Output: 57°
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Longitude.Random">
            <summary>Returns a random longitude.</summary>
        </member>
        <member name="M:GeoFramework.Longitude.Random(System.Random)">
            <summary>Returns a random longitude based on the specified seed.</summary>
        </member>
        <member name="M:GeoFramework.Longitude.Random(GeoFramework.Longitude,GeoFramework.Longitude)">
            <summary>
            Returns a random longitude using the specified eastern and western boundaries.
            </summary>
            <param name="easternmost">A <strong>Longitude</strong> specifying the eastern-most allowed longitude.</param>
            <param name="westernmost">A <strong>Longitude</strong> specifying the western-most allowed longitude.</param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Longitude.Random(System.Random,GeoFramework.Longitude,GeoFramework.Longitude)">
            <summary>
            Returns a random longitude between the specified minimum and maximum.
            </summary>
            <param name="easternmost">A <strong>Longitude</strong> specifying the eastern-most allowed longitude.</param>
            <param name="westernmost">A <strong>Longitude</strong> specifying the western-most allowed longitude.</param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Longitude.ToDecimalDegrees(System.Int32,System.Int32,System.Double)">
            <summary>Converts arbitrary hour, minute and seconds into decimal degrees.</summary>
            <returns>
            A <strong>Double</strong> containing the decimal degree version of the specified
            values.
            </returns>
            <remarks>
            This function is used to convert three-part measurements into a single value. The
            result of this method is typically assigned to the
            <see cref="P:GeoFramework.Latitude.DecimalDegrees">
            DecimalDegrees</see> property. Values are rounded to thirteen decimal 
            places, the maximum precision allowed by this type.
            </remarks>
            <seealso cref="P:GeoFramework.Latitude.DecimalDegrees">DecimalDegrees Property</seealso>
            <seealso cref="M:GeoFramework.Latitude.Normalize">Normalize Method</seealso>
            <example>
                This example converts a value of 10°30'0" into decimal degrees (10.5). 
                <code lang="VB" title="ToDecimalDegrees Example (VB)">
            Dim MyValue As Double = Latitude.ToDecimalDegrees(10, 30, 0)
                </code>
            	<code lang="CS" title="ToDecimalDegrees Example (C#)">
            double MyValue = Latitude.ToDecimalDegrees(10, 30, 0);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Longitude.ToDecimalDegrees(System.Int32,System.Double)">
            <summary>Converts arbitrary hour and decimal minutes into decimal degrees.</summary>
            <returns>
            A <strong>Double</strong> containing the decimal degree version of the specified
            values.
            </returns>
            <remarks>
            This function is used to convert three-part measurements into a single value. The
            result of this method is typically assigned to the
            <see cref="P:GeoFramework.Latitude.DecimalDegrees">
            DecimalDegrees</see> property. Values are rounded to thirteen decimal 
            places, the maximum precision allowed by this type.
            </remarks>
        </member>
        <member name="M:GeoFramework.Longitude.ToDecimalDegrees(System.Int32)">
            <summary>Converts an hour value into decimal degrees.</summary>
            <returns>
            A <strong>Double</strong> containing the decimal degree version of the specified
            values.
            </returns>
            <remarks>
            The specified value will be converted to a double value.
            </remarks>
        </member>
        <member name="M:GeoFramework.Longitude.ToDecimalDegrees(System.Int32,System.Double,GeoFramework.LongitudeHemisphere)">
            <summary>Converts arbitrary hour and decimal minutes into decimal degrees.</summary>
            <returns>
            A <strong>Double</strong> containing the decimal degree version of the specified
            values.
            </returns>
            <remarks>
            The specified value will be converted to decimal degrees, then rounded to thirteen digits, the maximum precision allowed by this type.
            </remarks>
        </member>
        <member name="M:GeoFramework.Longitude.ToDecimalDegrees(System.Double,GeoFramework.LongitudeHemisphere)">
            <summary>Converts arbitrary decrees into well-formed decimal degrees.</summary>
            <returns>
            A <strong>Double</strong> containing the decimal degree version of the specified
            values.
            </returns>
            <remarks>
            The specified value will be rounded to thirteen digits, the maximum precision allowed by this type.
            </remarks>
        </member>
        <member name="M:GeoFramework.Longitude.ToDecimalDegrees(System.Int32,System.Int32,System.Double,GeoFramework.LongitudeHemisphere)">
            <summary>Converts arbitrary hour, minute and seconds into decimal degrees.</summary>
            <returns>
            A <strong>Double</strong> containing the decimal degree version of the specified
            values.
            </returns>
            <remarks>
            This function is used to convert three-part measurements into a single value. The
            result of this method is typically assigned to the
            <see cref="P:GeoFramework.Latitude.DecimalDegrees">
            DecimalDegrees</see> property. Values are rounded to thirteen decimal 
            places, the maximum precision allowed by this type.
            </remarks>
        </member>
        <member name="M:GeoFramework.Longitude.Parse(System.String)">
            <summary>Converts the specified string into an Longitude object.</summary>
            <returns>
            	A new <strong>Longitude</strong> object populated with the specified 
            	values.
            </returns>
            <remarks>
            	<para>This method parses the specified string into an <strong>Longitude</strong> object
                using the current culture. This constructor can parse any strings created via the
                <strong>ToString</strong> method.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Longitude.ToString(System.String)">ToString Method</seealso>
            <example>
                This example creates a new angular measurement using the <strong>Parse</strong>
                method. 
                <code lang="VB">
            Dim NewLongitude As Longitude = Longitude.Parse("123.45°")
                </code>
            	<code lang="CS">
            Longitude NewLongitude = Longitude.Parse("123.45°");
                </code>
            </example>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
        </member>
        <member name="M:GeoFramework.Longitude.Parse(System.String,System.Globalization.CultureInfo)">
            <remarks>
            	<para>This powerful method is typically used to process data from a data store or a
                value input by the user in any culture. This function can accept any format which
                can be output by the ToString method.</para>
            </remarks>
            <returns>A new <strong>Longitude</strong> object equivalent to the specified string.</returns>
            <summary>
            Converts the specified string into an <strong>Longitude</strong> object using the
            specified culture.
            </summary>
            <param name="value">
            A <strong>String</strong> describing an angle in the form of decimal degrees or a
            sexagesimal.
            </param>
            <param name="culture">
            A <strong>CultureInfo</strong> object describing the numeric format to use during
            conversion.
            </param>
        </member>
        <member name="M:GeoFramework.Longitude.Increment">
            <summary>Returns the current instance increased by one.</summary>
            <returns>An <strong>Longitude</strong> object.</returns>
            <remarks>
            	<para>This method increases the <strong>DecimalDegrees</strong> property by 1.0,
                returned as a new instance.</para>
            	<para><font color="red">Since the <strong>Longitude</strong> class is immutable, this
                method cannot be used to modify an existing instance.</font></para>
            </remarks>
            <example>
                This example uses the <strong>Increment</strong> method to increase an Longitude's
                value. It also demonstrates the subtle error which can be caused if
                <strong>Increment</strong> is called while ignoring the return value.
                <code lang="VB" title="[New Example]">
            ' Correct use of Increment
            Dim Longitude1 As New Longitude(89)
            Longitude1 = Longitude1.Increment()
             
            ' Incorrect use of Increment
            Dim Longitude1 = New Longitude(89)
            Longitude1.Increment()
            ' NOTE: Longitude1 will still be 89°!
                </code>
            	<code lang="CS" title="[New Example]">
            // Correct use of Increment
            Longitude Longitude1 = new Longitude(89);
            Longitude1 = Longitude1.Increment();
             
            // Incorrect use of Increment
            Longitude Longitude1 = new Longitude(89);
            Longitude1.Increment();
            // NOTE: Longitude1 will still be 89°!
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Longitude.Add(System.Double)">
            <summary>Increases the current instance by the specified value.</summary>
            <returns>A new <strong>Longitude</strong> containing the summed values.</returns>
            <example>
                This example adds 45° to the current instance of 45°, returning 90°. 
                <code lang="VB" title="[New Example]">
            Dim Longitude1 As New Longitude(45)
            Longitude1 = Longitude1.Add(45)
                </code>
            	<code lang="CS" title="[New Example]">
            Longitude Longitude1 = new Longitude(45);
            Longitude1 = Longitude1.Add(45);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to add to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Longitude.Decrement">
            <summary>Returns the current instance decreased by one.</summary>
            <returns>An <strong>Longitude</strong> object.</returns>
            <remarks>
            	<para>This method decreases the <strong>DecimalDegrees</strong> property by 1.0,
                returned as a new instance.</para>
            	<para><font color="red">Since the <strong>Longitude</strong> class is immutable, this
                method cannot be used to modify an existing instance.</font></para>
            </remarks>
            <example>
                This example uses the <strong>Decrement</strong> method to decrease an Longitude's
                value. It also demonstrates the subtle error which can be caused if
                <strong>Decrement</strong> is called while ignoring the return value.
                <code lang="VB" title="[New Example]">
            ' Correct use of Decrement
            Dim Longitude1 As New Longitude(91)
            Longitude1 = Longitude1.Decrement()
             
            ' Incorrect use of Decrement
            Dim Longitude1 = New Longitude(91)
            Longitude1.Increment()
            ' NOTE: Longitude1 will still be 91°!
                </code>
            	<code lang="CS" title="[New Example]">
            // Correct use of Decrement
            Longitude Longitude1 = new Longitude(91);
            Longitude1 = Longitude1.Decrement();
             
            // Incorrect use of Decrement
            Longitude Longitude1 = new Longitude(91);
            Longitude1.Decrement();
            // NOTE: Longitude1 will still be 91°!
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Longitude.Subtract(System.Double)">
            <summary>Decreases the current instance by the specified value.</summary>
            <returns>A new <strong>Longitude</strong> containing the new value.</returns>
            <example>
                This example subtracts 30° from the current instance of 90°, returning 60°. 
                <code lang="VB" title="[New Example]">
            Dim Longitude1 As New Longitude(90)
            Longitude1 = Longitude1.Subtract(30)
                </code>
            	<code lang="CS" title="[New Example]">
            Longitude Longitude1 = new Longitude(90);
            Longitude1 = Longitude1.Subtract(30);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to subtract from the current instance.</param>
        </member>
        <member name="M:GeoFramework.Longitude.Multiply(System.Double)">
            <summary>Multiplies the current instance by the specified value.</summary>
            <returns>A new <strong>Longitude</strong> containing the product of the two numbers.</returns>
            <example>
                This example multiplies 30° with three, returning 90°. 
                <code lang="VB" title="[New Example]">
            Dim Longitude1 As New Longitude(30)
            Longitude1 = Longitude1.Multiply(3)
                </code>
            	<code lang="CS" title="[New Example]">
            Longitude Longitude1 = new Longitude(30);
            Longitude1 = Longitude1.Multiply(3);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to multiply with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Longitude.Divide(System.Double)">
            <summary>Divides the current instance by the specified value.</summary>
            <returns>An <strong>Longitude</strong> containing the new value.</returns>
            <example>
                This example divides 90° by three, returning 30°. 
                <code lang="VB" title="[New Example]">
            Dim Longitude1 As New Longitude(90)
            Longitude1 = Longitude1.Divide(3)
                </code>
            	<code lang="CS" title="[New Example]">
            Longitude Longitude1 = new Longitude(90);
            Longitude1 = Longitude1.Divide(3);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> representing a denominator to divide by.</param>
        </member>
        <member name="M:GeoFramework.Longitude.IsLessThan(GeoFramework.Longitude)">
            <summary>Indicates if the current instance is smaller than the specified value.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than the specified value.
            </returns>
            <param name="value">An <strong>Longitude</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Longitude.IsLessThanOrEqualTo(GeoFramework.Longitude)">
            <remarks>
            This method compares the <strong>DecimalDegrees</strong> property with the
            specified value. This method is the same as the "&lt;=" operator.
            </remarks>
            <summary>
            Indicates if the current instance is smaller than or equal to the specified
            value.
            </summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than or equal to the specified value.
            </returns>
            <param name="value">An <strong>Longitude</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Longitude.IsGreaterThan(GeoFramework.Longitude)">
            <summary>Indicates if the current instance is larger than the specified value.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            greater than the specified value.
            </returns>
            <param name="value">An <strong>Longitude</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Longitude.IsGreaterThanOrEqualTo(GeoFramework.Longitude)">
            <summary>
            Indicates if the current instance is larger than or equal to the specified
            value.
            </summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            greater than or equal to the specified value.
            </returns>
            <param name="value">An <strong>Longitude</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Longitude.op_Explicit(GeoFramework.Radian)~GeoFramework.Longitude">
            <summary>
            Converts a measurement in Radians into an Longitude.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Longitude.op_Explicit(System.Double)~GeoFramework.Longitude">
            <summary>
            Converts a decimal degree measurement as a Double into an Longitude.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Longitude.op_Explicit(System.Single)~GeoFramework.Longitude">
            <summary>
            Converts a decimal degree measurement as a Double into an Longitude.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Longitude.op_Explicit(GeoFramework.Longitude)~System.Double">
            <summary>
            Converts a decimal degree measurement as a Double into an Longitude.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Longitude.op_Explicit(GeoFramework.Longitude)~System.Single">
            <summary>
            Converts a decimal degree measurement as a Double into an Longitude.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Longitude.op_Explicit(System.Int32)~GeoFramework.Longitude">
            <summary>
            Converts a measurement in degrees as an Integer into an Longitude.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Longitude.op_Explicit(System.String)~GeoFramework.Longitude">
            <summary>
            Converts a measurement in the form of a formatted String into an Longitude.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Longitude.op_Explicit(GeoFramework.Longitude)~System.String">
            <summary>
            Converts an Longitude into a String.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <remarks>This operator calls the ToString() method using the current culture.</remarks>
        </member>
        <member name="M:GeoFramework.Longitude.Clone">
            <summary>Creates a copy of the current instance.</summary>
            <returns>An <strong>Longitude</strong> of the same value as the current instance.</returns>
        </member>
        <member name="M:GeoFramework.Longitude.Equals(GeoFramework.Longitude,System.Int32)">
            <summary>
            Compares the current instance to another instance using the specified
            precision.
            </summary>
            <returns>
            	<para>A <strong>Boolean</strong>, <strong>True</strong> if the
                <strong>DecimalDegrees</strong> property of the current instance matches the
                specified instance's <strong>DecimalDegrees</strong> property.</para>
            </returns>
            <remarks>
            	<para>This is typically used in cases where precision is only significant for a few
                digits and exact comparison is not necessary.</para>
            	<para><em>NOTE: This method compares objects by value, not by
                reference.</em></para>
            </remarks>
            <seealso cref="M:GeoFramework.Longitude.Equals(System.Object)">Equals Method</seealso>
            <example>
                These examples compare two fractional values using specific numbers of digits for
                comparison. 
                <code lang="VB" title="[New Example]">
            ' Equals will return False
            Dim Longitude1 As New Longitude(90.15);
            Dim Longitude2 As New Longitude(90.12);
            If Longitude1.Equals(Longitude2, 2) Then
                 Debug.WriteLine("The values are the same to two digits of precision.");
             
            ' Equals will return True
            Dim Longitude1 As New Longitude(90.15);
            Dim Longitude2 As New Longitude(90.12);
            If Longitude1.Equals(Longitude2, 1) Then
                 Debug.WriteLine("The values are the same to one digit of precision.");
                </code>
            	<code lang="CS" title="[New Example]">
            // Equals will return False
            Longitude Longitude1 = new Longitude(90.15);
            Longitude Longitude2 = new Longitude(90.12);
            if(Longitude1.Equals(Longitude2, 2))
                 Console.WriteLine("The values are the same to two digits of precision.");
             
            // Equals will return True
            Longitude Longitude1 = new Longitude(90.15);
            Longitude Longitude2 = new Longitude(90.12);
            if(Longitude1.Equals(Longitude2, 1))
                 Console.WriteLine("The values are the same to one digits of precision.");
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Longitude.ToString(System.String,System.IFormatProvider)">
            <remarks>
             <para>This powerful method returns the current angular measurement in a specific
             format. If no value for the format is specified, a format of
             <strong>hhh°mm'SS.SS"I</strong> (adjusted to the current culture) will be used. The
             resulting <strong>String</strong> can be converted back into an
             <strong>Longitude</strong> via the
             <see href="Angle.Parse">Parse</see> method so long as a delimiter separates each individual
             value.</para>
            </remarks>
            <param name="format">
             <para>A combination of symbols, spaces, and any of the following case-insensitive
             letters: <strong>D</strong> or <strong>H</strong> for hours, <strong>M</strong> for
             minutes, <strong>S</strong> for seconds, and <strong>I</strong> to indicate the
             hemisphere. Here are some examples:</para>
            
             <para>
            	 <table cellspacing="0" cols="3" cellpadding="2" width="100%">
            		 <tbody>
            			 <tr>
            				 <td>HH°MM'SS.SS"</td>
            
            				 <td>HHH.H°</td>
            
            				 <td>HH MM.MM</td>
            
            				 <td>HHHMMSS</td>
            			 </tr>
            
            			 <tr>
            				 <td>HH°MM'SS.SS"I</td>
            
            				 <td>HHH.H°I</td>
            
            				 <td>HH MM.MMI</td>
            
            				 <td>HHHMMSSI</td>
            			 </tr>
            		 </tbody>
            	 </table>
             </para>
            </param>
            <summary>Outputs the current instance as a string using the specified format.</summary>
            <returns>A <strong>String</strong> matching the specified format.</returns>
            <remarks>
            	<para>This method returns the current instance output in a specific format. If no
                value for the format is specified, a default format of "d.dddd" is used. Any string
                output by this method can be converted back into an Longitude object using the
                <strong>Parse</strong> method or <strong>Longitude(string)</strong> constructor.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Longitude.ToString(System.String)">ToString Method</seealso>
            <seealso cref="M:GeoFramework.Longitude.Parse(System.String)">Parse Method</seealso>
            <example>
                This example uses the <strong>ToString</strong> method to output an angle in a
                custom format. The " <strong>h°</strong> " code represents hours along with a
                degree symbol (Alt+0176 on the keypad), and " <strong>m.mm</strong> " represents
                the minutes out to two decimals. Mmm. 
                <code lang="VB">
            Dim MyLongitude As New Longitude(45, 16.772)
            Debug.WriteLine(MyLongitude.ToString("h°m.mm", CultureInfo.CurrentCulture))
            ' Output: 45°16.78
                </code>
            	<code lang="CS">
            Dim MyLongitude As New Longitude(45, 16.772);
            Debug.WriteLine(MyLongitude.ToString("h°m.mm", CultureInfo.CurrentCulture));
            // Output: 45°16.78
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Longitude.DecimalDegrees">
            <summary>Returns the value of the angle as decimal degrees.</summary>
            <value>A <strong>Double</strong> value.</value>
            <remarks>This property returns the value of the angle as a single number.</remarks>
            <seealso cref="P:GeoFramework.Longitude.Hours">Hours Property</seealso>
            <seealso cref="P:GeoFramework.Longitude.Minutes">Minutes Property</seealso>
            <seealso cref="P:GeoFramework.Longitude.Seconds">Seconds Property</seealso>
            <example>
                This example demonstrates how the
                <see cref="P:GeoFramework.Longitude.DecimalDegrees"><strong>DecimalDegrees</strong></see> property is
                calculated automatically when creating an angle using hours, minutes and seconds. 
                <code lang="VB">
            ' Create an angle of 20°30'
            Dim MyLongitude As New Longitude(20, 30)
            ' Setting the DecimalMinutes recalculated other properties 
            Debug.WriteLine(MyLongitude.DecimalDegrees)
            ' Output: "20.5"  the same as 20°30'
                </code>
            	<code lang="CS">
            // Create an angle of 20°30'
            Longitude MyLongitude = New Longitude(20, 30);
            // Setting the DecimalMinutes recalculated other properties 
            Console.WriteLine(MyLongitude.DecimalDegrees)
            // Output: "20.5"  the same as 20°30'
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Longitude.DecimalMinutes">
            <summary>Returns the minutes and seconds as a single numeric value.</summary>
            <seealso cref="P:GeoFramework.Longitude.Minutes">Minutes Property</seealso>
            <seealso cref="P:GeoFramework.Longitude.DecimalDegrees">DecimalDegrees Property</seealso>
            <value>A <strong>Double</strong> value.</value>
            <remarks>
            This property is used when minutes and seconds are represented as a single
            decimal value.
            </remarks>
            <example>
                This example demonstrates how the <strong>DecimalMinutes</strong> property is
                automatically calculated when creating a new angle. 
                <code lang="VB">
            ' Create an angle of 20°10'30"
            Dim MyLongitude As New Longitude(20, 10, 30)
            ' The DecimalMinutes property is automatically calculated
            Debug.WriteLine(MyLongitude.DecimalMinutes)
            ' Output: "10.5"
                </code>
            	<code lang="CS">
            // Create an angle of 20°10'30"
            Longitude MyLongitude = new Longitude(20, 10, 30);
            // The DecimalMinutes property is automatically calculated
            Console.WriteLine(MyLongitude.DecimalMinutes)
            // Output: "10.5"
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Longitude.Hours">
            <summary>Returns the integer hours (degrees) portion of an angular 
            measurement.</summary>
            <seealso cref="P:GeoFramework.Longitude.Minutes">Minutes Property</seealso>
            <seealso cref="P:GeoFramework.Longitude.Seconds">Seconds Property</seealso>
            <value>An <strong>Integer</strong> value.</value>
            <remarks>
            This property is used in conjunction with the <see cref="P:GeoFramework.Longitude.Minutes">Minutes</see>
            and <see cref="P:GeoFramework.Longitude.Seconds">Seconds</see> properties to create a full angular measurement.
            This property is the same as <strong>DecimalDegrees</strong> without any fractional
            value.
            </remarks>
            <example>
                This example creates an angle of 60.5° then outputs the value of the
                <strong>Hours</strong> property, 60. 
                <code lang="VB">
            Dim MyLongitude As New Longitude(60.5)
            Debug.WriteLine(MyLongitude.Hours)
            ' Output: 60
                </code>
            	<code lang="CS">
            Longitude MyLongitude = new Longitude(60.5);
            Console.WriteLine(MyLongitude.Hours);
            // Output: 60
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Longitude.Minutes">
            <summary>Returns the integer minutes portion of an angular measurement.</summary>
            <seealso cref="P:GeoFramework.Longitude.Hours">Hours Property</seealso>
            <seealso cref="P:GeoFramework.Longitude.Seconds">Seconds Property</seealso>
            <remarks>
            This property is used in conjunction with the <see cref="P:GeoFramework.Longitude.Hours">Hours</see> and
            <see cref="P:GeoFramework.Longitude.Seconds">Seconds</see> properties to create a sexagesimal
            measurement.
            </remarks>
            <value>An <strong>Integer</strong>.</value>
            <example>
                This example creates an angle of 45.5° then outputs the value of the
                <strong>Minutes</strong> property, 30. 
                <code lang="VB">
            Dim MyLongitude As New Longitude(45.5)
            Debug.WriteLine(MyLongitude.Minutes)
            ' Output: 30
                </code>
            	<code lang="CS">
            Longitude MyLongitude = new Longitude(45.5);
            Console.WriteLine(MyLongitude.Minutes);
            // Output: 30
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Longitude.Seconds">
            <summary>Returns the seconds minutes portion of an angular measurement.</summary>
            <remarks>
            This property is used in conjunction with the <see cref="P:GeoFramework.Longitude.Hours">Hours</see> and
            <see cref="P:GeoFramework.Longitude.Minutes">Minutes</see> properties to create a sexagesimal
            measurement.
            </remarks>
            <seealso cref="P:GeoFramework.Longitude.Hours">Hours Property</seealso>
            <seealso cref="P:GeoFramework.Longitude.Minutes">Minutes Property</seealso>
            <value>A <strong>Double</strong> value.</value>
            <example>
                This example creates an angle of 45°10.5' then outputs the value of the
                <strong>Seconds</strong> property, 30. 
                <code lang="VB">
            Dim MyLongitude As New Longitude(45, 10.5)
            Debug.WriteLine(MyLongitude.Seconds)
            ' Output: 30
                </code>
            	<code lang="CS">
            Dim MyLongitude As New Longitude(45, 10.5);
            Console.WriteLine(MyLongitude.Seconds);
            // Output: 30
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Longitude.Hemisphere">
            <summary>Returns whether the longitude is east or west of the Prime Meridian.</summary>
            <remarks>
            	<para>When this property changes, the DecimalDegrees property is adjusted: if the
             hemisphere is <strong>West</strong>, a negative sign is placed in front of the
             DecimalDegrees value, and vice versa.</para>
            </remarks>
        </member>
        <member name="P:GeoFramework.Longitude.UtmZoneNumber">
            <summary>Returns the Universal Transverse Mercator zone number for this longitude.</summary>
        </member>
        <member name="P:GeoFramework.Longitude.IsEmpty">
            <summary>Indicates if the current instance has a non-zero value.</summary>
            <value>
            A <strong>Boolean</strong>, <strong>True</strong> if the
            <strong>DecimalDegrees</strong> property is zero.
            </value>
            <seealso cref="F:GeoFramework.Longitude.Empty">Empty Field</seealso>
        </member>
        <member name="P:GeoFramework.Longitude.IsInfinity">
            <summary>Indicates if the current instance represents an infinite value.</summary>
        </member>
        <member name="P:GeoFramework.Longitude.IsInvalid">
            <summary>
            Indicates whether the value is invalid or unspecified.
            </summary>
        </member>
        <member name="P:GeoFramework.Longitude.IsNormalized">
            <summary>Indicates whether the value has been normalized and is within the 
            allowed bounds of -180° and 180°.</summary>
        </member>
        <member name="T:GeoFramework.LongitudeHemisphere">
            <summary>Indicates the position of a longitude measurement relative to the <a href="http://www.greenwichmeridian.com/">Prime Meridian</a>.</summary>
            <remarks>
            <para>This enumeration is used by the <see cref="P:GeoFramework.Longitude.Hemisphere">Hemisphere</see> 
            property of the <see cref="T:GeoFramework.Longitude">Latitude</see> class. If a longitude is west of the 
            Prime Meridian, it's value is displayed as a negative number, or with a single letter (but not 
            both). For example, 105 degrees west can be expressed in either of these
            ways:</para>
            
            <list type="bullet">
             <item>105°W</item>
             <item>-105°</item>
            </list>
            </remarks>
            <seealso cref="P:GeoFramework.Latitude.Hemisphere">Hemisphere Property (Latitude Class)</seealso>
            <seealso cref="T:GeoFramework.LatitudeHemisphere">LatitudeHemisphere Enumeration</seealso>
        </member>
        <member name="F:GeoFramework.LongitudeHemisphere.None">
            <summary>Missing longitude information.</summary>
        </member>
        <member name="F:GeoFramework.LongitudeHemisphere.East">
            <summary>The longitude is east of the Prime Meridian.</summary>
        </member>
        <member name="F:GeoFramework.LongitudeHemisphere.West">
            <summary>The longitude is west of the Prime Meridian.</summary>
        </member>
        <member name="T:GeoFramework.Velocity">
            <summary>
            Represents a measurement of an object's rate of travel in a particular direction.
            </summary>
            <remarks>
                <para>Instances of this class are guaranteed to be thread-safe because the class is
                immutable (its properties can only be changed via constructors).</para>
            </remarks>
        </member>
        <member name="F:GeoFramework.Velocity.Empty">
            <summary>Represents a velocity with no speed or direction.</summary>
        </member>
        <member name="F:GeoFramework.Velocity.Invalid">
            <summary>Represents a velocity with an invalid or unspecified speed and direction.</summary>
        </member>
        <member name="M:GeoFramework.Velocity.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance by parsing speed and bearing from the specified strings.
            </summary>
        </member>
        <member name="M:GeoFramework.Velocity.#ctor(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance by converting the specified strings using the specific culture.
            </summary>
        </member>
        <member name="M:GeoFramework.Velocity.ToString">
            <summary>Outputs the current instance as a string using the default format.</summary>
            <returns><para>A <strong>String</strong> representing the current instance.</para></returns>
        </member>
        <member name="M:GeoFramework.Velocity.Equals(GeoFramework.Velocity)">
            <summary>
            Compares the current instance to the specified velocity.
            </summary>
            <param name="other">A <strong>Velocity</strong> object to compare with.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the values are identical.</returns>
        </member>
        <member name="M:GeoFramework.Velocity.Equals(GeoFramework.Velocity,System.Int32)">
            <summary>
            Compares the current instance to the specified velocity using the specified numeric precision.
            </summary>
            <param name="other">A <strong>Velocity</strong> object to compare with.</param>
            <param name="decimals">An <strong>Integer</strong> specifying the number of fractional digits to compare.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the values are identical.</returns>
        </member>
        <member name="M:GeoFramework.Velocity.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the current instance as a string using the specified format and culture information.
            </summary>
        </member>
        <member name="P:GeoFramework.Velocity.Speed">
            <summary>Gets the objects rate of travel.</summary>
        </member>
        <member name="P:GeoFramework.Velocity.Bearing">
            <summary>Gets the objects direction of travel.</summary>
        </member>
        <member name="P:GeoFramework.Velocity.IsEmpty">
            <summary>
            Indicates whether the speed and bearing are both zero.
            </summary>
        </member>
        <member name="P:GeoFramework.Velocity.IsInvalid">
            <summary>Indicates whether the speed or bearing is invalid or unspecified.</summary>
        </member>
        <member name="T:GeoFramework.Percent">
            <summary>Represents a number as a fraction of one hundred.</summary>
            <example>
                These examples create <strong>Percent</strong> objects using different
                constructors.
                <code lang="CS" description="This example creates a percentage of 25% using the decimal value 0.25.">
            // Create a percentage of 25%
            Percent twentyFivePercent = new Percent(0.25f);
            </code>
            	<code lang="VB" description="This example creates a percentage of 25% using the decimal value 0.25.">
            ' Create a percentage of 25%
            Dim TwentyFivePercent As New Percent(0.25)
            </code>
            	<code lang="CS" description="This example creates a percentage of 25.4% using a string. Since not all cultures use a period (.) as a separator, a CultureInfo object is passed.">
            // Create a percentage of 25%
            Percent twentyFivePercent = New Percent("25.4%", CultureInfo.InvariantCulture);
            </code>
            	<code lang="VB" description="This example creates a percentage of 25.4% using a string. Since not all cultures use a period (.) as a separator, a CultureInfo object is passed.">
            ' Create a percentage of 25%
            Dim TwentyFivePercent As New Percent("25.5%", CultureInfo.InvariantCulture)
            </code>
            </example>
            <remarks>
            	<para>This class is used to express one quantity relative to another quantity.
                Percentage values are presented in string form using the percent symbol of the
                local culture (usually the percent symbol "%"). When percentage values are
                expressed in decimal form the value is divided by one hundred. In other words, the
                value "25%" is equivalent to 0.25.</para>
            	<para>This class is culture-sensitive, meaning that both the percent symbol and the
                numeric format is interpreted and presented differently depending on the local
                culture. As a result, the <strong>CultureInfo</strong> object should be used any
                time a value is parsed from a <strong>String</strong> or output as a String using
                the <strong>ToString</strong> method.</para>
            </remarks>
        </member>
        <member name="F:GeoFramework.Percent.Zero">
            <summary>Represents a percentage value of zero.</summary>
            <value>
            A <strong>Percentage</strong> value, representing <strong>0%</strong> and
            <strong>0.0</strong>.
            </value>
        </member>
        <member name="F:GeoFramework.Percent.OneHundredPercent">
            <summary>Represents a value of one hundred percent.</summary>
            <value>
            A <strong>Percentage</strong> value, meaning <strong>100%</strong> or
            <strong>1.0</strong>.
            </value>
        </member>
        <member name="F:GeoFramework.Percent.FiftyPercent">
            <summary>Represents a percentage of fifty percent.</summary>
            <value>
            A <strong>Percentage</strong> value, representing <strong>50%</strong> or
            <strong>0.5</strong>.
            </value>
        </member>
        <member name="F:GeoFramework.Percent.TwentyFivePercent">
            <summary>Represents a value of twenty-five percent.</summary>
            <value>
            A <strong>Percentage</strong> value, representing <strong>25%</strong> or
            <strong>0.25</strong>.
            </value>
        </member>
        <member name="M:GeoFramework.Percent.#ctor(System.Single)">
            <summary>
            Creates a new instance using the specified value.
            </summary>
            <param name="value">A <strong>Single</strong> value.  A value of ".15" indicates 15%</param>
        </member>
        <member name="M:GeoFramework.Percent.PercentageOf(System.Double)">
            <summary>Returns the percentage of the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Percent.PercentageOf(System.Single)">
            <summary>Returns the percentage of the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Percent.PercentageOf(System.Int32)">
            <summary>Returns the percentage of the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Percent.ToString">
            <summary>Returns the percentage formatted as a <strong>String</strong>.</summary>
        </member>
        <member name="M:GeoFramework.Percent.op_Multiply(GeoFramework.Percent,System.Double)">
            <summary>Returns the percentage of the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Percent.op_Multiply(GeoFramework.Percent,System.Single)">
            <summary>Returns the percentage of the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Percent.op_Multiply(GeoFramework.Percent,System.Int32)">
            <summary>Returns the percentage of the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Percent.Multiply(System.Double)">
            <summary>Returns the percentage of the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Percent.Multiply(System.Single)">
            <summary>Returns the percentage of the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Percent.Multiply(System.Int32)">
            <summary>Returns the percentage of the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Percent.op_Explicit(System.Single)~GeoFramework.Percent">
            <summary>
            Converts the specified value to a <strong>Percent</strong> object.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Percent.op_Explicit(System.Double)~GeoFramework.Percent">
            <summary>
            Converts the specified value to a <strong>Percent</strong> object.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Percent.op_Explicit(System.Int32)~GeoFramework.Percent">
            <summary>
            Converts the specified value to a <strong>Percent</strong> object.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Percent.ToString(System.String,System.IFormatProvider)">
            <summary>Returns the percentage formatted as a <strong>String</strong>.</summary>
        </member>
        <member name="P:GeoFramework.Percent.Value">
            <summary>
            Returns the decimal value of the percentage.
            </summary>
            <remarks>The value of a <strong>Percent</strong> object is 1/100th of the
            percentage.  In other words, if the percentage is "15%" then the <strong>Value</strong>
            property will return <strong>0.15</strong>, and a percentage of "100%" means a
            <strong>Value</strong> of <strong>1.0</strong>.</remarks>
        </member>
        <member name="P:GeoFramework.Percent.IsEmpty">
            <summary>
            Returns whether the value equals zero.
            </summary>
        </member>
        <member name="T:GeoFramework.GeographicSize">
            <summary>
            Represents a two-dimensional rectangular area.
            </summary>
            <remarks>
            	<para>Instances of this class are guaranteed to be thread-safe because the class is
                immutable (it's properties can only be set via constructors).</para>
            </remarks>
        </member>
        <member name="F:GeoFramework.GeographicSize.Empty">
            <summary>Represents a size with no value.</summary>
        </member>
        <member name="F:GeoFramework.GeographicSize.Minimum">
            <summary>Represents a size with no value.</summary>
        </member>
        <member name="F:GeoFramework.GeographicSize.Maximum">
            <summary>Represents the largest possible size on Earth's surface.</summary>
        </member>
        <member name="F:GeoFramework.GeographicSize.Invalid">
            <summary>Represents an invalid geographic size.</summary>
        </member>
        <member name="M:GeoFramework.GeographicSize.#ctor(GeoFramework.Distance,GeoFramework.Distance)">
            <summary>Creates a new instance.</summary>
        </member>
        <member name="M:GeoFramework.GeographicSize.#ctor(System.String)">
            <summary>
            Creates a new instance from the specified string.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:GeoFramework.GeographicSize.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance from the specified string in the specified culture.
            </summary>
            <param name="value">A <strong>String</strong> describing a width and height in degrees (e.g. "1,3").</param>
            <param name="culture">A <strong>CultureInfo</strong> object describing how to parse the string.</param>
            <remarks>This method will attempt to split the specified string into two values, then parse each value
            as an Distance object.  The string must contain two numbers separated by a comma (or other character depending
            on the culture).</remarks>
        </member>
        <member name="M:GeoFramework.GeographicSize.Add(GeoFramework.GeographicSize)">
            <summary>Adds the specified size to the current instance.</summary>
        </member>
        <member name="M:GeoFramework.GeographicSize.Subtract(GeoFramework.GeographicSize)">
            <summary>Subtracts the specified size from the current instance.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GeoFramework.GeographicSize.Multiply(GeoFramework.GeographicSize)" -->
        <member name="M:GeoFramework.GeographicSize.Divide(GeoFramework.GeographicSize)">
            <summary>
            Divides the width and height by the specified size.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.GeographicSize.GetHashCode">
            <summary>
            Returns a unique code based on the object's value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.GeographicSize.Parse(System.String)">
            <summary>
            Returns a GeographicSize whose value matches the specified string.
            </summary>
            <param name="value">A <strong>String</strong> describing a width, followed by a height.</param>
            <returns>A <strong>GeographicSize</strong> whose Width and Height properties match the specified string.</returns>
        </member>
        <member name="M:GeoFramework.GeographicSize.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns a GeographicSize whose value matches the specified string.
            </summary>
            <param name="value">A <strong>String</strong> describing a width, followed by a height.</param>
            <returns>A <strong>GeographicSize</strong> whose Width and Height properties match the specified string.</returns>
            <param name="culture">A <strong>CultureInfo</strong> object describing how to parse the specified string.</param>
        </member>
        <member name="M:GeoFramework.GeographicSize.Equals(GeoFramework.GeographicSize)">
            <summary>
            Compares the value of the current instance to the specified GeographicSize.
            </summary>
            <param name="value">A <strong>GeographicSize</strong> object to compare against.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the values of both objects are precisely the same.</returns>
        </member>
        <member name="M:GeoFramework.GeographicSize.Equals(GeoFramework.GeographicSize,System.Int32)">
            <summary>
            Compares the value of the current instance to the specified GeographicSize, to the specified number of decimals.
            </summary>
            <param name="value">A <strong>GeographicSize</strong> object to compare against.</param>
            <param name="decimals">An <strong>Integer</strong> describing how many decimals the values are rounded to before comparison.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the values of both objects are the same out to the number of decimals specified.</returns>
        </member>
        <member name="P:GeoFramework.GeographicSize.AspectRatio">
            <summary>Returns the ratio of the size's width to its height.</summary>
        </member>
        <member name="P:GeoFramework.GeographicSize.Width">
            <summary>
            Returns the left-to-right size.
            </summary>
        </member>
        <member name="P:GeoFramework.GeographicSize.Height">
            <summary>Returns the top-to-bottom size.</summary>
        </member>
        <member name="P:GeoFramework.GeographicSize.IsEmpty">
            <summary>Indicates if the size has zero values.</summary>
        </member>
        <member name="P:GeoFramework.GeographicSize.IsInvalid">
            <summary>Returns whether the current instance has invalid values.</summary>
        </member>
        <member name="F:GeoFramework.Xml.GmlXmlNamespace">
            <summary>
            Returns the XML namespace for GML documents.
            </summary>
        </member>
        <member name="F:GeoFramework.Xml.GmlXmlPrefix">
            <summary>
            Returns the prefix applied to all GML XML elements.
            </summary>
        </member>
        <member name="F:GeoFramework.Xml.GeoFrameworkXmlNamespace">
            <summary>
            Returns the XML namespace for GeoFramework documents.
            </summary>
        </member>
        <member name="F:GeoFramework.Xml.GeoFrameworkXmlPrefix">
            <summary>
            Returns the prefix applied to all GeoFramework XML elements.
            </summary>
        </member>
        <member name="T:GeoFramework.Ellipsoid">
            <summary> Represents a flattened sphere which approximates Earth's size and shape. </summary>
            <remarks>
            	<para>Mathematics involving points on Earth's surface are difficult to perform with
                precision because the Earth's surface is rugged. In order to maximize precision,
                scientists developed "ellipsoids," smooth ellipsoidal shapes (known as "oblate
                spheriods" or flattened spheres) which attempt to approximate Earth's exact shape.
                Like datums, ellipsoids have been subject to frequent revisions thanks to advances
                in technology, yet countries cannot quickly abandon outdated ellipsoids because so
                much infrastructure is built upon them. As a result, multiple ellipsoids are
                tracked and utilized when converting coordinates from one locale to another. Today,
                there are approximately thirty known ellipsoids upon which an estimated 120
                individual coordinate systems are built.</para>
            	<para>This class is typically used during coordinate conversion to convert from one
                interpretation of Earth's shape to another. All known worldwide ellipsoids such as
                WGS84 and Clarke 1880 are provided as static (Shared in Visual Basic) fields. Most
                developers will not have to use this class until coordinates must be plotted on a
                map. For most purposes, using the default ellipsoid of WGS84 is sufficient.</para>
            	<para>Instances of this class are guaranteed to be thread-safe because the class is
                immutable (its properties can only be set via constructors).</para>
            </remarks>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Airy1830">
            <summary> Represents the Airy ellipsoid of 1830. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.AiryModified1949">
            <summary> Represents the Modified Airy ellipsoid. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.AustralianNational1965">
            <summary> Represents the Australian National ellipsoid of 1965. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Bessel1841">
            <summary> Represents the Bessel ellipsoid of 1841. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Bessel1841Mod">
            <summary> Represents the Bessel Modified ellipsoid of 1841. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Bessel1841Namibia">
            <summary> Represents the Bessel (Namibia) ellipsoid of 1841. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Clarke1858">
            <summary> Represents the Clarke ellipsoid of 1858. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Clarke1866">
            <summary> Represents the Clarke ellipsoid of 1866. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Clarke1866Michigan">
            <summary> Represents the Clarke (Michigan) ellipsoid of 1866. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Clarke1880Benoit">
            <summary> Represents the Clarke (Benoit) ellipsoid of 1880./// </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Clarke1880IGN">
            <summary> Represents the Clarke (IGN) ellipsoid of 1880./// </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Clarke1880RGS">
            <summary> Represents the Clarke (RGS) ellipsoid of 1880./// </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Clarke1880Arc">
            <summary> Represents the Clarke (Arc) ellipsoid of 1880./// </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Clarke1880SGA">
            <summary> Represents the Clarke (SGA 1822) ellipsoid of 1880./// </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Everest1830_37">
            <summary> Represents the Everest (1937 Adjustment) ellipsoid of 1830. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Everest1830_67">
            <summary> Represents the Everest (1967 Definition) ellipsoid of 1830. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Everest1830Modified">
            <summary> Represents the Everest (Modified 1948) ellipsoid of 1880. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Grs80">
            <summary> Represents the Geodetic Reference System ellipsoid of 1980. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Helmert1906">
            <summary> Represents the Helmert ellipsoid of 1906. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Indonesian1974">
            <summary> Represents the Indonesian ellipsoid of 1974. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.International1909">
            <summary> Represents the International ellipsoid of 1909 (1924 alias). </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.International1924">
            <summary> Represents the International ellipsoid of 1924. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Krassovsky1940">
            <summary> Represents the Krassovsky ellipsoid of 1940. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.NWL9D">
            <summary> Represents the Naval Weapons Lab ellipsoid of 1965. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Plessis1817">
            <summary> Represents the Plessis ellipsoid of 1817. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Struve1860">
            <summary> Represents the Struve ellipsoid of 1860. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.WarOffice">
            <summary> Represents the War Office ellipsoid. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Wgs1984">
            <summary> Represents the World Geodetic System ellipsoid of 1984. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.GEM10C">
            <summary> Represents the GEM 10C Gravity Potential Model ellipsoid. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.OSU86F">
            <summary> Represents the OSU86 gravity potential (geoidal) model ellipsoid. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.OSU91A">
            <summary> Represents the OSU91 gravity potential (geoidal) model ellipsoid. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Clarke1880">
            <summary> Represents the Clarke ellipsoid of 1880. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.AuthalicSphere">
            <summary> Represents the Authalic Sphere (r=6371000). </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Grs67">
            <summary> Represents the Geodetic Reference System ellipsoid of 1967. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Ats1977">
            <summary> Represents the Average Terrestrial System ellipsoid of 1977. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Everest1830">
            <summary> Represents the Everest (1830 Definition) ellipsoid. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Wgs1972">
            <summary> Represents the World Geodetic System ellipsoid of 1972. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Everest1830_62">
            <summary> Represents the Everest (1962 Definition) ellipsoid of 1830. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Everest1830_75">
            <summary> Represents the Everest (1975 Definition) ellipsoid of 1830. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Bessel1841Japan">
            <summary> Represents the Bessel (Japan) ellipsoid of 1841. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.GRS1980AuthalicSphere">
            <summary> Represents the GRS 1980 Authalic Sphere (r=6371007). </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Xian1980">
            <summary> Represents the Xian ellipsoid of 1980. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.IAU76">
            <summary> Represents the IAU ellipsoid of 1976. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.GRS67SAD69">
            <summary> Represents the Geodetic Reference System (SAD69) ellipsoid of 1967. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Danish1876">
            <summary> Represents the Danish ellipsoid of 1876./// </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Andrae">
            <summary> Represents the Andrae (Danish 1876 alternate) ellipsoid of 1876./// </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.NormalSphere">
            <summary> Represents the Common Sphere (Clarke 1866 Authalic Sphere alias). </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Clarke1866AuthalicSphere">
            <summary> Represents the Clarke 1866 Authalic Sphere (r=6370997). </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Hough1960">
            <summary> Represents the Hough ellipsoid of 1960. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.PZ1990">
            <summary> Represents the PZ90 ellipsoid. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Clarke1880InternationalFoot">
            <summary> Represents the Clarke (international foot) ellipsoid of 1880. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Everest1880RSO">
            <summary> Represents the Everest (RSO 1969) ellipsoid of 1880. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.International1924AuthalicSphere">
            <summary> Represents the International 1924 Authalic Sphere. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Hughes1980">
            <summary> Represents the Hughes ellipsoid of 1980. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.APL4_9">
            <summary> Represents the Applied Physics ellipsoid of 1965./// </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.CPM">
            <summary> Represents the Comm. des Poids et Mesures ellipsoid of 1799./// </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Delmabre">
            <summary> Represents the Delambre (Belgium) ellipsoid of 1810./// </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Engelis">
            <summary> Represents the Engelis ellipsoid of 1985./// </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Fischer1960">
            <summary> Represents the Fisher ellipsoid of 1960. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.ModifiedFischer1960">
            <summary> Represents the Modified Fisher ellipsoid of 1960. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Fischer1968">
            <summary> Represents the Fisher ellipsoid of 1968. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.NewInternational1967">
            <summary> Represents the New International ellipsoid of 1967. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Kaula">
            <summary> Represents the Kaula ellipsoid of 1961. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Lerch">
            <summary> Represents the Lerch ellipsoid of 1979. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Merit">
            <summary> Represents the MERIT ellipsoid of 1983. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Maupertius">
            <summary> Represents the Maupertius ellipsoid of 1738. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.SoutheastAsia">
            <summary> Represents the Southeast Asia (Modified Fisher ellipsoid of 1960) ellipsoid. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Sgs1985">
            <summary> Represents the SGS ellipsoid of 1985. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.SouthAmerican1969">
            <summary> Represents the South American ellipsoid of 1969. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Walbeck">
            <summary> Represents the Walbeck ellipsoid. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Wgs1960">
            <summary> Represents the World Geodetic System ellipsoid of 1960. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Wgs1966">
            <summary> Represents the World Geodetic System ellipsoid of 1966. </summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Default">
            <summary> Represents the default ellipsoid, WGS1984. </summary>
        </member>
        <member name="M:GeoFramework.Ellipsoid.#ctor(System.String,GeoFramework.Distance,GeoFramework.Distance)">
            <summary>
            Creates a new instance with the specified type, name, equatorial raduis and polar radius.
            </summary>
            <param name="name">The name for the new ellipsoid.</param>
            <param name="equatorialRadius">A <strong>Distance</strong> object specifying the distance from the center of the Earth to the equator.</param>
            <param name="polarRadius">A <strong>Distance</strong> object specifying the distance from the center of the Earth to the poles.</param>
            <remarks>This constructor allows user-defined ellipsoids to be created for specialized applications.  </remarks>
        </member>
        <member name="M:GeoFramework.Ellipsoid.#ctor(System.String,GeoFramework.Distance,System.Double)">
            <summary>
            Internal contructor for static list generation
            </summary>
            <param name="name"> The name of the ellipsoid </param>
            <param name="equatorialRadius"> The radius of the ellipsoid at it's widest point (semi major axis) </param>
            <param name="inverseFlattening"> The inverse of the ratio of the major/minor axis </param>
        </member>
        <member name="M:GeoFramework.Ellipsoid.#ctor(System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Internal contructor for static list generation
            </summary>
            <param name="epsgNumber"> The ID number for this ellipsoid in the EPSG database </param>
            <param name="a"> The length of the semi major axis (the large pole of the ellipse) in meters </param>
            <param name="invf"> The inverse of the ratio of the major/minor axis </param>
            <param name="b">The length of the semi mimor axis (the small pole of the ellipse) in meters </param>
            <param name="name"> The name of the ellipsoid </param>
        </member>
        <member name="M:GeoFramework.Ellipsoid.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance from the specified XML.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:GeoFramework.Ellipsoid.SanityCheck">
            <summary>
            Validates the ellipsoid. Called in the constructor.
            </summary>
        </member>
        <member name="M:GeoFramework.Ellipsoid.Calculate">
            <summary>
            Calculates the common ellipsoid properties. Called from the constructor
            </summary>
        </member>
        <member name="M:GeoFramework.Ellipsoid.FromName(System.String)">
            <summary>
            Returns a Ellipsoid object matching the specified name.
            </summary>
            <param name="name">A <strong>String</strong> describing the name of an existing Ellipsoid.</param>
            <returns>A <strong>Ellipsoid</strong> object matching the specified string, or null if no Ellipsoid was found.</returns>
        </member>
        <member name="M:GeoFramework.Ellipsoid.FromEPSGNumber(System.Int32)">
            <summary>
            Returns the datum corresponding to the EPSG code
            </summary>
            <param name="epsgNumber"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Ellipsoid.Equals(GeoFramework.Ellipsoid)">
            <summary>
            Returns whether the current ellipsoid has the same value as the specified ellipsoid.
            </summary>
            <param name="value">An <strong>Ellipsoid</strong> object to compare against.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the equatorial radius and polar radius
            of both ellipsoids are equal.  When both radii are equal, all other calculated properties will also 
            be equal.  The name of the ellipsoid is not compared.</returns>
        </member>
        <member name="M:GeoFramework.Ellipsoid.Equals(GeoFramework.Ellipsoid,System.Int32)">
            <summary>
            Returns whether the current ellipsoid has the same value as the specified ellipsoid.
            </summary>
            <param name="value">An <strong>Ellipsoid</strong> object to compare against.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the equatorial radius and polar radius
            of both ellipsoids are equal.  When both radii are equal, all other calculated properties will also 
            be equal.  The name of the ellipsoid is not compared.</returns>
        </member>
        <member name="P:GeoFramework.Ellipsoid.EPSGNumber">
            <summary>
            European Petroleum Survey Group number for this ellipsoid. The ESPG standards are now maintained by OGP
            (International Association of Oil and Gas Producers).
            </summary>
        </member>
        <member name="P:GeoFramework.Ellipsoid.Name">
            <summary>
            Indicates the descriptive name of the ellipsoid.
            </summary>
            <value>A <strong>String</strong> containing the name of the ellipsoid.</value>
            <remarks>This property is typically used to display ellipsoid information on a user interface.</remarks>
        </member>
        <member name="P:GeoFramework.Ellipsoid.EquatorialRadius">
            <summary> Represents the distance from Earth's center to the equator. </summary>
            <value>A <strong>Distance</strong> object.</value>
            <remarks>
            	<para>This property defines the radius of the Earth from its center to the equator.
                This property is used in conjunction with the <strong>PolarRadius</strong> property
                to define an ellipsoidal shape. This property returns the same value as the
                <strong>SemiMajorAxis</strong> property.</para>
            </remarks>
            <seealso cref="P:GeoFramework.Ellipsoid.PolarRadius">PolarRadius Property</seealso>
        </member>
        <member name="P:GeoFramework.Ellipsoid.PolarRadius">
            <summary> Represents the distance from Earth's center to the North or South pole. </summary>
            <value>A <strong>Distance</strong> object.</value>
            <remarks>
            	<para>This property defines the radius of the Earth from its center to the equator.
                This property is used in conjunction with the <strong>EquatorialRadius</strong>
                property to define an ellipsoidal shape. This property returns the same value as
                the <strong>SemiMinorAxis</strong> property.</para>
            </remarks>
            <seealso cref="P:GeoFramework.Ellipsoid.EquatorialRadius">EquatorialRadius Property</seealso>
        </member>
        <member name="P:GeoFramework.Ellipsoid.SemiMajorAxis">
            <summary> Represents the distance from Earth's center to the equator. </summary>
            <value>A <strong>Distance</strong> containing Earth's equatorial radius.</value>
            <remarks>
            	<para>This property defines the radius of the Earth from its center to the equator.
                This property is used in conjunction with the <strong>SemiMinorAxis</strong>
                property to define an ellipsoidal shape. This property returns the same value as
                the <strong>EquatorialRadius</strong> property.</para>
            </remarks>
            <seealso cref="P:GeoFramework.Ellipsoid.EquatorialRadius">EquatorialRadius Property</seealso>
        </member>
        <member name="P:GeoFramework.Ellipsoid.SemiMinorAxis">
            <summary> Represents the distance from Earth's center to the North or South pole. </summary>
            <value>A <strong>Distance</strong> containing Earth's polar radius.</value>
            <remarks>
            	<para>This property defines the radius of the Earth from its center to the equator.
                This property is used in conjunction with the <strong>SemiMajorAxis</strong>
                property to define an ellipsoidal shape. This property returns the same value as
                the <strong>PolarRadius</strong> property.</para>
            </remarks>
            <seealso cref="P:GeoFramework.Ellipsoid.EquatorialRadius">EquatorialRadius Property</seealso>
        </member>
        <member name="P:GeoFramework.Ellipsoid.IsSpherical">
            <summary>Indicates if the ellipsoid is describing a perfect sphere. </summary>
            <remarks>
            Mathematical formulas such as map projection and coordinate conversion can be
            optimized if the ellipsoid they are working with is spherical. For more precise
            results, however, spherical ellipsoids should not be used. This property, when used
            correctly, can improve performance for mathematics when coordinate precision is less of
            a concern, such as viewing a map from a high altitude.
            </remarks>
        </member>
        <member name="P:GeoFramework.Ellipsoid.InverseFlattening">
            <summary>
            Indicates the inverse of the shape of an ellipsoid relative to a sphere.
            </summary>
            <value>A <strong>Double</strong> containing the ellipsoid's flattening.</value>
            <remarks>
            This property is used frequently in equations. Inverse flattening is defined as
            one divided by the <strong>Flattening</strong> property.:
            </remarks>
            <seealso cref="P:GeoFramework.Ellipsoid.EquatorialRadius">EquatorialRadius Property</seealso>
        </member>
        <member name="P:GeoFramework.Ellipsoid.Flattening">
            <summary>Indicates the shape of the ellipsoid relative to a sphere. </summary>
            <value>A <strong>Double</strong> containing the ellipsoid's flattening.</value>
            <remarks>
            This property compares the equatorial radius with the polar radius to measure the
            amount that the ellipsoid is "squished" vertically.
            </remarks>
            <seealso cref="P:GeoFramework.Ellipsoid.EquatorialRadius">EquatorialRadius Property</seealso>
        </member>
        <member name="P:GeoFramework.Ellipsoid.Eccentricity">
            <summary>Returns the rate of flattening of the ellipsoid. </summary>
            <value>A <strong>Double</strong> measuring how elongated the ellipsoid is.</value>
            <remarks>
            The eccentricity is a positive number less than 1, or 0 in the case of a circle.
            The greater the eccentricity is, the larger the ratio of the equatorial radius to the
            polar radius is, and therefore the more elongated the ellipse is.
            </remarks>
        </member>
        <member name="P:GeoFramework.Ellipsoid.EccentricitySquared">
            <summary>Returns the square of the eccentricity. </summary>
            <remarks>
            This property returns the value of the <strong>Eccentricity</strong> property,
            squared. It is used frequently during coordinate conversion formulas.
            </remarks>
        </member>
        <member name="T:GeoFramework.Distance">
            <summary>
            Represents the measurement of a straight line between between two points on
            Earth's surface.
            </summary>
        </member>
        <member name="F:GeoFramework.Distance.EarthsEquatorialRadiusWgs1984">
            <summary>
            Returns the distance from the center of the Earth to the equator according to the
            WGS1984 ellipsoid.
            </summary>
            <seealso cref="F:GeoFramework.Distance.EarthsPolarRadiusWgs1984">EarthsPolarRadiusWgs1984 
            Field</seealso>
            <seealso cref="F:GeoFramework.Distance.EarthsAverageRadius">EarthsAverageRadius Field</seealso>
        </member>
        <member name="F:GeoFramework.Distance.Infinity">
            <summary>
            Represents an infinite distance.
            </summary>
            <remarks>This field is typically used to indicate the absence of a distance limit.  For example,
            the Layer class of GIS.NET uses Infinity to indicate that the layer is drawn no matter how far
            out the user zooms away from it.  </remarks>
        </member>
        <member name="F:GeoFramework.Distance.EarthsPolarRadiusWgs1984">
            <summary>
            Returns the distance from the center of the Earth to a pole according to the
            WGS1984 ellipsoid.
            </summary>
            <seealso cref="F:GeoFramework.Distance.EarthsEquatorialRadiusWgs1984">EarthsEquatorialRadiusWgs1984 Field</seealso>
            <seealso cref="F:GeoFramework.Distance.EarthsAverageRadius">EarthsAverageRadius Field</seealso>
        </member>
        <member name="F:GeoFramework.Distance.EarthsAverageRadius">
            <summary>Returns the average radius of the Earth.</summary>
            <seealso cref="F:GeoFramework.Distance.EarthsEquatorialRadiusWgs1984">EarthsEquatorialRadiusWgs1984 Field</seealso>
            <seealso cref="F:GeoFramework.Distance.EarthsPolarRadiusWgs1984">EarthsPolarRadiusWgs1984 Field</seealso>
        </member>
        <member name="F:GeoFramework.Distance.Invalid">
            <summary>
            Represents an invalid or unspecified value.
            </summary>
        </member>
        <member name="M:GeoFramework.Distance.#ctor(System.Double,GeoFramework.DistanceUnit)">
            <summary>Creates a new instance using the specified value and unit type.</summary>
            <example>
            This example uses a constructor to create a new distance of 50km.
            <code lang="VB">
            Dim MyDistance As New Distance(50, DistanceUnit.Kilometers)
            </code>
            <code lang="C#">
            Distance MyDistance = new Distance(50, DistanceUnit.Kilometers);
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.Distance.#ctor(System.String)">
            <summary>Creates a new instance from the the specified string.</summary>
            <param name="value">
             <para>A <strong>String</strong> in any format accepted by the
             <see cref="M:GeoFramework.Distance.Parse(System.String)">Parse</see>
             method.</para>
            </param>
            <remarks>
            This powerful constructor is typically used to initialize an instance with a
            string-based distance measurement, such as one entered by a user or read from a file.
            This constructor can accept any output created via the
            <see cref="M:GeoFramework.Distance.ToString(System.String)">ToString</see> method.
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Parse method requires a valid distance measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">1. The numeric portion of the distance measurement was not recognized.<br/>
            2. The distance unit type was not recognized or not specified.</exception>
            <example>
            This example demonstrates how the to use this constructor.
            <code lang="VB">
            Dim MyDistance As Distance
            ' Create a distance of 50 kilometers
            MyDistance = New Distance("50 km")
            ' Create a distance of 14,387 miles, then convert it into inches
            MyDistance = New Distance("14,387 statute miles").ToInches
            ' Parse an untrimmed measurement into 50 feet
            MyDistance = New Distance("	50 '	   ")
            </code>
            <code lang="C#">
            Distance MyDistance;
            // Create a distance of 50 kilometers
            MyDistance = new Distance("50 km");
            // Create a distance of 14,387 miles, then convert it into inches
            MyDistance = new Distance("14,387 statute miles").ToInches;
            // Parse an untrimmed measurement into 50 feet
            MyDistance = new Distance("	50 '	   ");
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.Distance.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance from the specified XML.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:GeoFramework.Distance.GetMinimumTravelTime(GeoFramework.Speed)">
            <summary>
            Returns the time required to travel the entire distance at the specified speed.
            </summary>
            <param name="speed">A <strong>Speed</strong> object representing a travel speed.</param>
            <returns>A <strong>TimeSpan</strong> object representing the total time required to travel the entire distance.</returns>
        </member>
        <member name="M:GeoFramework.Distance.GetMinimumTravelSpeed(System.TimeSpan)">
            <summary>
            Returns the speed required to travel the entire distance in the specified time.
            </summary>
            <param name="time">A <strong>TimeSpan</strong> object representing the time to travel the entire distance.</param>
            <returns>A <strong>Speed</strong> object representing the speed required to travel the distance in exactly the time specified.</returns>
        </member>
        <member name="M:GeoFramework.Distance.ToFeet">
            <summary>Converts the current measurement into feet.</summary>
            <returns>A new <strong>Distance</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion into feet regardless of the current unit
            type. You may convert from any unit type to any unit type.
            </remarks>
            <seealso cref="M:GeoFramework.Distance.ToInches">ToInches Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToKilometers">ToKilometers Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToMeters">ToMeters Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToNauticalMiles">ToNauticalMiles Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToStatuteMiles">ToStatuteMiles Method</seealso>
            <example>
            This example converts various distances into feet.  Note that the ToFeet method converts distances
            from any source type.
            <code lang="VB">
            ' Create distances of different unit types
            Dim Distance1 As New Distance(10, DistanceUnit.Inches)
            Dim Distance2 As New Distance(20, DistanceUnit.StatuteMiles)
            Dim Distance3 As New Distance(50, DistanceUnit.Kilometers)
            ' Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToFeet.ToString)
            Debug.WriteLine(Distance2.ToFeet.ToString)
            Debug.WriteLine(Distance3.ToFeet.ToString)
            </code>
            <code lang="C#">
            // Create distances of different unit types
            Distance Distance1 = new Distance(10, DistanceUnit.Inches);
            Distance Distance2 = new Distance(20, DistanceUnit.StatuteMiles);
            Distance Distance3 = new Distance(50, DistanceUnit.Kilometers);
            // Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToFeet().ToString());
            Debug.WriteLine(Distance2.ToFeet().ToString());
            Debug.WriteLine(Distance3.ToFeet().ToString());
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.Distance.ToInches">
            <summary>Converts the current measurement into inches.</summary>
            <returns>A new <strong>Distance</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion into feet regardless of the current unit
            type. You may convert from any unit type to any unit type.
            </remarks>
            <example>
            This example converts various distances into inches.  Note that the ToInches method converts distances
            from any source type.
            <code lang="VB">
            ' Create distances of different unit types
            Dim Distance1 As New Distance(10, DistanceUnit.Feet)
            Dim Distance2 As New Distance(20, DistanceUnit.StatuteMiles)
            Dim Distance3 As New Distance(50, DistanceUnit.Kilometers)
            ' Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToInches.ToString)
            Debug.WriteLine(Distance2.ToInches.ToString)
            Debug.WriteLine(Distance3.ToInches.ToString)
            </code>
            <code lang="C#">
            // Create distances of different unit types
            Distance Distance1 = new Distance(10, DistanceUnit.Feet);
            Distance Distance2 = new Distance(20, DistanceUnit.StatuteMiles);
            Distance Distance3 = new Distance(50, DistanceUnit.Kilometers);
            // Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToInches().ToString());
            Debug.WriteLine(Distance2.ToInches().ToString());
            Debug.WriteLine(Distance3.ToInches().ToString());
            </code>
            </example>
            <seealso cref="M:GeoFramework.Distance.ToFeet">ToFeet Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToKilometers">ToKilometers Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToMeters">ToMeters Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToNauticalMiles">ToNauticalMiles Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToStatuteMiles">ToStatuteMiles Method</seealso>
        </member>
        <member name="M:GeoFramework.Distance.ToKilometers">
            <returns>A new <strong>Distance</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion into feet regardless of the current unit
            type. You may convert from any unit type to any unit type.
            </remarks>
            <summary>Converts the current measurement into kilometers.</summary>
            <example>
            This example converts various distances into kilometers.  Note that the ToKilometers method converts 
            distances from any source type.
            <code lang="VB">
            ' Create distances of different unit types
            Dim Distance1 As New Distance(10, DistanceUnit.Feet)
            Dim Distance2 As New Distance(20, DistanceUnit.StatuteMiles)
            Dim Distance3 As New Distance(50, DistanceUnit.Inches)
            ' Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToKilometers.ToString)
            Debug.WriteLine(Distance2.ToKilometers.ToString)
            Debug.WriteLine(Distance3.ToKilometers.ToString)
            </code>
            <code lang="C#">
            // Create distances of different unit types
            Distance Distance1 = new Distance(10, DistanceUnit.Feet);
            Distance Distance2 = new Distance(20, DistanceUnit.StatuteMiles);
            Distance Distance3 = new Distance(50, DistanceUnit.Inches);
            // Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToKilometers().ToString());
            Debug.WriteLine(Distance2.ToKilometers().ToString());
            Debug.WriteLine(Distance3.ToKilometers().ToString());
            </code>
            </example>
            <seealso cref="M:GeoFramework.Distance.ToFeet">ToFeet Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToInches">ToInches Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToMeters">ToMeters Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToNauticalMiles">ToNauticalMiles Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToStatuteMiles">ToStatuteMiles Method</seealso>
        </member>
        <member name="M:GeoFramework.Distance.ToMeters">
            <returns>A new <strong>Distance</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion into feet regardless of the current unit
            type. You may convert from any unit type to any unit type.
            </remarks>
            <summary>Converts the current measurement into meters.</summary>
            <example>
            This example converts various distances into meters.  Note that the ToMeters method converts distances
            from any source type.
            <code lang="VB">
            ' Create distances of different unit types
            Dim Distance1 As New Distance(10, DistanceUnit.Feet)
            Dim Distance2 As New Distance(20, DistanceUnit.StatuteMiles)
            Dim Distance3 As New Distance(50, DistanceUnit.Inches)
            ' Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToMeters().ToString)
            Debug.WriteLine(Distance2.ToMeters().ToString)
            Debug.WriteLine(Distance3.ToMeters().ToString)
            </code>
            <code lang="C#">
            // Create distances of different unit types
            Distance Distance1 = new Distance(10, DistanceUnit.Feet);
            Distance Distance2 = new Distance(20, DistanceUnit.StatuteMiles);
            Distance Distance3 = new Distance(50, DistanceUnit.Inches);
            // Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToMeters().ToString());
            Debug.WriteLine(Distance2.ToMeters().ToString());
            Debug.WriteLine(Distance3.ToMeters().ToString());
            </code>
            </example>
            <seealso cref="M:GeoFramework.Distance.ToFeet">ToFeet Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToInches">ToInches Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToKilometers">ToKilometers Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToNauticalMiles">ToNauticalMiles Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToStatuteMiles">ToStatuteMiles Method</seealso>
        </member>
        <member name="M:GeoFramework.Distance.ToCentimeters">
            <returns>A new <strong>Distance</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion into feet regardless of the current unit
            type. You may convert from any unit type to any unit type.
            </remarks>
            <summary>Converts the current measurement into meters.</summary>
            <example>
            This example converts various distances into meters.  Note that the ToMeters method converts distances
            from any source type.
            <code lang="VB">
            ' Create distances of different unit types
            Dim Distance1 As New Distance(10, DistanceUnit.Feet)
            Dim Distance2 As New Distance(20, DistanceUnit.StatuteMiles)
            Dim Distance3 As New Distance(50, DistanceUnit.Inches)
            ' Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToMeters().ToString)
            Debug.WriteLine(Distance2.ToMeters().ToString)
            Debug.WriteLine(Distance3.ToMeters().ToString)
            </code>
            <code lang="C#">
            // Create distances of different unit types
            Distance Distance1 = new Distance(10, DistanceUnit.Feet);
            Distance Distance2 = new Distance(20, DistanceUnit.StatuteMiles);
            Distance Distance3 = new Distance(50, DistanceUnit.Inches);
            // Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToMeters().ToString());
            Debug.WriteLine(Distance2.ToMeters().ToString());
            Debug.WriteLine(Distance3.ToMeters().ToString());
            </code>
            </example>
            <seealso cref="M:GeoFramework.Distance.ToFeet">ToFeet Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToInches">ToInches Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToKilometers">ToKilometers Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToNauticalMiles">ToNauticalMiles Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToStatuteMiles">ToStatuteMiles Method</seealso>
        </member>
        <member name="M:GeoFramework.Distance.ToNauticalMiles">
            <returns>A new <strong>Distance</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion into feet regardless of the current unit
            type. You may convert from any unit type to any unit type.
            </remarks>
            <summary>Converts the current measurement into nautical miles.</summary>
            <example>
            This example converts various distances into nautical miles.  Note that the ToNauticalMiles method 
            converts distances from any source type.
            <code lang="VB">
            ' Create distances of different unit types
            Dim Distance1 As New Distance(10, DistanceUnit.Feet)
            Dim Distance2 As New Distance(20, DistanceUnit.StatuteMiles)
            Dim Distance3 As New Distance(50, DistanceUnit.Inches)
            ' Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToNauticalMiles.ToString)
            Debug.WriteLine(Distance2.ToNauticalMiles.ToString)
            Debug.WriteLine(Distance3.ToNauticalMiles.ToString)
            </code>
            <code lang="C#">
            // Create distances of different unit types
            Distance Distance1 = new Distance(10, DistanceUnit.Feet);
            Distance Distance2 = new Distance(20, DistanceUnit.StatuteMiles);
            Distance Distance3 = new Distance(50, DistanceUnit.Inches);
            // Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToNauticalMiles().ToString());
            Debug.WriteLine(Distance2.ToNauticalMiles().ToString());
            Debug.WriteLine(Distance3.ToNauticalMiles().ToString());
            </code>
            </example>
            <seealso cref="M:GeoFramework.Distance.ToFeet">ToFeet Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToInches">ToInches Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToKilometers">ToKilometers Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToMeters">ToMeters Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToStatuteMiles">ToStatuteMiles Method</seealso>
        </member>
        <member name="M:GeoFramework.Distance.ToStatuteMiles">
            <returns>A new <strong>Distance</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion into feet regardless of the current unit
            type. You may convert from any unit type to any unit type.
            </remarks>
            <summary>Converts the current measurement into miles.</summary>
            <example>
            This example converts various distances into statute miles.  Note that the ToStatuteMiles method 
            converts distances from any source type.
            <code lang="VB">
            ' Create distances of different unit types
            Dim Distance1 As New Distance(10, DistanceUnit.Feet)
            Dim Distance2 As New Distance(20, DistanceUnit.StatuteMiles)
            Dim Distance3 As New Distance(50, DistanceUnit.Inches)
            ' Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToStatuteMiles.ToString)
            Debug.WriteLine(Distance2.ToStatuteMiles.ToString)
            Debug.WriteLine(Distance3.ToStatuteMiles.ToString)
            </code>
            <code lang="C#">
            // Create distances of different unit types
            Distance Distance1 = new Distance(10, DistanceUnit.Feet);
            Distance Distance2 = new Distance(20, DistanceUnit.StatuteMiles);
            Distance Distance3 = new Distance(50, DistanceUnit.Inches);
            // Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToStatuteMiles().ToString());
            Debug.WriteLine(Distance2.ToStatuteMiles().ToString());
            Debug.WriteLine(Distance3.ToStatuteMiles().ToString());
            </code>
            </example>
            <seealso cref="M:GeoFramework.Distance.ToFeet">ToFeet Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToInches">ToInches Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToKilometers">ToKilometers Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToMeters">ToMeters Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToNauticalMiles">ToNauticalMiles Method</seealso>
        </member>
        <member name="M:GeoFramework.Distance.ToImperialUnitType">
            <summary>
            Attempts to adjust the unit type to keep the value above 1 and uses the local region measurement system.
            </summary>
            <returns>A <strong>Distance</strong> converted to the chosen unit type.</returns>
            <remarks>When a distance becomes smaller, it may make more sense to the 
            user to be expressed in a smaller unit type.  For example, a distance of
            0.001 kilometers might be better expressed as 1 meter.  This method will
            determine the smallest Imperial unit type.</remarks>
        </member>
        <member name="M:GeoFramework.Distance.ToMetricUnitType">
            <summary>
            Attempts to adjust the unit type to keep the value above 1 and uses the local region measurement system.
            </summary>
            <returns>A <strong>Distance</strong> converted to the chosen unit type.</returns>
            <remarks>When a distance becomes smaller, it may make more sense to the 
            user to be expressed in a smaller unit type.  For example, a distance of
            0.001 kilometers might be better expressed as 1 meter.  This method will
            determine the smallest metric unit type.</remarks>
        </member>
        <member name="M:GeoFramework.Distance.ToLocalUnitType">
            <summary>
            Attempts to adjust the unit type to keep the value above 1 and uses the local region measurement system.
            </summary>
            <returns>A <strong>Distance</strong> converted to the chosen unit type.</returns>
            <remarks>When a distance becomes smaller, it may make more sense to the 
            user to be expressed in a smaller unit type.  For example, a distance of
            0.001 kilometers might be better expressed as 1 meter.  This method will
            find the smallest unit type and convert the unit to the user's local
            numeric system (Imperial or Metric).</remarks>
        </member>
        <member name="M:GeoFramework.Distance.ToSpeed(System.TimeSpan)">
            <summary>
            Returns the distance traveled at the current speed for the specified time.
            </summary>
            <param name="time">A length of time to travel.</param>
            <returns>A <strong>Distance</strong> representing the distance travelled at
            the current speed for the specified length of time.</returns>
        </member>
        <member name="M:GeoFramework.Distance.Round(System.Int32)">
            <summary>
            Returns a new instance rounded to the specified number of digits.
            </summary>
            <param name="decimals">An <strong>Integer</strong> specifying the number of digits to round off to.</param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Distance.ToString(System.String)">
            <summary>
            Outputs the current instance as a string using the specified format.
            </summary>
            <returns>A <strong>String</strong> containing the distance in the specified format.</returns>
            <param name="format">
             <para>A combination of symbols, spaces, and any of the following case-insensitive
             letters: <strong>#</strong> or <strong>0</strong> for the value property, and <strong>U</strong> for
             distance units. Here are some examples:</para>
            
             <para>
            	 <table cellspacing="0" cols="3" cellpadding="2" width="100%">
            			 <tr>
            				 <td>##0.## uu</td>
            				 <td>## uuuu</td>
            				 <td># u</td>
            				 <td>###</td>
            			 </tr>
            	 </table>
             </para>
            </param>
            <remarks>This method allows a custom format to be applied to the ToString method.  Numeric formats
            will be adjusted to the machine's local UI culture.</remarks>
            <example>
            This example uses the ToString method to populate a TextBox with a distance measurement using a custom format.
            <code lang="VB">
            ' Declare a distance of 75 miles
            Dim MyDistance As New Distance(75, DistanceUnit.StatuteMiles)
            ' Set the text box to the distance, formatted as a string
            MyTextBox.Text = MyDistance.ToString("## uuu")
            </code>
            <code lang="C#">
            // Declare a distance of 75 miles
            Distance MyDistance = new Distance(75, DistanceUnit.StatuteMiles);
            // Set the text box to the distance, formatted as a string
            MyTextBox.Text = MyDistance.ToString("## uuu");
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.Distance.Equals(System.Object)">
            <summary>
            Compares the current instance to the specified object.
            </summary>
            <param name="obj">An <strong>Object</strong> to compare with.</param>
            <returns>A <strong>Boolean</strong>, True if the values are equivalent.</returns>
        </member>
        <member name="M:GeoFramework.Distance.ToString">
            <summary>
            Outputs the current instance as a string using the default format.
            </summary>
            <returns>A <strong>String</strong> containing the current distance in the default format.</returns>
            <remarks>The default format used is "##0.## uu" where <strong>uu</strong> is the distance unit type.
            The numeric format may vary depending on the machine's local culture.</remarks>
            <example>
            This example uses the ToString method to populate a TextBox with a distance measurement.
            <code lang="VB">
            ' Declare a distance of 75 miles
            Dim MyDistance As New Distance(75, DistanceUnit.StatuteMiles)
            ' Set the text box to the distance, formatted as a string
            MyTextBox.Text = MyDistance.ToString
            </code>
            <code lang="C#">
            // Declare a distance of 75 miles
            Distance MyDistance = new Distance(75, DistanceUnit.StatuteMiles);
            // Set the text box to the distance, formatted as a string
            MyTextBox.Text = MyDistance.ToString();
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.Distance.Random">
            <summary>Returns a random distance between 0 and 1,000 meters.</summary>
            <returns>A <strong>Distance</strong> containing a random value, converted to local units.</returns>
        </member>
        <member name="M:GeoFramework.Distance.Random(System.Random)">
            <summary>Returns a random distance between 0 and 1,000 meters.</summary>
            <returns>A <strong>Distance</strong> containing a random value, converted to local units.</returns>
            <param name="seed">An <strong>Integer</strong> passed to the <strong>Random</strong> class as a
            random number seed.
            </param>
        </member>
        <member name="M:GeoFramework.Distance.Random(GeoFramework.Distance)">
            <summary>
            Returns a random distance between zero and the specified maximum.
            </summary>
            <param name="maximum"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Distance.Parse(System.String)">
            <summary>Converts a string-based distance measurement into a Distance object.</summary>
            <remarks>
            This powerful constructor is typically used to convert a string-based distance
            measurement, such as one entered by a user or read from a file, into a
            <strong>Distance</strong> object. This method will accept any output created via the
            <see cref="M:GeoFramework.Distance.ToString(System.String)">ToString</see> method.
            </remarks>
            <param name="value">
             <para>A <strong>String</strong> describing a case-insensitive distance measurement,
             in any of the following formats, where <strong>N</strong> represents a numeric
             value:</para>
            
             <list type="bullet">
            	 <item>N m</item>
            	 <item>N meters</item>
            	 <item>N meter</item>
            	 <item>N metre</item>
            	 <item>N metres</item>
            	 <item>N km</item>
            	 <item>N kilometers</item>
            	 <item>N kilometer</item>
            	 <item>N kilometre</item>
            	 <item>N kilometres</item>
            	 <item>N ft</item>
            	 <item>N'</item>
            	 <item>N foot</item>
            	 <item>N feet</item>
            	 <item>N in</item>
            	 <item>N"</item>
            	 <item>N inch</item>
            	 <item>N inches</item>
            	 <item>N mi</item>
            	 <item>N mile</item>
            	 <item>N miles</item>
            	 <item>N nm</item>
            	 <item>N nautical mile</item>
            	 <item>N nautical miles</item>
             </list>
            </param>
            <returns>
            A new Distance object containing the parsed <see cref="P:GeoFramework.Distance.Value">value</see> and
            <see cref="P:GeoFramework.Distance.Units">unit</see> type.
            </returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Parse method requires a valid distance measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">1. The numeric portion of the distance measurement was not recognized.<br/>
            2. The distance unit type was not recognized or not specified.</exception>
            <example>
            This example demonstrates how the Parse method can convert several string formats into a Distance object.
            <code lang="VB">
            Dim NewDistance As Distance
            ' Create a distance of 50 kilometers
            NewDistance = Distance.Parse("50 km")
            ' Create a distance of 14,387 miles, then convert it into inches
            NewDistance = Distance.Parse("14,387 statute miles").ToInches
            ' Parse an untrimmed measurement into 50 feet
            NewDistance = Distance.Parse("	50 '	   ")
            </code>
            <code lang="C#">
            Distance NewDistance;
            // Create a distance of 50 kilometers
            NewDistance = Distance.Parse("50 km");
            // Create a distance of 14,387 miles, then convert it into inches
            NewDistance = Distance.Parse("14,387 statute miles").ToInches;
            // Parse an untrimmed measurement into 50 feet
            NewDistance = Distance.Parse("	50 '	   ");
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.Distance.Equals(GeoFramework.Distance)">
            <summary>
            Compares the current instance to the specified distance object.
            </summary>
            <param name="value">A <strong>Distance</strong> object to compare with.</param>
            <returns>A <strong>Boolean</strong>, True if the values are equivalent.</returns>
            <remarks>This method compares the current instance to the specified object up to four digits of precision.</remarks>
        </member>
        <member name="M:GeoFramework.Distance.Equals(GeoFramework.Distance,System.Int32)">
            <summary>
            Compares the current instance to the specified value, distance units, and precision.
            </summary>
            <param name="value">A <strong>Distance</strong> object to compare with.</param>
            <param name="decimals">An <strong>Integer</strong> specifying the number of digits to compare with.</param>
            <returns>A <strong>Boolean</strong>, True if the values are equivalent.</returns>
            <remarks>This method compares the current instance to the specified object at up to the specified number of digits of precision.</remarks>
        </member>
        <member name="M:GeoFramework.Distance.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the current instance as a string using the specified format and local culture.
            </summary>
            <returns>A <strong>String</strong> containing the distance in the specified format.</returns>
            <param name="format">
             <para>A combination of symbols, spaces, and any of the following case-insensitive
             letters: <strong>#</strong> or <strong>0</strong> for the value property, and <strong>U</strong> for
             distance units. Here are some examples:</para>
            
             <para>
            	 <table cellspacing="0" cols="3" cellpadding="2" width="100%">
            			 <tr>
            				 <td>##0.## uu</td>
            				 <td>## uuuu</td>
            				 <td># u</td>
            				 <td>###</td>
            			 </tr>
            	 </table>
             </para>
            </param>
            <param name="formatProvider">
            Information about the culture to apply to the numeric format.
            </param>
            <remarks>This method allows a custom format to be applied to the ToString method.  Numeric formats
            will be adjusted to the machine's local UI culture.</remarks>
            <example>
            This example uses the ToString method to populate a TextBox with a distance measurement using a custom format and culture information.
            <code lang="VB">
            ' Declare a distance of 75 miles
            Dim MyDistance As New Distance(75, DistanceUnit.StatuteMiles)
            ' Set the text box to the distance, formatted as a string
            MyTextBox.Text = MyDistance.ToString("## uuu", CultureInfo.CurrentUICulture)
            </code>
            <code lang="C#">
            // Declare a distance of 75 miles
            Distance MyDistance = new Distance(75, DistanceUnit.StatuteMiles);
            // Set the text box to the distance, formatted as a string
            MyTextBox.Text = MyDistance.ToString("## uuu", CultureInfo.CurrentUICulture);
            </code>
            </example>
        </member>
        <member name="P:GeoFramework.Distance.Value">
            <summary>Returns the numeric portion of a distance measurement.</summary>
            <value>A <strong>Double</strong> value.</value>
            <remarks>
            This property is paired with the <see cref="P:GeoFramework.Distance.Units">Units</see> property to form a complete distance
            measurement.  
            </remarks>
            <example>
            This example demonstrates how to use the Value property to modify a distance object.  The object 
            is then converted to kilometers.
            <code lang="VB">
            ' Declare a distance of 0 mi.
            Dim MyDistance As New Distance(0, DistanceUnit.StatuteMiles)
            ' Change the distance to 100 mi.
            MyDistance.Value = 100
            ' Change the distance to 12.3456 mi.
            MyDistance.Value = 12.3456
            ' Convert the measurement into kilometers
            MyDistance = MyDistance.ToKilometers
            </code>
            <code lang="C#">
            // Declare a distance of 0 mi.
            Distance MyDistance = new Distance(0, DistanceUnit.StatuteMiles);
            // Change the distance to 100 mi.
            MyDistance.Value = 100;
            // Change the distance to 12.3456 mi.
            MyDistance.Value = 12.3456;
            // Convert the measurement into kilometers
            MyDistance = MyDistance.ToKilometers;
            </code>
            </example>
            <seealso cref="P:GeoFramework.Distance.Units">Units Property</seealso>
        </member>
        <member name="P:GeoFramework.Distance.Units">
            <summary>Describes the unit portion of a distance measurement.</summary>
            <value>
            A value from the <see cref="T:GeoFramework.DistanceUnit">DistanceUnit</see> enumeration. Default 
            is <strong>DistanceUnit.Meters</strong>.
            </value>
            <remarks>
            <para>Each distance measurement is comprised of a numeric <see cref="P:GeoFramework.Distance.Value">value</see>
            and a unit type.  This property describes the numeric value so that it may be
            explicitly identified. An instance of the <strong>Distance</strong> class may have a value 
            of zero, but it is impossible to have an unspecified unit type.</para>
            
            <para><img src="BestPractice.jpg"/></para><para><strong>Use conversion methods instead of setting the
            Units property</strong></para>
            
            <para>When the Units property is changed, no conversion is performed on the
            Value property. This could lead to mathematical errors which are difficult to debug. Use
            conversion methods such as ToFeet or ToMeters instead.</para>
            
            <para>
            This example demonstrates poor programming when trying to add 100 feet to 100 meters
            by changing the Units property of the Distance2 object.
            <code lang="VB">
            ' Declare two distances
            Dim Distance1 As New Distance(50, DistanceUnit.Meters)
            Dim Distance2 As New Distance(100, DistanceUnit.Feet)
            ' Store their sum in another variable
            Dim Distance3 As New Distance(0, DistanceUnit.Meters)
            ' INCORRECT: Changing Units property does not convert Distance2!
            Distance2.Units = DistanceUnit.Meters
            Distance3.Value = Distance1.Value + Distance2.Value
            </code>
            <code lang="C#">
            // Declare two distances
            Distance Distance1 = new Distance(50, DistanceUnit.Meters);
            Distance Distance2 = new Distance(100, DistanceUnit.Feet);
            // Store their sum in another variable
            Distance Distance3 = new Distance(0, DistanceUnit.Meters);
            // INCORRECT: Changing Units property does not convert Distance2!
            Distance2.Units = DistanceUnit.Meters;
            Distance3.Value = Distance1.Value + Distance2.Value;
            </code>
            The correct technique is to use a conversion method to change the unit type instead
            of modifying the Units property.
            <code lang="VB">
            ' Declare two distances
            Dim Distance1 As New Distance(50, DistanceUnit.Meters)
            Dim Distance2 As New Distance(100, DistanceUnit.Feet)
            ' Store their sum in another variable
            Dim Distance3 As New Distance(0, DistanceUnit.Meters)
            ' CORRECT: The ToMeters method is used to standardize unit types
            Distance3.Value = Distance1.ToMeters().Value + Distance2.ToMeters().Value
            </code>
            <code lang="C#">
            // Declare two distances
            Distance Distance1 = new Distance(50, DistanceUnit.Meters);
            Distance Distance2 = new Distance(100, DistanceUnit.Feet);
            // Store their sum in another variable
            Distance Distance3 = new Distance(0, DistanceUnit.Meters);
            // CORRECT: The ToMeters method is used to standardize unit types
            Distance3.Value = Distance1.ToMeters().Value + Distance2.ToMeters().Value;
            </code>
            </para>
            </remarks>
            <seealso cref="P:GeoFramework.Distance.Value">Value Property</seealso>
        </member>
        <member name="P:GeoFramework.Distance.IsInvalid">
            <summary>
            Returns whether the value is invalid or unspecified.
            </summary>
        </member>
        <member name="P:GeoFramework.Distance.IsEmpty">
            <summary>
            Returns whether the value is zero.
            </summary>
        </member>
        <member name="P:GeoFramework.Distance.IsMetric">
            <summary>
            Returns whether the unit of measurement is metric.
            </summary>
        </member>
        <member name="P:GeoFramework.Distance.IsInfinity">
            <summary>
            Returns whether the value is infinite.
            </summary>
        </member>
        <member name="T:GeoFramework.DistanceUnit">
            <summary>Indicates the unit of measure for distance measurements.</summary>
            <remarks>
            This enumeration is most frequently used by the
            <see cref="P:GeoFramework.Distance.Units">Units</see> property of the
            <see cref="T:GeoFramework.Distance">Distance</see>
            class in conjunction with the <see cref="P:GeoFramework.Distance.Value">Value</see>
            property to describe a straight-line distance.
            </remarks>
            <seealso cref="P:GeoFramework.Distance.Value">Value Property (Distance Class)</seealso>
            <seealso cref="P:GeoFramework.Distance.Units">Units Property (Distance Class)</seealso>
        </member>
        <member name="F:GeoFramework.DistanceUnit.Kilometers">
            <summary>Metric System. Kilometers (thousands of meters).</summary>
        </member>
        <member name="F:GeoFramework.DistanceUnit.Meters">
            <summary>Metric System. 1/1000th of a kilometer.</summary>
        </member>
        <member name="F:GeoFramework.DistanceUnit.Centimeters">
            <summary>Metric System. 1/100th of a meter.</summary>
        </member>
        <member name="F:GeoFramework.DistanceUnit.NauticalMiles">
            <summary>Nautical miles, also known as "sea miles".</summary>
        </member>
        <member name="F:GeoFramework.DistanceUnit.StatuteMiles">
            <summary>Imperial System. A statute mile, most often referred to just as "mile."</summary>
        </member>
        <member name="F:GeoFramework.DistanceUnit.Feet">
            <summary>Imperial System. Feet.</summary>
        </member>
        <member name="F:GeoFramework.DistanceUnit.Inches">
            <summary>Imperial System. Inches.</summary>
        </member>
        <member name="T:GeoFramework.Licensing.License">
            <summary>Represents an abstract class used for software licensing.</summary>
            <remarks>
            This class is used for GeoFrameworks licensing, though it could theoretically be
            used as a base class for custom licensing. This class exists only for .NET Compact
            Framework 1.0, which excluded licensing classes by default.
            </remarks>
        </member>
        <member name="M:GeoFramework.Licensing.License.#ctor">
            <summary>Creates a new instance of the license.</summary>
            <remarks>
            Since <strong>License</strong> is an abstract class, this constructor has no
            functionality.
            </remarks>
        </member>
        <member name="P:GeoFramework.Licensing.License.LicenseKey">
            <summary>Indicates the license key associated with the license.</summary>
            <remarks>This property must be overridden in classes inheriting from this class.</remarks>
        </member>
        <member name="T:GeoFramework.Elevation">
            <summary>Represents a vertical angular measurement between -90° and 90°.</summary>
            <remarks>
            This class is used to indicate a vertical angle where 90° represents a point
            directly overhead, 0° represents the horizon (striaght ahead), and -90° represents a
            point straight down. This class is typically combined with an <strong>Elevation</strong>
            object (which measures a horizontal angle) to form a three-dimensional direction to an
            object in space, such as a GPS satellite.
            </remarks>
            <example>
            These examples create new instances of <strong>Elevation</strong> objects.
            </example>
            <seealso cref="T:GeoFramework.Angle">Angle Class</seealso>
            <seealso cref="T:GeoFramework.Azimuth">Azimuth Class</seealso>
            <seealso cref="T:GeoFramework.Latitude">Latitude Class</seealso>
            <seealso cref="T:GeoFramework.Longitude">Longitude Class</seealso>
            <example>
                These examples create new instances of Elevation objects. 
                <code lang="VB" description="Create an angle of 90°">
            Dim MyElevation As New Elevation(90)
                </code>
            	<code lang="CS" description="Create an angle of 90°">
            Elevation MyElevation = new Elevation(90);
                </code>
            	<code lang="C++" description="Create an angle of 90°">
            Elevation MyElevation = new Elevation(90);
                </code>
            	<code lang="VB" description="Create an angle of 105°30'21.4">
            Dim MyElevation1 As New Elevation(105, 30, 21.4)
                </code>
            	<code lang="CS" description="Create an angle of 105°30'21.4">
            Elevation MyElevation = new Elevation(105, 30, 21.4);
                </code>
            	<code lang="C++" description="Create an angle of 105°30'21.4">
            Elevation MyElevation = new Elevation(105, 30, 21.4);
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Elevation.Minimum">
            <summary>Represents the minimum value of an angle in one turn of a circle.</summary>
            <remarks>
            This member is typically used for looping through the entire range of possible
            angles. It is possible to create angular values below this value, such as -720°.
            </remarks>
            <example>
                This example creates an angle representing the minimum allowed value. 
                <code lang="VB">
            Dim MyElevation As Elevation = Elevation.Minimum
                </code>
            	<code lang="CS">
            Elevation MyElevation = Elevation.Minimum;
                </code>
            	<code lang="C++">
            Elevation MyElevation = Elevation.Minimum;
                </code>
            </example>
            <value>An Elevation with a value of -359.999999°.</value>
        </member>
        <member name="F:GeoFramework.Elevation.Empty">
            <summary>Represents an angle with no value.</summary>
            <remarks>
            This member is typically used to initialize an angle variable to zero. When an
            angle has a value of zero, its <see cref="P:GeoFramework.Elevation.IsEmpty">IsEmpty</see> property returns
            <strong>True</strong>.
            </remarks>
            <value>An Elevation containing a value of zero (0°).</value>
            <seealso cref="P:GeoFramework.Elevation.IsEmpty">IsEmpty Property</seealso>
        </member>
        <member name="F:GeoFramework.Elevation.Infinity">
            <summary>
            Represents an angle with infinite value.
            </summary>
            <remarks>
            In some cases, the result of an angular calculation may be infinity. This member
            is used in such cases. The <see cref="P:GeoFramework.Elevation.DecimalDegrees">DecimalDegrees</see> property is
            set to Double.PositiveInfinity.
            </remarks>
        </member>
        <member name="F:GeoFramework.Elevation.Invalid">
            <summary>
            Represents an invalid or unspecified value.
            </summary>
        </member>
        <member name="F:GeoFramework.Elevation.Maximum">
            <summary>Represents the maximum value of an angle in one turn of a circle.</summary>
            <remarks>
            This member is typically used for looping through the entire range of possible
            angles, or to test the range of a value. It is possible to create angular values below
            this value, such as 720°.
            </remarks>
            <example>
                This example creates an angle representing the maximum allowed value of 359.9999°. 
                <code lang="VB">
            Dim MyElevation As Elevation = Elevation.Maximum
                </code>
            	<code lang="CS">
            Elevation MyElevation = Elevation.Maximum;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Elevation.Zenith">
            <summary>Represents the point directly overhead.</summary>
            <value>An <strong>Elevation</strong> object.</value>
        </member>
        <member name="F:GeoFramework.Elevation.HalfwayAboveHorizon">
            <value>An <strong>Elevation</strong> object.</value>
            <summary>Represents a vertical direction halfway up from the horizon.</summary>
        </member>
        <member name="F:GeoFramework.Elevation.HalfwayBelowHorizon">
            <value>An <strong>Elevation</strong> object.</value>
            <summary>Represents a vertical direction halfway below the horizon.</summary>
        </member>
        <member name="F:GeoFramework.Elevation.Horizon">
            <value>An <strong>Elevation</strong> object.</value>
        </member>
        <member name="F:GeoFramework.Elevation.Nadir">
            <summary>Represents the point directly below one's feet.</summary>
            <value>An <strong>Elevation</strong> object.</value>
        </member>
        <member name="M:GeoFramework.Elevation.#ctor(System.Double)">
            <summary>Creates a new instance with the specified decimal degrees.</summary>
            <example>
                This example demonstrates how to create an angle with a measurement of 90°. 
                <code lang="VB">
            Dim MyElevation As New Elevation(90)
                </code>
            	<code lang="CS">
            Elevation MyElevation = new Elevation(90);
                </code>
            </example>
            <returns>An <strong>Elevation</strong> containing the specified value.</returns>
        </member>
        <member name="M:GeoFramework.Elevation.#ctor(System.Int32)">
            <summary>Creates a new instance with the specified degrees.</summary>
            <returns>An <strong>Elevation</strong> containing the specified value.</returns>
            <param name="hours">
            An <strong>Integer</strong> indicating the amount of degrees, typically between 0
            and 360.
            </param>
        </member>
        <member name="M:GeoFramework.Elevation.#ctor(System.Int32,System.Double)">
            <summary>Creates a new instance with the specified hours and decimal minutes.</summary>
            <example>
                This example demonstrates how an angle can be created when only the hours and
                minutes (in decimal form) are known. This creates a value of 12°42.345'. 
                <code lang="VB">
            Dim MyElevation As New Elevation(12, 42.345)
                </code>
            	<code lang="VB">
            Elevation MyElevation = new Elevation(12, 42.345);
                </code>
            </example>
            <remarks>An <strong>Elevation</strong> containing the specified value.</remarks>
        </member>
        <member name="M:GeoFramework.Elevation.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>Creates a new instance with the specified hours, minutes and 
            seconds.</summary>
            <example>
                This example demonstrates how to create an angular measurement of 34°12'29.2 in
                hours, minutes and seconds. 
                <code lang="VB">
            Dim MyElevation As New Elevation(34, 12, 29.2)
                </code>
            	<code lang="CS">
            Elevation MyElevation = new Elevation(34, 12, 29.2);
                </code>
            </example>
            <returns>An <strong>Elevation</strong> containing the specified value.</returns>
        </member>
        <member name="M:GeoFramework.Elevation.#ctor(System.String)">
            <summary>Creates a new instance by converting the specified string.</summary>
            <remarks>
            This constructor parses the specified string into an <strong>Elevation</strong>
            object using the current culture. This constructor can parse any strings created via
            the <strong>ToString</strong> method.
            </remarks>
            <seealso cref="M:GeoFramework.Elevation.Parse(System.String)">Parse Method</seealso>
            <example>
                This example creates a new instance by parsing a string. (NOTE: The double-quote is
                doubled up to represent a single double-quote in the string.) 
                <code lang="VB">
            Dim MyElevation As New Elevation("123°45'67.8""")
                </code>
            	<code lang="CS">
            Elevation MyElevation = new Elevation("123°45'67.8\"");
                </code>
            </example>
            <returns>An <strong>Elevation</strong> containing the specified value.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
        </member>
        <member name="M:GeoFramework.Elevation.#ctor(System.String,System.Globalization.CultureInfo)">
            <remarks>
            This constructor parses the specified string into an <strong>Elevation</strong>
            object using a specific culture. This constructor can parse any strings created via the
            <strong>ToString</strong> method.
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
            <summary>
            Creates a new instance by converting the specified string using the specified
            culture.
            </summary>
            <param name="value">
            A <strong>String</strong> describing an angle in the form of decimal degrees or a
            sexagesimal.
            </param>
            <param name="culture">
            A <strong>CultureInfo</strong> object describing the numeric format to use during
            conversion.
            </param>
        </member>
        <member name="M:GeoFramework.Elevation.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance by deserializing the specified XML.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:GeoFramework.Elevation.Normalize">
            <overloads>Converts a measurement to its equivalent value between -90 and 
            90 degrees.</overloads>
        </member>
        <member name="M:GeoFramework.Elevation.Ceiling">
            <summary>Returns the smallest integer greater than the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Elevation.Floor">
            <summary>Returns the largest integer which is smaller than the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Elevation.Round(System.Int32)">
            <summary>
            Returns a new instance whose value is rounded the specified number of decimals.
            </summary>
            <param name="decimals">An <strong>Integer</strong> specifying the number of decimals to round off to.</param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Elevation.RoundSeconds">
            <summary>Returns a new instance whose Seconds property is evenly divisible by 15.</summary>
            <returns>An <strong>Elevation</strong> containing the rounded value.</returns>
            <remarks>
            This method is used to align or "snap" an angle to a regular interval. For
            example, a grid might be easier to read if it were drawn at 30-second intervals instead
            of 24.198-second intervals.
            </remarks>
        </member>
        <member name="M:GeoFramework.Elevation.RoundSeconds(System.Double)">
            <summary>
            Returns a new angle whose Seconds property is evenly divisible by the specified amount.
            </summary>
            <returns>An <strong>Elevation</strong> containing the rounded value.</returns>
            <remarks>
            This method is used to align or "snap" an angle to a regular interval. For
            example, a grid might be easier to read if it were drawn at 30-second intervals instead
            of 24.198-second intervals.
            </remarks>
            <param name="interval">
            A <strong>Double</strong> between 0 and 60 indicating the interval to round
            to.
            </param>
        </member>
        <member name="M:GeoFramework.Elevation.LesserOf(GeoFramework.Elevation)">
            <summary>Returns the object with the smallest value.</summary>
            <returns>The <strong>Elevation</strong> containing the smallest value.</returns>
            <param name="value">An <strong>Elevation</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Elevation.GreaterOf(GeoFramework.Elevation)">
            <returns>An <strong>Elevation</strong> containing the largest value.</returns>
            <summary>Returns the object with the largest value.</summary>
            <param name="value">An <strong>Elevation</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Elevation.Mirror">
            <summary>Returns an angle opposite of the current instance.</summary>
            <returns>An <strong>Elevation</strong> representing the mirrored value.</returns>
            <remarks>
            This method returns the "opposite" of the current instance. The opposite is
            defined as the point on the other side of an imaginary circle. For example, if an angle
            is 0°, at the top of a circle, this method returns 180°, at the bottom of the
            circle.
            </remarks>
            <example>
                This example creates a new <strong>Elevation</strong> of 45° then calculates its mirror
                of 225°. (45 + 180) 
                <code lang="VB" title="[New Example]">
            Dim Elevation1 As New Elevation(45)
            Dim Elevation2 As Elevation = Elevation1.Mirror()
            Debug.WriteLine(Elevation2.ToString())
            ' Output: 225
                </code>
            	<code lang="CS" title="[New Example]">
            Elevation Elevation1 = new Elevation(45);
            Elevation Elevation2 = Elevation1.Mirror();
            Console.WriteLine(Elevation2.ToString());
            // Output: 225
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Elevation.ToRadians">
            <summary>Converts the current instance into radians.</summary>
            <returns>A <see cref="T:GeoFramework.Radian">Radian</see> object.</returns>
            <remarks>
            	<para>This function is typically used to convert an angular measurement into
             radians before performing a trigonometric function.
            		</para>
            </remarks>
            <seealso cref="T:GeoFramework.Radian">Radian Class</seealso>
            <overloads>Converts an angular measurement into radians before further processing.</overloads>
            <example>
                This example converts a measurement of 90° into radians. 
                <code lang="VB">
            Dim MyElevation As New Elevation(90)
            Dim MyRadians As Radian = MyElevation.ToRadians()
                </code>
            	<code lang="CS">
            Elevation MyElevation = new Elevation(90);
            Radian MyRadians = MyElevation.ToRadians();
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Elevation.ToString(System.String)">
            <summary>Outputs the angle as a string using the specified format.</summary>
            <returns>A <strong>String</strong> in the specified format.</returns>
            <remarks>
            	<para>This method returns the current instance output in a specific format. If no
                value for the format is specified, a default format of "d.dddd°" is used. Any
                string output by this method can be converted back into an Elevation object using the
                <strong>Parse</strong> method or <strong>Elevation(string)</strong> constructor.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Elevation.ToString(System.String)">ToString Method</seealso>
            <seealso cref="M:GeoFramework.Elevation.Parse(System.String)">Parse Method</seealso>
            <example>
                This example uses the <strong>ToString</strong> method to output an angle in a
                custom format. The " <strong>h°</strong> " code represents hours along with a
                degree symbol (Alt+0176 on the keypad), and " <strong>m.mm</strong> " represents
                the minutes out to two decimals. Mmm. 
                <code lang="VB">
            Dim MyElevation As New Elevation(45, 16.772)
            Debug.WriteLine(MyElevation.ToString("h°m.mm"))
            ' Output: 45°16.78
                </code>
            	<code lang="CS">
            Dim MyElevation As New Elevation(45, 16.772);
            Debug.WriteLine(MyElevation.ToString("h°m.mm"));
            // Output: 45°16.78
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Elevation.Equals(System.Object)">
            <summary>Compares the current value to another Elevation object's value.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the object's DecimalDegrees
            properties match.
            </returns>
            <remarks>This </remarks>
            <param name="obj">
            An <strong>Elevation</strong>, <strong>Double</strong>, or <strong>Integer</strong>
            to compare with.
            </param>
        </member>
        <member name="M:GeoFramework.Elevation.GetHashCode">
            <summary>Returns a unique code for this instance.</summary>
            <remarks>
            Since the <strong>Elevation</strong> class is immutable, this property may be used
            safely with hash tables.
            </remarks>
            <returns>
            An <strong>Integer</strong> representing a unique code for the current
            instance.
            </returns>
        </member>
        <member name="M:GeoFramework.Elevation.ToString">
            <summary>Outputs the angle as a string using the default format.</summary>
            <returns><para>A <strong>String</strong> created using the default format.</para></returns>
            <remarks>
            	<para>This method formats the current instance using the default format of
                "d.dddd°." Any string output by this method can be converted back into an Elevation
                object using the <strong>Parse</strong> method or <strong>Elevation(string)</strong>
                constructor.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Elevation.Parse(System.String)">Parse Method</seealso>
            <example>
                This example outputs a value of 90 degrees in the default format of ###.#°. 
                <code lang="VB">
            Dim MyElevation As New Elevation(90)
            Debug.WriteLine(MyElevation.ToString)
            ' Output: "90°"
                </code>
            	<code lang="CS">
            Elevation MyElevation = new Elevation(90);
            Debug.WriteLine(MyElevation.ToString());
            // Output: "90°"
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Elevation.Normalize(System.Double)">
            <overloads>Converts a measurement to its equivalent value between -90 and 
            90 degrees.</overloads>
        </member>
        <member name="M:GeoFramework.Elevation.ToDecimalDegrees(System.Int32,System.Int32,System.Double)">
            <summary>Converts arbitrary hour, minute and seconds into decimal degrees.</summary>
            <returns>
            A <strong>Double</strong> containing the decimal degree version of the specified
            values.
            </returns>
            <remarks>
            This function is used to convert three-part measurements into a single value. The
            result of this method is typically assigned to the
            <see cref="P:GeoFramework.Latitude.DecimalDegrees">
            DecimalDegrees</see> property. Values are rounded to thirteen decimal 
            places, the maximum precision allowed by this type.
            </remarks>
            <seealso cref="P:GeoFramework.Latitude.DecimalDegrees">DecimalDegrees Property</seealso>
            <seealso cref="M:GeoFramework.Latitude.Normalize">Normalize Method</seealso>
            <example>
                This example converts a value of 10°30'0" into decimal degrees (10.5). 
                <code lang="VB" title="ToDecimalDegrees Example (VB)">
            Dim MyValue As Double = Latitude.ToDecimalDegrees(10, 30, 0)
                </code>
            	<code lang="CS" title="ToDecimalDegrees Example (C#)">
            double MyValue = Latitude.ToDecimalDegrees(10, 30, 0);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Elevation.ToDecimalDegrees(System.Int32,System.Double)">
            <summary>Converts arbitrary hour and decimal minutes into decimal degrees.</summary>
            <returns>
            A <strong>Double</strong> containing the decimal degree version of the specified
            values.
            </returns>
            <remarks>
            This function is used to convert three-part measurements into a single value. The
            result of this method is typically assigned to the
            <see cref="P:GeoFramework.Latitude.DecimalDegrees">
            DecimalDegrees</see> property. Values are rounded to thirteen decimal 
            places, the maximum precision allowed by this type.
            </remarks>
        </member>
        <member name="M:GeoFramework.Elevation.ToDecimalDegrees(System.Int32)">
            <summary>Converts an hour value into decimal degrees.</summary>
            <returns>
            A <strong>Double</strong> containing the decimal degree version of the specified
            values.
            </returns>
            <remarks>
            The specified value will be converted to a double value.
            </remarks>
        </member>
        <member name="M:GeoFramework.Elevation.Random">
            <summary>Returns a random angle between 0° and 360°.</summary>
            <returns>An <strong>Elevation</strong> containing a random value.</returns>
        </member>
        <member name="M:GeoFramework.Elevation.Random(System.Random)">
            <summary>
            Returns a random Elevation between 0° and 360° using the specified random number
            seed.
            </summary>
            <returns>An <strong>Elevation</strong> containing a random value.</returns>
            <param name="seed">
            An <strong>Integer</strong> passed to the <strong>Random</strong> class as a
            random number seed.
            </param>
        </member>
        <member name="M:GeoFramework.Elevation.LesserOf(GeoFramework.Elevation,GeoFramework.Elevation)">
            <returns>The <strong>Elevation</strong> containing the smallest value.</returns>
            <summary>Returns the object with the smallest value.</summary>
            <param name="value">A <strong>Elevation</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Elevation.GreaterOf(GeoFramework.Elevation,GeoFramework.Elevation)">
            <summary>Returns the object with the largest value.</summary>
            <returns>A <strong>Elevation</strong> containing the largest value.</returns>
            <param name="value">A <strong>Elevation</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Elevation.ToRadians(GeoFramework.Elevation)">
            <remarks>
            	<para>This function is typically used to convert an angular measurement into
             radians before performing a trigonometric function.</para>
            </remarks>
            <returns>A <see cref="T:GeoFramework.Radian"><strong>Radian</strong></see> object.</returns>
            <summary>Converts an angular measurement into radians.</summary>
            <example>
                This example shows a quick way to convert an angle of 90° into radians. 
                <code lang="VB">
            Dim MyRadian As Radian = Elevation.ToRadians(90)
                </code>
            	<code lang="CS">
            Radian MyRadian = Elevation.ToRadians(90);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Elevation.FromRadians(GeoFramework.Radian)">
            <summary>Converts a value in radians into an angular measurement.</summary>
            <remarks>
            	This function is typically used in conjunction with the
            	<see cref="M:GeoFramework.Elevation.ToRadians">ToRadians</see>
            	method after a trigonometric function has completed. The converted value is stored in
            	the <see cref="P:GeoFramework.Elevation.DecimalDegrees">DecimalDegrees</see> property.
            </remarks>
            <seealso cref="M:GeoFramework.Elevation.ToRadians">ToRadians</seealso>
            <seealso cref="T:GeoFramework.Radian">Radian Class</seealso>
            <example>
                This example uses the <strong>FromRadians</strong> method to convert a value of one
                radian into an <strong>Elevation</strong> of 57°. 
                <code lang="VB">
            ' Create a new angle equal to one radian
            Dim MyRadians As New Radian(1)
            Dim MyElevation As Elevation = Elevation.FromRadians(MyRadians)
            Debug.WriteLine(MyElevation.ToString())
            ' Output: 57°
                </code>
            	<code lang="CS">
            // Create a new angle equal to one radian
            Radian MyRadians = new Radian(1);
            Elevation MyElevation = Elevation.FromRadians(MyRadians);
            Console.WriteLine(MyElevation.ToString());
            // Output: 57°
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Elevation.Parse(System.String)">
            <summary>Converts the specified string into an Elevation object.</summary>
            <returns>
            	A new <strong>Elevation</strong> object populated with the specified 
            	values.
            </returns>
            <remarks>
            	<para>This method parses the specified string into an <strong>Elevation</strong> object
                using the current culture. This constructor can parse any strings created via the
                <strong>ToString</strong> method.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Elevation.ToString(System.String)">ToString Method</seealso>
            <example>
                This example creates a new angular measurement using the <strong>Parse</strong>
                method. 
                <code lang="VB">
            Dim NewElevation As Elevation = Elevation.Parse("123.45°")
                </code>
            	<code lang="CS">
            Elevation NewElevation = Elevation.Parse("123.45°");
                </code>
            </example>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
        </member>
        <member name="M:GeoFramework.Elevation.Parse(System.String,System.Globalization.CultureInfo)">
            <remarks>
            	<para>This powerful method is typically used to process data from a data store or a
                value input by the user in any culture. This function can accept any format which
                can be output by the ToString method.</para>
            </remarks>
            <returns>A new <strong>Elevation</strong> object equivalent to the specified string.</returns>
            <summary>
            Converts the specified string into an <strong>Elevation</strong> object using the
            specified culture.
            </summary>
            <param name="value">
            A <strong>String</strong> describing an angle in the form of decimal degrees or a
            sexagesimal.
            </param>
            <param name="culture">
            A <strong>CultureInfo</strong> object describing the numeric format to use during
            conversion.
            </param>
        </member>
        <member name="M:GeoFramework.Elevation.Increment">
            <summary>Returns the current instance increased by one.</summary>
            <returns>An <strong>Elevation</strong> object.</returns>
            <remarks>
            	<para>This method increases the <strong>DecimalDegrees</strong> property by 1.0,
                returned as a new instance.</para>
            	<para><font color="red">Since the <strong>Elevation</strong> class is immutable, this
                method cannot be used to modify an existing instance.</font></para>
            </remarks>
            <example>
                This example uses the <strong>Increment</strong> method to increase an Elevation's
                value. It also demonstrates the subtle error which can be caused if
                <strong>Increment</strong> is called while ignoring the return value.
                <code lang="VB" title="[New Example]">
            ' Correct use of Increment
            Dim Elevation1 As New Elevation(89)
            Elevation1 = Elevation1.Increment()
             
            ' Incorrect use of Increment
            Dim Elevation1 = New Elevation(89)
            Elevation1.Increment()
            ' NOTE: Elevation1 will still be 89°!
                </code>
            	<code lang="CS" title="[New Example]">
            // Correct use of Increment
            Elevation Elevation1 = new Elevation(89);
            Elevation1 = Elevation1.Increment();
             
            // Incorrect use of Increment
            Elevation Elevation1 = new Elevation(89);
            Elevation1.Increment();
            // NOTE: Elevation1 will still be 89°!
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Elevation.Add(System.Double)">
            <summary>Increases the current instance by the specified value.</summary>
            <returns>A new <strong>Elevation</strong> containing the summed values.</returns>
            <example>
                This example adds 45° to the current instance of 45°, returning 90°. 
                <code lang="VB" title="[New Example]">
            Dim Elevation1 As New Elevation(45)
            Elevation1 = Elevation1.Add(45)
                </code>
            	<code lang="CS" title="[New Example]">
            Elevation Elevation1 = new Elevation(45);
            Elevation1 = Elevation1.Add(45);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to add to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Elevation.Decrement">
            <summary>Returns the current instance decreased by one.</summary>
            <returns>An <strong>Elevation</strong> object.</returns>
            <remarks>
            	<para>This method decreases the <strong>DecimalDegrees</strong> property by 1.0,
                returned as a new instance.</para>
            	<para><font color="red">Since the <strong>Elevation</strong> class is immutable, this
                method cannot be used to modify an existing instance.</font></para>
            </remarks>
            <example>
                This example uses the <strong>Decrement</strong> method to decrease an Elevation's
                value. It also demonstrates the subtle error which can be caused if
                <strong>Decrement</strong> is called while ignoring the return value.
                <code lang="VB" title="[New Example]">
            ' Correct use of Decrement
            Dim Elevation1 As New Elevation(91)
            Elevation1 = Elevation1.Decrement()
             
            ' Incorrect use of Decrement
            Dim Elevation1 = New Elevation(91)
            Elevation1.Increment()
            ' NOTE: Elevation1 will still be 91°!
                </code>
            	<code lang="CS" title="[New Example]">
            // Correct use of Decrement
            Elevation Elevation1 = new Elevation(91);
            Elevation1 = Elevation1.Decrement();
             
            // Incorrect use of Decrement
            Elevation Elevation1 = new Elevation(91);
            Elevation1.Decrement();
            // NOTE: Elevation1 will still be 91°!
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Elevation.Subtract(System.Double)">
            <summary>Decreases the current instance by the specified value.</summary>
            <returns>A new <strong>Elevation</strong> containing the new value.</returns>
            <example>
                This example subtracts 30° from the current instance of 90°, returning 60°. 
                <code lang="VB" title="[New Example]">
            Dim Elevation1 As New Elevation(90)
            Elevation1 = Elevation1.Subtract(30)
                </code>
            	<code lang="CS" title="[New Example]">
            Elevation Elevation1 = new Elevation(90);
            Elevation1 = Elevation1.Subtract(30);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to subtract from the current instance.</param>
        </member>
        <member name="M:GeoFramework.Elevation.Multiply(System.Double)">
            <summary>Multiplies the current instance by the specified value.</summary>
            <returns>A new <strong>Elevation</strong> containing the product of the two numbers.</returns>
            <example>
                This example multiplies 30° with three, returning 90°. 
                <code lang="VB" title="[New Example]">
            Dim Elevation1 As New Elevation(30)
            Elevation1 = Elevation1.Multiply(3)
                </code>
            	<code lang="CS" title="[New Example]">
            Elevation Elevation1 = new Elevation(30);
            Elevation1 = Elevation1.Multiply(3);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to multiply with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Elevation.Divide(System.Double)">
            <summary>Divides the current instance by the specified value.</summary>
            <returns>An <strong>Elevation</strong> containing the new value.</returns>
            <example>
                This example divides 90° by three, returning 30°. 
                <code lang="VB" title="[New Example]">
            Dim Elevation1 As New Elevation(90)
            Elevation1 = Elevation1.Divide(3)
                </code>
            	<code lang="CS" title="[New Example]">
            Elevation Elevation1 = new Elevation(90);
            Elevation1 = Elevation1.Divide(3);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> representing a denominator to divide by.</param>
        </member>
        <member name="M:GeoFramework.Elevation.IsLessThan(GeoFramework.Elevation)">
            <summary>Indicates if the current instance is smaller than the specified value.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than the specified value.
            </returns>
            <param name="value">An <strong>Elevation</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Elevation.IsLessThanOrEqualTo(GeoFramework.Elevation)">
            <remarks>
            This method compares the <strong>DecimalDegrees</strong> property with the
            specified value. This method is the same as the "&lt;=" operator.
            </remarks>
            <summary>
            Indicates if the current instance is smaller than or equal to the specified
            value.
            </summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than or equal to the specified value.
            </returns>
            <param name="value">An <strong>Elevation</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Elevation.IsGreaterThan(GeoFramework.Elevation)">
            <summary>Indicates if the current instance is larger than the specified value.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            greater than the specified value.
            </returns>
            <param name="value">An <strong>Elevation</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Elevation.IsGreaterThanOrEqualTo(GeoFramework.Elevation)">
            <summary>
            Indicates if the current instance is larger than or equal to the specified
            value.
            </summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            greater than or equal to the specified value.
            </returns>
            <param name="value">An <strong>Elevation</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Elevation.op_Explicit(GeoFramework.Radian)~GeoFramework.Elevation">
            <summary>
            Converts a measurement in Radians into an Elevation.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Elevation.op_Explicit(System.Double)~GeoFramework.Elevation">
            <summary>
            Converts a decimal degree measurement as a Double into an Elevation.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Elevation.op_Explicit(System.Single)~GeoFramework.Elevation">
            <summary>
            Converts a decimal degree measurement as a Double into an Elevation.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Elevation.op_Explicit(GeoFramework.Elevation)~System.Double">
            <summary>
            Converts a decimal degree measurement as a Double into an Elevation.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Elevation.op_Explicit(GeoFramework.Elevation)~System.Single">
            <summary>
            Converts a decimal degree measurement as a Double into an Elevation.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Elevation.op_Explicit(System.Int32)~GeoFramework.Elevation">
            <summary>
            Converts a measurement in degrees as an Integer into an Elevation.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Elevation.op_Explicit(System.String)~GeoFramework.Elevation">
            <summary>
            Converts a measurement in the form of a formatted String into an Elevation.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Elevation.op_Explicit(GeoFramework.Elevation)~System.String">
            <summary>
            Converts an Elevation into a String.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <remarks>This operator calls the ToString() method using the current culture.</remarks>
        </member>
        <member name="M:GeoFramework.Elevation.Clone">
            <summary>Creates a copy of the current instance.</summary>
            <returns>An <strong>Elevation</strong> of the same value as the current instance.</returns>
        </member>
        <member name="M:GeoFramework.Elevation.ToString(System.String,System.IFormatProvider)">
            <summary>Outputs the angle as a string using the specified format.</summary>
            <returns>A <strong>String</strong> in the specified format.</returns>
            <remarks>
            	<para>This method returns the current instance output in a specific format. If no
                value for the format is specified, a default format of "d.dddd" is used. Any string
                output by this method can be converted back into an Elevation object using the
                <strong>Parse</strong> method or <strong>Elevation(string)</strong> constructor.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Elevation.ToString(System.String)">ToString Method</seealso>
            <seealso cref="M:GeoFramework.Elevation.Parse(System.String)">Parse Method</seealso>
            <example>
                This example uses the <strong>ToString</strong> method to output an angle in a
                custom format. The " <strong>h°</strong> " code represents hours along with a
                degree symbol (Alt+0176 on the keypad), and " <strong>m.mm</strong> " represents
                the minutes out to two decimals. Mmm. 
                <code lang="VB">
            Dim MyElevation As New Elevation(45, 16.772)
            Debug.WriteLine(MyElevation.ToString("h°m.mm", CultureInfo.CurrentCulture))
            ' Output: 45°16.78
                </code>
            	<code lang="CS">
            Dim MyElevation As New Elevation(45, 16.772);
            Debug.WriteLine(MyElevation.ToString("h°m.mm", CultureInfo.CurrentCulture));
            // Output: 45°16.78
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Elevation.Equals(GeoFramework.Elevation,System.Int32)">
            <summary>
            Compares the current instance to another instance using the specified
            precision.
            </summary>
            <returns>
            	<para>A <strong>Boolean</strong>, <strong>True</strong> if the
                <strong>DecimalDegrees</strong> property of the current instance matches the
                specified instance's <strong>DecimalDegrees</strong> property.</para>
            </returns>
            <remarks>
            	<para>This is typically used in cases where precision is only significant for a few
                digits and exact comparison is not necessary.</para>
            	<para><em>NOTE: This method compares objects by value, not by
                reference.</em></para>
            </remarks>
            <seealso cref="M:GeoFramework.Elevation.Equals(System.Object)">Equals Method</seealso>
            <example>
                These examples compare two fractional values using specific numbers of digits for
                comparison. 
                <code lang="VB" title="[New Example]">
            ' Equals will return False
            Dim Elevation1 As New Elevation(90.15);
            Dim Elevation2 As New Elevation(90.12);
            If Elevation1.Equals(Elevation2, 2) Then
                 Debug.WriteLine("The values are the same to two digits of precision.");
             
            ' Equals will return True
            Dim Elevation1 As New Elevation(90.15);
            Dim Elevation2 As New Elevation(90.12);
            If Elevation1.Equals(Elevation2, 1) Then
                 Debug.WriteLine("The values are the same to one digit of precision.");
                </code>
            	<code lang="CS" title="[New Example]">
            // Equals will return False
            Elevation Elevation1 = new Elevation(90.15);
            Elevation Elevation2 = new Elevation(90.12);
            if(Elevation1.Equals(Elevation2, 2))
                 Console.WriteLine("The values are the same to two digits of precision.");
             
            // Equals will return True
            Elevation Elevation1 = new Elevation(90.15);
            Elevation Elevation2 = new Elevation(90.12);
            if(Elevation1.Equals(Elevation2, 1))
                 Console.WriteLine("The values are the same to one digits of precision.");
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Elevation.CompareTo(GeoFramework.Elevation)">
            <summary>Returns a value indicating the relative order of two objects.</summary>
            <returns>A value of -1, 0, or 1 as documented by the IComparable interface.</returns>
            <remarks>
            	This method allows collections of <strong>Azimuth</strong> objects to be sorted.
            	The <see cref="P:GeoFramework.Elevation.DecimalDegrees">DecimalDegrees</see> property of each instance is compared.
            </remarks>
            <param name="value">An <strong>Elevation</strong> object to compare with.</param>
        </member>
        <member name="P:GeoFramework.Elevation.DecimalDegrees">
            <summary>Returns the value of the angle as decimal degrees.</summary>
            <value>A <strong>Double</strong> value.</value>
            <remarks>This property returns the value of the angle as a single number.</remarks>
            <seealso cref="P:GeoFramework.Elevation.Hours">Hours Property</seealso>
            <seealso cref="P:GeoFramework.Elevation.Minutes">Minutes Property</seealso>
            <seealso cref="P:GeoFramework.Elevation.Seconds">Seconds Property</seealso>
            <example>
                This example demonstrates how the
                <see cref="P:GeoFramework.Elevation.DecimalDegrees"><strong>DecimalDegrees</strong></see> property is
                calculated automatically when creating an angle using hours, minutes and seconds. 
                <code lang="VB">
            ' Create an angle of 20°30'
            Dim MyElevation As New Elevation(20, 30)
            ' Setting the DecimalMinutes recalculated other properties 
            Debug.WriteLine(MyElevation.DecimalDegrees)
            ' Output: "20.5"  the same as 20°30'
                </code>
            	<code lang="CS">
            // Create an angle of 20°30'
            Elevation MyElevation = New Elevation(20, 30);
            // Setting the DecimalMinutes recalculated other properties 
            Console.WriteLine(MyElevation.DecimalDegrees)
            // Output: "20.5"  the same as 20°30'
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Elevation.DecimalMinutes">
            <summary>Returns the minutes and seconds as a single numeric value.</summary>
            <seealso cref="P:GeoFramework.Elevation.Minutes">Minutes Property</seealso>
            <seealso cref="P:GeoFramework.Elevation.DecimalDegrees">DecimalDegrees Property</seealso>
            <value>A <strong>Double</strong> value.</value>
            <remarks>
            This property is used when minutes and seconds are represented as a single
            decimal value.
            </remarks>
            <example>
                This example demonstrates how the <strong>DecimalMinutes</strong> property is
                automatically calculated when creating a new angle. 
                <code lang="VB">
            ' Create an angle of 20°10'30"
            Dim MyElevation As New Elevation(20, 10, 30)
            ' The DecimalMinutes property is automatically calculated
            Debug.WriteLine(MyElevation.DecimalMinutes)
            ' Output: "10.5"
                </code>
            	<code lang="CS">
            // Create an angle of 20°10'30"
            Elevation MyElevation = new Elevation(20, 10, 30);
            // The DecimalMinutes property is automatically calculated
            Console.WriteLine(MyElevation.DecimalMinutes)
            // Output: "10.5"
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Elevation.Hours">
            <summary>Returns the integer hours (degrees) portion of an angular 
            measurement.</summary>
            <seealso cref="P:GeoFramework.Elevation.Minutes">Minutes Property</seealso>
            <seealso cref="P:GeoFramework.Elevation.Seconds">Seconds Property</seealso>
            <value>An <strong>Integer</strong> value.</value>
            <remarks>
            This property is used in conjunction with the <see cref="P:GeoFramework.Elevation.Minutes">Minutes</see>
            and <see cref="P:GeoFramework.Elevation.Seconds">Seconds</see> properties to create a full angular measurement.
            This property is the same as <strong>DecimalDegrees</strong> without any fractional
            value.
            </remarks>
            <example>
                This example creates an angle of 60.5° then outputs the value of the
                <strong>Hours</strong> property, 60. 
                <code lang="VB">
            Dim MyElevation As New Elevation(60.5)
            Debug.WriteLine(MyElevation.Hours)
            ' Output: 60
                </code>
            	<code lang="CS">
            Elevation MyElevation = new Elevation(60.5);
            Console.WriteLine(MyElevation.Hours);
            // Output: 60
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Elevation.Minutes">
            <summary>Returns the integer minutes portion of an angular measurement.</summary>
            <seealso cref="P:GeoFramework.Elevation.Hours">Hours Property</seealso>
            <seealso cref="P:GeoFramework.Elevation.Seconds">Seconds Property</seealso>
            <remarks>
            This property is used in conjunction with the <see cref="P:GeoFramework.Elevation.Hours">Hours</see> and
            <see cref="P:GeoFramework.Elevation.Seconds">Seconds</see> properties to create a sexagesimal
            measurement.
            </remarks>
            <value>An <strong>Integer</strong>.</value>
            <example>
                This example creates an angle of 45.5° then outputs the value of the
                <strong>Minutes</strong> property, 30. 
                <code lang="VB">
            Dim MyElevation As New Elevation(45.5)
            Debug.WriteLine(MyElevation.Minutes)
            ' Output: 30
                </code>
            	<code lang="CS">
            Elevation MyElevation = new Elevation(45.5);
            Console.WriteLine(MyElevation.Minutes);
            // Output: 30
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Elevation.Seconds">
            <summary>Returns the seconds minutes portion of an angular measurement.</summary>
            <remarks>
            This property is used in conjunction with the <see cref="P:GeoFramework.Elevation.Hours">Hours</see> and
            <see cref="P:GeoFramework.Elevation.Minutes">Minutes</see> properties to create a sexagesimal
            measurement.
            </remarks>
            <seealso cref="P:GeoFramework.Elevation.Hours">Hours Property</seealso>
            <seealso cref="P:GeoFramework.Elevation.Minutes">Minutes Property</seealso>
            <value>A <strong>Double</strong> value.</value>
            <example>
                This example creates an angle of 45°10.5' then outputs the value of the
                <strong>Seconds</strong> property, 30. 
                <code lang="VB">
            Dim MyElevation As New Elevation(45, 10.5)
            Debug.WriteLine(MyElevation.Seconds)
            ' Output: 30
                </code>
            	<code lang="CS">
            Dim MyElevation As New Elevation(45, 10.5);
            Console.WriteLine(MyElevation.Seconds);
            // Output: 30
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Elevation.IsEmpty">
            <summary>Indicates if the current instance has a non-zero value.</summary>
            <value>
            A <strong>Boolean</strong>, <strong>True</strong> if the
            <strong>DecimalDegrees</strong> property is zero.
            </value>
            <seealso cref="F:GeoFramework.Elevation.Empty">Empty Field</seealso>
        </member>
        <member name="P:GeoFramework.Elevation.IsInfinity">
            <summary>Indicates if the current instance represents an infinite value.</summary>
        </member>
        <member name="P:GeoFramework.Elevation.IsInvalid">
            <summary>
            Indicates if the current instance is invalid or unspecified.
            </summary>
        </member>
        <member name="P:GeoFramework.Elevation.IsNormalized">
            <summary>Indicates whether the current instance has been normalized and is within the 
            allowed bounds of -90° and 90°.</summary>
        </member>
        <member name="T:GeoFramework.SizeD">
            <summary>Represents a highly-precise two-dimensional size.</summary>
            <remarks>
            	<para>This structure is a <em>GeoFrameworks</em> "parseable type" whose value can
                be freely converted to and from <strong>String</strong> objects via the
                <strong>ToString</strong> and <strong>Parse</strong> methods.</para>
            	<para>Instances of this structure are guaranteed to be thread-safe because it is
                immutable (its properties can only be modified via constructors).</para>
            </remarks>
        </member>
        <member name="F:GeoFramework.SizeD.Empty">
            <summary>Represents a size with no value.</summary>
        </member>
        <member name="F:GeoFramework.SizeD.Infinity">
            <summary>Represents an infinite size.</summary>
        </member>
        <member name="F:GeoFramework.SizeD.Minimum">
            <summary>Represents the smallest possible size.</summary>
        </member>
        <member name="F:GeoFramework.SizeD.Maximum">
            <summary>Represents the largest possible size.</summary>
        </member>
        <member name="M:GeoFramework.SizeD.#ctor(System.Double,System.Double)">
            <summary>Creates a new instance.</summary>
        </member>
        <member name="M:GeoFramework.SizeD.Clone">
            <summary>Returns a copy of the current instance.</summary>
        </member>
        <member name="M:GeoFramework.SizeD.Equals(System.Object)">
            <summary>
            Compares the current instance to the specified object.
            </summary>
            <param name="obj">An <strong>Object</strong> to compare with.</param>
            <returns>A <strong>Boolean</strong>, True if the values are equivalent.</returns>
        </member>
        <member name="M:GeoFramework.SizeD.Add(GeoFramework.SizeD)">
            <summary>Returns the sum of the current instance with the specified size.</summary>
        </member>
        <member name="M:GeoFramework.SizeD.Subtract(GeoFramework.SizeD)">
            <summary>Returns the current instance decreased by the specified value.</summary>
        </member>
        <member name="M:GeoFramework.SizeD.Multiply(GeoFramework.SizeD)">
            <summary>Returns the product of the current instance with the specified value.</summary>
        </member>
        <member name="M:GeoFramework.SizeD.Divide(GeoFramework.SizeD)">
            <summary>Returns the current instance divided by the specified value.</summary>
        </member>
        <member name="M:GeoFramework.SizeD.Equals(GeoFramework.SizeD)">
            <summary>
            Compares the current instance to the specified object.
            </summary>
            <param name="obj">A <strong>SizeD</strong> object to compare with.</param>
            <returns>A <strong>Boolean</strong>, True if the values are equivalent.</returns>
        </member>
        <member name="P:GeoFramework.SizeD.Width">
            <summary>Returns the horizontal size.</summary>
        </member>
        <member name="P:GeoFramework.SizeD.Height">
            <summary>Returns the vertical size.</summary>
        </member>
        <member name="P:GeoFramework.SizeD.AspectRatio">
            <summary>Returns the ratio width to height.</summary>
        </member>
        <member name="P:GeoFramework.SizeD.IsEmpty">
            <summary>Indicates if the instance has any value.</summary>
        </member>
        <member name="T:GeoFramework.RectangleD">
            <summary>Represents a highly-precise rectangle.</summary>
            <remarks>
            	<para>This class functions similar to the <strong>RectangleF</strong> class in the
                <strong>System.Drawing</strong> namespace, except that it uses
                double-floating-point precision and is also supported on the Compact Framework
                edition of the <strong>GeoFramework</strong>.</para>
            	<para>Instances of this class are guaranteed to be thread-safe because it is
                immutable (its properties can only be changed during constructors).</para>
            </remarks>
        </member>
        <member name="F:GeoFramework.RectangleD.Empty">
            <summary>
            Represents a RectangleD having no size.
            </summary>
        </member>
        <member name="M:GeoFramework.RectangleD.#ctor(GeoFramework.PointD,GeoFramework.SizeD)">
            <summary>
            Creates a new instance using the specified location, width, and height.
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:GeoFramework.RectangleD.#ctor(GeoFramework.PointD,System.Double,System.Double)">
            <summary>
            Creates a new instance using the specified location, width, and height.
            </summary>
            <param name="location"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:GeoFramework.RectangleD.#ctor(GeoFramework.PointD,GeoFramework.PointD)">
            <summary>
            Creates a new instance using the specified upper-left and lower-right coordinates.
            </summary>
        </member>
        <member name="M:GeoFramework.RectangleD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new instance using the specified latitudes and longitudes.
            </summary>
        </member>
        <member name="M:GeoFramework.RectangleD.ToAspectRatio(GeoFramework.SizeD)">
            <summary>
            Changes the size and shape of the RectangleD to match the aspect ratio of the specified RectangleD.
            </summary>
            <param name="size"></param>
            <returns></returns>
            <remarks>This method will expand a RectangleD outward, from its center point, until
            the ratio of its width to its height matches the specified value.</remarks>
        </member>
        <member name="M:GeoFramework.RectangleD.IsDisjointedFrom(GeoFramework.RectangleD)">
            <summary>
            Returns whether the specified rectangle is not overlapping the current
            instance.
            </summary>
        </member>
        <member name="M:GeoFramework.RectangleD.IsEnclosing(GeoFramework.RectangleD)">
            <summary>
            Indicates if the specified RectangleD is entirely within the current RectangleD.
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.RectangleD.CenterOn(GeoFramework.PointD)">
            <summary>Moves the rectangle so that the specified point is at its center.</summary>
        </member>
        <member name="M:GeoFramework.RectangleD.Clone">
            <summary>
            Returns a copy of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.RectangleD.UnionWith(GeoFramework.PointD)">
            <summary>
            Expands the edges of the RectangleD to contain the specified position.
            </summary>
            <param name="point">A <strong>PointD</strong> object to surround.</param>
            <returns>A <strong>RectangleD</strong> which contains the specified position.</returns>
            <remarks>If the specified position is already enclosed, the current instance will be returned.</remarks>
        </member>
        <member name="M:GeoFramework.RectangleD.RotateAt(GeoFramework.Angle,GeoFramework.PointD)">
            <summary>
            Returns a rectangle enclosing the corner points of the current instance, rotated
            by the specified amount around a specific point.
            </summary>
            <returns>A new <strong>RectangleD</strong> containing the rotated rectangle.</returns>
            <remarks><para>When a rectangle is rotated, the total width and height it occupies may be larger
            than the rectangle's own width and height.  This method calculates the smallest rectangle
            which encloses the rotated rectangle.</para>
            	<para>[TODO: Include before and after picture; this is confusing.]</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.RectangleD.Rotate(GeoFramework.Angle)">
            <summary>
            Returns a rectangle enclosing the corner points of the current instance, rotated
            by the specified amount.
            </summary>
        </member>
        <member name="M:GeoFramework.RectangleD.ToArray">
            <summary>Returns the corner points of the rectangle as an array.</summary>
        </member>
        <member name="M:GeoFramework.RectangleD.ToAspectRatio(System.Double)">
            <summary>
            Changes the size and shape of the RectangleD to match the specified aspect ratio.
            </summary>
            <param name="aspectRatio"></param>
            <returns></returns>
            <remarks>This method will expand a RectangleD outward, from its center point, until
            the ratio of its width to its height matches the specified value.</remarks>
        </member>
        <member name="M:GeoFramework.RectangleD.ToAspectRatio(GeoFramework.RectangleD)">
            <summary>
            Changes the size and shape of the RectangleD to match the aspect ratio of the specified RectangleD.
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
            <remarks>This method will expand a RectangleD outward, from its center point, until
            the ratio of its width to its height matches the specified value.</remarks>
        </member>
        <member name="M:GeoFramework.RectangleD.IsIntersectingWith(GeoFramework.RectangleD)">
            <summary>Returns whether the current instance overlaps the specified rectangle.</summary>
        </member>
        <member name="M:GeoFramework.RectangleD.IsOverlapping(GeoFramework.RectangleD)">
            <summary>
            Indicates if the specified RectangleD shares any of the same 2D space as the current instance.
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.RectangleD.IsInsideOf(GeoFramework.RectangleD)">
            <summary>
            Returns whether the current instance is surrounded on all sides by the specified
            rectangle.
            </summary>
        </member>
        <member name="M:GeoFramework.RectangleD.IsEnclosingCenter(GeoFramework.RectangleD)">
            <summary>
            Returns whether the current instance surrounds the center point of the specified
            rectangle.
            </summary>
        </member>
        <member name="M:GeoFramework.RectangleD.IsAdjacentTo(GeoFramework.RectangleD)">
            <summary>
            Returns whether the specified rectangle shares a side with the specified
            rectangle.
            </summary>
            <returns>A <strong>Boolean</strong>, true if the specified rectangle shares one
            (and only one) side.</returns>
            <remarks>The method will return false if the specified rectangle intersects with the
            current instance.</remarks>
        </member>
        <member name="M:GeoFramework.RectangleD.GetHashCode">
            <summary>Returns a unique code for this instance used in hash tables.</summary>
        </member>
        <member name="M:GeoFramework.RectangleD.Parse(System.String)">
            <summary>
            Parses a string into a RectangleD object.
            </summary>
            <param name="value">A <string>String</string> specifying geographic coordinates defining a rectangle.</param>
            <returns>A <strong>RectangleD</strong> object using the specified coordinates.</returns>
            <remarks>This powerful method will convert points defining a rectangle in the form of a string into
            a RectangleD object.  The string can be </remarks>
        </member>
        <member name="M:GeoFramework.RectangleD.UnionWith(GeoFramework.RectangleD,GeoFramework.RectangleD)">
            <summary>
            Returns the smallest possible RectangleD containing both specified RectangleDs.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.RectangleD.FromArray(GeoFramework.PointD[])">
            <summary>
            Returns a rectangle which encloses the specified points.
            </summary>
            <param name="points">An array of PointD objects to enclose.</param>
            <returns>A <strong>RectangleD</strong> object enclosing the specified points.</returns>
            <remarks>This method is typically used to calculate a rectangle surrounding
            points which have been rotated.  For example, if a rectangle is rotated by 45°, the
            total width it occupies is greater than it's own width.</remarks>
        </member>
        <member name="M:GeoFramework.RectangleD.IntersectionOf(GeoFramework.RectangleD,GeoFramework.RectangleD)">
            <summary>
            Returns the RectangleD formed by the intersection of the two specified RectangleDs.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.RectangleD.op_Addition(GeoFramework.RectangleD,GeoFramework.SizeD)">
            <summary>
            Increases the size of the rectangle by the specified amount.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="P:GeoFramework.RectangleD.Top">
            <summary>Returns the top side of the rectangle.</summary>
            <value>A <see cref="T:GeoFramework.Latitude"></see> object marking the southern-most latitude.</value>
        </member>
        <member name="P:GeoFramework.RectangleD.Bottom">
            <summary>Returns the bottom side of the rectangle.</summary>
            <value>A <see cref="T:GeoFramework.Latitude"></see> object marking the southern-most latitude.</value>
        </member>
        <member name="P:GeoFramework.RectangleD.Left">
            <summary>Returns the left side of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.RectangleD.Right">
            <summary>Returns the right side of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.RectangleD.Height">
            <summary>Returns the top-to-bottom size of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.RectangleD.Width">
            <summary>Returns the left-to-right size of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.RectangleD.Size">
            <summary>Returns the width and height of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.RectangleD.Center">
            <summary>Returns the point at the center of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.RectangleD.UpperLeft">
            <summary>Returns the point at the upper-left corner of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.RectangleD.UpperRight">
            <summary>Returns the point at the upper-right corner of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.RectangleD.LowerLeft">
            <summary>Returns the point at the lower-left corner of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.RectangleD.LowerRight">
            <summary>Returns the point at the lower-right corner of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.RectangleD.AspectRatio">
            <summary>Returns the ratio of the rectangle's width to its height.</summary>
            <remarks>
            This property returns the ratio of the RectangleDs width to its height (width / height).  This
            property gives an indication of the RectangleD's shape.  An aspect ratio of one indicates
            a square, whereas an aspect ratio of two indicates a RectangleD which is twice as wide as
            it is high.  
            </remarks>
        </member>
        <member name="P:GeoFramework.RectangleD.IsEmpty">
            <summary>Indicates if the rectangle has any value.</summary>
        </member>
        <member name="T:GeoFramework.AngleEventArgs">
            <summary>Represents information about an angle when an angle-related event is raised.</summary>
            <remarks>
            This class is used for events which use an <strong>Angle</strong> as a
            parameter.
            </remarks>
            <example>
                This example demonstrates how to use <strong>AngleEventArgs</strong> when raising
                an event. 
                <code lang="VB">
            ' Declare a new event
            Dim MyAngleEvent As AngleEventHandler
             
            Sub Main()
                ' Create an angle of 90°
                Dim MyAngle As New Angle(90);
                ' Raise our custom Event
                RaiseEvent MyAngleEvent(Me, New AngleEventArgs(MyAngle));
            End Sub
                </code>
            	<code lang="CS">
            // Declare a new event
            AngleEventHandler MyAngleEvent;
             
            void Main()
            {
                // Create an angle of 90°
                Angle MyAngle = new Angle(90);
                // Raise our custom event
                if(MyAngleEvent != null)
                    MyAngleEvent(this, new AngleEventArgs(MyAngle));
            }
                </code>
            </example>
            <seealso cref="P:GeoFramework.AngleEventArgs.Angle">Angle Class</seealso>
            <seealso cref="!:AngleEventHandler">AngleEventHandler Delegate</seealso>
        </member>
        <member name="M:GeoFramework.AngleEventArgs.#ctor(GeoFramework.Angle)">
            <summary>
            Creates a new instance containing the specified Angle object.
            </summary>
        </member>
        <member name="P:GeoFramework.AngleEventArgs.Angle">
            <summary>
            Represents information about an angular measurement when an angle-related event is raised.
            </summary>
            <value>An <strong>Angle</strong> object containing a property which has changed.</value>
            <remarks>This class is used by the <see cref="P:GeoFramework.AngleEventArgs.Angle">Angle</see> class to provide notification when hours, minutes, or seconds properties have changed.</remarks>
            <seealso cref="P:GeoFramework.AngleEventArgs.Angle">Angle Class</seealso>
        </member>
        <member name="T:GeoFramework.AreaEventArgs">
            <summary>Represents information about a area when an area-related event is raised.</summary>
            <example>
                This example demonstrates how to use the <strong>AreaEventArgs</strong> class when
                raising an event.
                <code lang="VB">
            ' Declare a new event
            Dim MyAreaEvent As AreaEventHandler
             
            Sub Main()
                ' Create a Area of 125 kilometers
                Dim MyArea As New Area(125, AreaUnit.SquareKilometers)
                ' Raise our custom event
                RaiseEvent MyAreaEvent(Me, New AreaEventArgs(MyArea))
            End Sub
                </code>
            	<code lang="CS">
            // Declare a new event
            AreaEventHandler MyAreaEvent;
             
            void Main()
            {
                // Create a Area of 125 kilometers
                Area MyArea = new Area(125, AreaUnit.SquareKilometers);
                // Raise our custom event
                if(MyAreaEvent != null)
                    MyAreaEvent(this, New AreaEventArgs(MyArea));
            }
                </code>
            </example>
            <seealso cref="P:GeoFramework.AreaEventArgs.Area">Area Class</seealso>
            <seealso cref="!:AreaEventHandler">AreaEventHandler Delegate</seealso>
        </member>
        <member name="M:GeoFramework.AreaEventArgs.#ctor(GeoFramework.Area)">
            <summary>
            Creates a new instance containing the specified Area object.
            </summary>
        </member>
        <member name="P:GeoFramework.AreaEventArgs.Area">
            <summary>
            Represents information about a Area measurement when an Area-related event is raised.
            </summary>
            <value>A <strong>Area</strong> object containing a property which has changed.</value>
            <remarks>This class is used by the <see cref="P:GeoFramework.AreaEventArgs.Area">Area</see> class to provide notification 
            when hours, minutes, or seconds properties have changed.</remarks>
            <seealso cref="P:GeoFramework.AreaEventArgs.Area">Area Class</seealso>
        </member>
        <member name="T:GeoFramework.AzimuthEventArgs">
            <summary>Represents information about an angle when an angle-related event is raised.</summary>
            <remarks>
            This class is used for events which use an <strong>Azimuth</strong> as a
            parameter.
            </remarks>
            <example>
                This example demonstrates how to use <strong>AzimuthEventArgs</strong> when raising
                an event. 
                <code lang="VB">
            ' Declare a new event
            Dim MyAzimuthEvent As AzimuthEventHandler
             
            Sub Main()
                ' Create an angle of 90°
                Dim MyAzimuth As New Azimuth(90);
                ' Raise our custom Event
                RaiseEvent MyAzimuthEvent(Me, New AzimuthEventArgs(MyAzimuth));
            End Sub
                </code>
            	<code lang="CS">
            // Declare a new event
            AzimuthEventHandler MyAzimuthEvent;
             
            void Main()
            {
                // Create an angle of 90°
                Azimuth MyAzimuth = new Azimuth(90);
                // Raise our custom event
                if(MyAzimuthEvent != null)
                    MyAzimuthEvent(this, new AzimuthEventArgs(MyAzimuth));
            }
                </code>
            </example>
            <seealso cref="P:GeoFramework.AzimuthEventArgs.Azimuth">Azimuth Class</seealso>
            <seealso cref="!:AzimuthEventHandler">AzimuthEventHandler Delegate</seealso>
        </member>
        <member name="M:GeoFramework.AzimuthEventArgs.#ctor(GeoFramework.Azimuth)">
            <summary>
            Creates a new instance containing the specified Azimuth object.
            </summary>
        </member>
        <member name="P:GeoFramework.AzimuthEventArgs.Azimuth">
            <summary>
            Represents information about an angular measurement when an angle-related event is raised.
            </summary>
            <value>An <strong>Azimuth</strong> object containing a property which has changed.</value>
            <remarks>This class is used by the <see cref="P:GeoFramework.AzimuthEventArgs.Azimuth">Azimuth</see> class to provide notification when hours, minutes, or seconds properties have changed.</remarks>
            <seealso cref="P:GeoFramework.AzimuthEventArgs.Azimuth">Azimuth Class</seealso>
        </member>
        <member name="P:GeoFramework.CancelableEventArgs.Canceled">
            <summary>
            Controls whether an operation is to be aborted.
            </summary>
            <remarks>This property, when set to True will signal that a pending operation should not execute.  For example,
            an event which is raised immediately before connecting would check this property to determine whether to 
            continue connecting, or exit.</remarks>
        </member>
        <member name="T:GeoFramework.DistanceEventArgs">
            <summary>Represents information about a distance when an distance-related event is raised.</summary>
            <remarks>This class is typically used for events in the <see cref="P:GeoFramework.DistanceEventArgs.Distance">Distance</see> class to 
            provide notification when hours, minutes, decimal minutes or seconds properties have changed.</remarks>
            <example>This example demonstrates how to use this class when raising an event.
            <code lang="VB">
            ' Declare a new event
            Dim MyDistanceEvent As DistanceEventHandler
            ' Create a distance of 125 kilometers
            Dim MyDistance As New Distance(125, DistanceUnit.Kilometers)
            
            Sub Main()
              ' Raise our custom event
              RaiseEvent MyDistanceEvent(Me, New DistanceEventArgs(MyDistance))
            End Sub
            </code>
            <code lang="C#">
            // Declare a new event
            DistanceEventHandler MyDistanceEvent;
            // Create a distance of 125 kilometers
            Distance MyDistance = new Distance(125, DistanceUnit.Kilometers);
            
            void Main()
            {
              // Raise our custom event
              MyDistanceEvent(this, New DistanceEventArgs(MyDistance));
            }
            </code>
            </example>
            <seealso cref="P:GeoFramework.DistanceEventArgs.Distance">Distance Class</seealso>
            <seealso cref="!:DistanceEventHandler">DistanceEventHandler Delegate</seealso>
        </member>
        <member name="M:GeoFramework.DistanceEventArgs.#ctor(GeoFramework.Distance)">
            <summary>
            Creates a new instance containing the specified Distance object.
            </summary>
        </member>
        <member name="P:GeoFramework.DistanceEventArgs.Distance">
            <summary>
            Represents information about a distance measurement when an distance-related event is raised.
            </summary>
            <value>A <strong>Distance</strong> object containing a property which has changed.</value>
            <remarks>This class is used by the <see cref="P:GeoFramework.DistanceEventArgs.Distance">Distance</see> class to provide notification 
            when hours, minutes, or seconds properties have changed.</remarks>
            <seealso cref="P:GeoFramework.DistanceEventArgs.Distance">Distance Class</seealso>
        </member>
        <member name="T:GeoFramework.ElevationEventArgs">
            <summary>Represents information about an angle when an angle-related event is raised.</summary>
            <remarks>
            This class is used for events which use an <strong>Elevation</strong> as a
            parameter.
            </remarks>
            <example>
                This example demonstrates how to use <strong>ElevationEventArgs</strong> when raising
                an event. 
                <code lang="VB">
            ' Declare a new event
            Dim MyElevationEvent As ElevationEventHandler
             
            Sub Main()
                ' Create an angle of 90°
                Dim MyElevation As New Elevation(90);
                ' Raise our custom Event
                RaiseEvent MyElevationEvent(Me, New ElevationEventArgs(MyElevation));
            End Sub
                </code>
            	<code lang="CS">
            // Declare a new event
            ElevationEventHandler MyElevationEvent;
             
            void Main()
            {
                // Create an angle of 90°
                Elevation MyElevation = new Elevation(90);
                // Raise our custom event
                if(MyElevationEvent != null)
                    MyElevationEvent(this, new ElevationEventArgs(MyElevation));
            }
                </code>
            </example>
            <seealso cref="P:GeoFramework.ElevationEventArgs.Elevation">Elevation Class</seealso>
            <seealso cref="!:ElevationEventHandler">ElevationEventHandler Delegate</seealso>
        </member>
        <member name="M:GeoFramework.ElevationEventArgs.#ctor(GeoFramework.Elevation)">
            <summary>
            Creates a new instance containing the specified Elevation object.
            </summary>
        </member>
        <member name="P:GeoFramework.ElevationEventArgs.Elevation">
            <summary>
            Represents information about an angular measurement when an angle-related event is raised.
            </summary>
            <value>An <strong>Elevation</strong> object containing a property which has changed.</value>
            <remarks>This class is used by the <see cref="P:GeoFramework.ElevationEventArgs.Elevation">Elevation</see> class to provide notification when hours, minutes, or seconds properties have changed.</remarks>
            <seealso cref="P:GeoFramework.ElevationEventArgs.Elevation">Elevation Class</seealso>
        </member>
        <member name="T:GeoFramework.LatitudeEventArgs">
            <summary>Represents information about an angle when an angle-related event is raised.</summary>
            <remarks>
            This class is used for events which use an <strong>Latitude</strong> as a
            parameter.
            </remarks>
            <example>
                This example demonstrates how to use <strong>LatitudeEventArgs</strong> when raising
                an event. 
                <code lang="VB">
            ' Declare a new event
            Dim MyLatitudeEvent As LatitudeEventHandler
             
            Sub Main()
                ' Create an angle of 90°
                Dim MyLatitude As New Latitude(90);
                ' Raise our custom Event
                RaiseEvent MyLatitudeEvent(Me, New LatitudeEventArgs(MyLatitude));
            End Sub
                </code>
            	<code lang="CS">
            // Declare a new event
            LatitudeEventHandler MyLatitudeEvent;
             
            void Main()
            {
                // Create an angle of 90°
                Latitude MyLatitude = new Latitude(90);
                // Raise our custom event
                if(MyLatitudeEvent != null)
                    MyLatitudeEvent(this, new LatitudeEventArgs(MyLatitude));
            }
                </code>
            </example>
            <seealso cref="P:GeoFramework.LatitudeEventArgs.Latitude">Latitude Class</seealso>
            <seealso cref="!:LatitudeEventHandler">LatitudeEventHandler Delegate</seealso>
        </member>
        <member name="M:GeoFramework.LatitudeEventArgs.#ctor(GeoFramework.Latitude)">
            <summary>
            Creates a new instance containing the specified Latitude object.
            </summary>
        </member>
        <member name="P:GeoFramework.LatitudeEventArgs.Latitude">
            <summary>
            Represents information about an angular measurement when an angle-related event is raised.
            </summary>
            <value>An <strong>Latitude</strong> object containing a property which has changed.</value>
            <remarks>This class is used by the <see cref="P:GeoFramework.LatitudeEventArgs.Latitude">Latitude</see> class to provide notification when hours, minutes, or seconds properties have changed.</remarks>
            <seealso cref="P:GeoFramework.LatitudeEventArgs.Latitude">Latitude Class</seealso>
        </member>
        <member name="T:GeoFramework.LongitudeEventArgs">
            <summary>Represents information about an angle when an angle-related event is raised.</summary>
            <remarks>
            This class is used for events which use an <strong>Longitude</strong> as a
            parameter.
            </remarks>
            <example>
                This example demonstrates how to use <strong>LongitudeEventArgs</strong> when raising
                an event. 
                <code lang="VB">
            ' Declare a new event
            Dim MyLongitudeEvent As LongitudeEventHandler
             
            Sub Main()
                ' Create an angle of 90°
                Dim MyLongitude As New Longitude(90);
                ' Raise our custom Event
                RaiseEvent MyLongitudeEvent(Me, New LongitudeEventArgs(MyLongitude));
            End Sub
                </code>
            	<code lang="CS">
            // Declare a new event
            LongitudeEventHandler MyLongitudeEvent;
             
            void Main()
            {
                // Create an angle of 90°
                Longitude MyLongitude = new Longitude(90);
                // Raise our custom event
                if(MyLongitudeEvent != null)
                    MyLongitudeEvent(this, new LongitudeEventArgs(MyLongitude));
            }
                </code>
            </example>
            <seealso cref="P:GeoFramework.LongitudeEventArgs.Longitude">Longitude Class</seealso>
            <seealso cref="!:LongitudeEventHandler">LongitudeEventHandler Delegate</seealso>
        </member>
        <member name="M:GeoFramework.LongitudeEventArgs.#ctor(GeoFramework.Longitude)">
            <summary>
            Creates a new instance containing the specified Longitude object.
            </summary>
        </member>
        <member name="P:GeoFramework.LongitudeEventArgs.Longitude">
            <summary>
            Represents information about an angular measurement when an angle-related event is raised.
            </summary>
            <value>An <strong>Longitude</strong> object containing a property which has changed.</value>
            <remarks>This class is used by the <see cref="P:GeoFramework.LongitudeEventArgs.Longitude">Longitude</see> class to provide notification when hours, minutes, or seconds properties have changed.</remarks>
            <seealso cref="P:GeoFramework.LongitudeEventArgs.Longitude">Longitude Class</seealso>
        </member>
        <member name="M:GeoFramework.TimeSpanEventArgs.#ctor(System.TimeSpan)">
            <summary>
            Creates a new instance containing the specified TimeSpan object.
            </summary>
            <param name="timeSpan">A <strong>TimeSpan</strong> object describing a length of time.</param>
            <remarks></remarks>
            <seealso cref="P:GeoFramework.TimeSpanEventArgs.TimeSpan">TimeSpan Property</seealso>
            <seealso cref="T:System.TimeSpan">TimeSpan Structure</seealso>
        </member>
        <member name="P:GeoFramework.TimeSpanEventArgs.TimeSpan">
            <summary>
            Indicates a length of time which is the target of the event.
            </summary>
            <value>A <strong>TimeSpan</strong> object describing a length of time.</value>
            <remarks></remarks>
            <seealso cref="T:System.TimeSpan">TimeSpan Structure</seealso>
        </member>
        <member name="T:GeoFramework.DateTimeEventArgs">
            <summary>
            Represents information about the date and time reported by the GPS device.
            </summary>
        </member>
        <member name="M:GeoFramework.DateTimeEventArgs.#ctor(System.DateTime)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="dateTime">A DateTime object containing a date and time reported by the GPS device.</param>
        </member>
        <member name="M:GeoFramework.DateTimeEventArgs.#ctor(System.DateTime,System.Boolean)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="dateTime">A DateTime object containing a date and time reported by the GPS device.</param>
            <param name="systemClockUpdated">Indicates whether the system clock was updated to match this DateTime.</param>
        </member>
        <member name="P:GeoFramework.DateTimeEventArgs.DateTime">
            <summary>
            A date and time value in UTC time (not adjusted for the local time zone).
            </summary>
            <value>A DateTime object containing a date and time reported by the GPS device.</value>
            <remarks>This date and time value is not adjusted to the local time zone.  Use the 
            <see cref="M:System.DateTime.ToLocalTime">ToLocalTime</see> method to adjust to local time.</remarks>
            <seealso cref="T:System.DateTime">DateTime Class</seealso>
            <seealso cref="M:System.DateTime.ToLocalTime">ToLocalTime Method (DateTime Class)</seealso>
        </member>
        <member name="P:GeoFramework.DateTimeEventArgs.SystemClockUpdated">
            <summary>
            Indicates whether the system clock updated to match the <see cref="P:GeoFramework.DateTimeEventArgs.DateTime"/>.
            </summary>
            <value>
            <see langword="true">True</see> if the system clock was updated; otherwise, <see langword="false"/>.
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="T:GeoFramework.ExceptionEventArgs">
            <summary>
            Represents information about an exception when an error-related event is raised.
            </summary>
            <remarks>This object is used throughout the GPS.NET framework to provide notification when
            either of two situations occur:
            
            <list>
            <item>An exception is thrown which cannot be trapped via a Try..Catch block (such as from a separate thread)</item>
            <item>An exception is thrown which can be recovered from and should not halt the current operation.</item>
            </list>
            Most frequently, this class is used when a parsing exception occurs via the Parse method or during automatic
            data collection.</remarks>
            <example>This example demonstrates how to use this class when raising an event.
            <code lang="VB">
            ' Create a new exception
            Dim MyException As New ApplicationException("The error was successfully created.")
            ' Declare a new event
            Dim MyErrorEvent As ExceptionEventHandler
            
            Sub Main()
              ' Raise our custom event
              RaiseEvent MyErrorEvent(Me, New ExceptionEventArgs(MyException))
            End Sub
            </code>
            <code lang="C#">
            // Create a new exception
            ApplicationException MyException = new ApplicationException("The error was successfully created.")
            // Declare a new event
            ExceptionEventHandler MyErrorEvent;
            
            void Main()
            {
              // Raise our custom event
              MySatelliteEvent(this, New ExceptionEventArgs(MyException));
            }
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Creates a new instance containing the specified exception object.
            </summary>
            <param name="exception">An <strong>Exception</strong> object or derivitive describing the error.</param>
        </member>
        <member name="P:GeoFramework.ExceptionEventArgs.Exception">
            <summary>
            Indicates information about the error and its location within a module.
            </summary>
            <value>An <strong>ApplicationException</strong> object or derivitive describing the error.</value>
        </member>
        <member name="T:GeoFramework.CartesianPoint">
            <summary>
            Represents an Earth-centered, Earth-fixed (ECEF) Cartesian coordinate.
            </summary>
        </member>
        <member name="M:GeoFramework.CartesianPoint.#ctor(GeoFramework.Distance,GeoFramework.Distance,GeoFramework.Distance)">
            <summary>
            Creates a new instance using the specified X, Y and Z values.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:GeoFramework.CartesianPoint.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance from the specified block of GML.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="F:GeoFramework.CartesianPoint.Empty">
            <summary>
            Returns a cartesian coordinate with empty values.
            </summary>
        </member>
        <member name="F:GeoFramework.CartesianPoint.Infinity">
            <summary>
            Returns a cartesian point with infinite values.
            </summary>
        </member>
        <member name="F:GeoFramework.CartesianPoint.Invalid">
            <summary>
            Represents an invalid or unspecified value.
            </summary>
        </member>
        <member name="M:GeoFramework.CartesianPoint.ToPosition3D">
            <summary>
            Converts the current instance to a geodetic (latitude/longitude) coordinate.
            </summary>
            <returns>A <strong>Position</strong> object containing the converted result.</returns>
            <remarks>The conversion formula will convert the Cartesian coordinate to
            latitude and longitude using the WGS1984 ellipsoid (the default ellipsoid for
            GPS coordinates).</remarks>
        </member>
        <member name="M:GeoFramework.CartesianPoint.ToPosition3D(GeoFramework.Ellipsoid)">
            <summary>
            Converts the current instance to a geodetic (latitude/longitude) coordinate using the specified ellipsoid.
            </summary>
            <returns>A <strong>Position</strong> object containing the converted result.</returns>
            <remarks>The conversion formula will convert the Cartesian coordinate to
            latitude and longitude using the WGS1984 ellipsoid (the default ellipsoid for
            GPS coordinates).  The resulting three-dimensional coordinate is accurate to within two millimeters
            (2 mm).</remarks>
        </member>
        <member name="M:GeoFramework.CartesianPoint.DistanceTo(GeoFramework.CartesianPoint)">
            <summary>
            Returns the distance from the current instance to the specified cartesian point.
            </summary>
            <param name="point">A <strong>CartesianPoint</strong> object representing the end of a segment.</param>
            <returns></returns>
        </member>
        <member name="P:GeoFramework.CartesianPoint.X">
            <summary>
            Returns the horizontal (longitude) portion of a Cartesian coordinate.
            </summary>
        </member>
        <member name="P:GeoFramework.CartesianPoint.Y">
            <summary>
            Returns the vertical (latitude) portion of a Cartesian coordinate.
            </summary>
        </member>
        <member name="P:GeoFramework.CartesianPoint.Z">
            <summary>
            Returns the altitude portion of a Cartesian coordinate.
            </summary>
        </member>
        <member name="P:GeoFramework.CartesianPoint.IsEmpty">
            <summary>
            Indicates whether the current instance has no value.
            </summary>
        </member>
        <member name="P:GeoFramework.CartesianPoint.IsInvalid">
            <summary>
            Indicates whether the current instance is invalid or unspecified.
            </summary>
        </member>
    </members>
</doc>
