
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[GetProfileCompaniesWebSite] 
	 @ServiceID INT = NULL,
	 @FromPrice DECIMAL(18,0) = NULL,
	 @ToPrice DECIMAL(18,0) = NULL,
	 @FromDate DateTime = NULL,
	 @ToDate DateTime = NULL,
	 @IsToday BIT = NULL,
	 @KeySearch NVARCHAR(100),
	 @CurrentLat FLOAT = NULL,
	 @CurrentLong FLOAT = NULL,
	 @Distance FLOAT = NULL,
	 @CustID INT = NULL,
	 @Skip INT = NULL,
	 @Take INT = NULL,
	 @TotalItems INT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	
	IF(@CustID IS NULL) SET @CustID = 0
	IF(@Skip IS NULL) SET @Skip = 0
	IF(@Take IS NULL) SET @Take = 10
	
	IF(@Distance IS NULL) SET @Distance = 0.0
	
	IF(@KeySearch IS NOT NULL)
	BEGIN
		SET @KeySearch = '%' + LOWER(@KeySearch) + '%'
	END
	
	DECLARE @LimitTime Time
	SET @LimitTime = '00:00:10'
	
	DECLARE @FromHour INT
	DECLARE @ToHour INT
	DECLARE @DateOfWeek INT
	SET @DateOfWeek = (select datepart(dw,getdate()) - 1)
	
	DECLARE @NeedSearchHour BIT
	SET @NeedSearchHour = 1
	
	DECLARE @DateTimeUTCNow DATETIME
	SET @DateTimeUTCNow = GETUTCDATE()
	
	DECLARE @DateUTCNow DATETIME
	SET @DateUTCNow = CONVERT(DATE, @DateTimeUTCNow)
	
	IF(@FromDate IS NULL OR @ToDate IS NULL) SET @NeedSearchHour = 0
	IF(CONVERT(DATE, @FromDate) = @DateUTCNow AND CONVERT(DATE, @ToDate) = @DateUTCNow) SET @NeedSearchHour = 0
	
	IF(@NeedSearchHour = 1)
	BEGIN
		SELECT @FromHour = DATEPART(hh, @FromDate)
		SELECT @ToHour = DATEPART(hh, @ToDate)
	END
	
	SET @DateUTCNow = @DateUTCNow + @LimitTime
	
	IF(@ServiceID IS NULL) SET @ServiceID = 0
	IF(@IsToday IS NULL) SET @IsToday = 0
	IF(@FromPrice IS NULL) SET @FromPrice = 0
	IF(@ToPrice IS NULL) SET @ToPrice = 0
	
	IF OBJECT_ID('tempdb..#TempProfileCompanies') IS NOT NULL DROP TABLE #TempProfileCompanies
	
	CREATE TABLE #TempProfileCompanies (RowID INT, ProfileID INT, IsFeature BIT, Distance FLOAT)
	INSERT INTO #TempProfileCompanies(RowID , ProfileID, IsFeature, Distance)
	SELECT DISTINCT 0 AS RowID, pc.ProfileID, 
		CASE WHEN EXISTS(SELECT 1 FROM FeaturedCompany fc WHERE fc.ProfileID = pc.ProfileID) THEN 1 ELSE 0 END AS IsFeature,
		(ROUND(dbo.fnGetDistance(@CurrentLat, @CurrentLong, pc.Latitude, pc.Longitude, 'Kilometers'), 1)) AS Distance
	FROM ProfileCompany pc
		LEFT OUTER JOIN ServiceCompany sc ON pc.ProfileID = sc.ProfileID
	WHERE pc.CompanyStatusID = 7
		AND (@ServiceID = 0 OR sc.ServiceID = @ServiceID)
		AND (@ToPrice = 0 OR EXISTS(SELECT 1 FROM [Service] s WHERE s.ServiceID = sc.ServiceID AND sc.Price BETWEEN @FromPrice AND @ToPrice))
		AND (@NeedSearchHour = 0 OR EXISTS(SELECT 1 FROM EmployeeService es
											JOIN CompanyEmployee ce ON ce.EmployeeID = es.CompanyEmployeeID
											JOIN EmployeeHour eh ON eh.CompanyEmployeeID = ce.EmployeeID
											WHERE es.ServiceCompanyID = sc.ServiceCompanyID
												AND ( 
														(cast(cast(eh.[FromHour] AS varchar(2)) AS INT) >= @FromHour AND cast(cast(eh.[FromHour] AS varchar(2)) AS INT) < @ToHour )
													OR  (cast(cast(eh.[ToHour] AS varchar(2)) AS INT) > @FromHour AND cast(cast(eh.[ToHour] AS varchar(2)) AS INT) <= @ToHour )
													OR  (cast(cast(eh.[FromHour] AS varchar(2)) AS INT) <= @FromHour AND cast(cast(eh.[ToHour] AS varchar(2)) AS INT) >= @ToHour )
												)
											))
		AND (@IsToday = 0 OR EXISTS(SELECT 1 FROM EmployeeService es
											JOIN CompanyEmployee ce ON ce.EmployeeID = es.CompanyEmployeeID
											JOIN EmployeeHour eh ON eh.CompanyEmployeeID = ce.EmployeeID
											WHERE es.ServiceCompanyID = sc.ServiceCompanyID
												AND eh.IsPreview = 0 AND eh.[DayOfWeek] = @DateOfWeek
												AND eh.ToHour + @DateUTCNow > @DateTimeUTCNow
											))
		AND (@KeySearch IS NULL OR (pc.Name IS NOT NULL AND LOWER(pc.Name) LIKE @KeySearch))
		AND (@Distance = 0.0 OR (ROUND(dbo.fnGetDistance(@CurrentLat, @CurrentLong, pc.Latitude, pc.Longitude, 'Kilometers'), 1)) <= @Distance)
		
	SET @TotalItems = (SELECT COUNT(*) FROM #TempProfileCompanies)
		
	IF OBJECT_ID('tempdb..#TempProfileCompaniesRowID') IS NOT NULL DROP TABLE #TempProfileCompaniesRowID
	CREATE TABLE #TempProfileCompaniesRowID (RowID INT, ProfileID INT, IsFeature BIT, Distance FLOAT)
	CREATE CLUSTERED INDEX TempProfileCompanieIndex ON #TempProfileCompanies(ProfileID)
	INSERT INTO #TempProfileCompaniesRowID(RowID, ProfileID, IsFeature, Distance)
	SELECT (ROW_NUMBER() OVER (Order By IsFeature DESC, Distance)) RowID, ProfileID, IsFeature, Distance
	FROM #TempProfileCompanies
	
	DELETE #TempProfileCompanies
	
	SET @Skip = @Skip + 1
	SET @Take = @Skip + @Take - 1
	
	INSERT INTO #TempProfileCompanies(RowID , ProfileID, IsFeature, Distance)
	SELECT RowID, ProfileID, IsFeature, Distance
	FROM #TempProfileCompaniesRowID
	WHERE RowID BETWEEN @Skip AND @Take
	
	IF OBJECT_ID('tempdb..#EmployeeHours') IS NOT NULL DROP TABLE #EmployeeHours
	CREATE TABLE #EmployeeHours (ProfileID INT, ID INT, FromHourString Time, ToHourString Time, [DayOfWeek] INT, IsDayly BIT, EmployeeID INT, EmployeeName NVARCHAR(500))
	INSERT INTO #EmployeeHours(ProfileID, ID, FromHourString, ToHourString, [DayOfWeek], IsDayly, EmployeeID, EmployeeName)
	SELECT DISTINCT pc.ProfileID,
	eh.ID,
	eh.FromHour FromHourString,
	eh.ToHour ToHourString,
	eh.[DayOfWeek],
	eh.IsPreview,
	ce.EmployeeID,
	ce.EmployeeName
	FROM #TempProfileCompanies pc JOIN CompanyEmployee ce ON pc.ProfileID = ce.ProfileCompanyID
	JOIN EmployeeHour eh ON eh.CompanyEmployeeID = ce.EmployeeID
	WHERE EXISTS(SELECT top 1 es.CompanyEmployeeID FROM EmployeeService es WHERE es.CompanyEmployeeID = ce.EmployeeID)
		
	IF OBJECT_ID('tempdb..#InstructorClassSchedulers') IS NOT NULL DROP TABLE #InstructorClassSchedulers
	CREATE TABLE #InstructorClassSchedulers (ProfileID INT, ID INT, ServiceCompanyID INT, ServiceName NVARCHAR(200), AttendeesNumber INT ,FromHourString Time, ToHourString Time, [DayOfWeek] INT, IsDayly BIT, EmployeeID INT, EmployeeName NVARCHAR(500))
	INSERT INTO #InstructorClassSchedulers(ProfileID, ID, ServiceCompanyID,ServiceName,AttendeesNumber, FromHourString, ToHourString, [DayOfWeek], IsDayly, EmployeeID, EmployeeName)
	SELECT DISTINCT pc.ProfileID,
	ics.ID ID,
	ic.ServiceCompanyID ServiceCompanyID,
	scp.ServiceName,
	scp.AttendeesNumber,
	ics.FromHour FromHourString,
	ics.ToHour ToHourString,
	ics.[DayOfWeek],
	ics.IsPreview,
	ce.EmployeeID,
	ce.EmployeeName
	FROM #TempProfileCompanies pc 
	JOIN CompanyEmployee ce ON pc.ProfileID = ce.ProfileCompanyID
	JOIN EmployeeService  ic on ce.EmployeeID = ic.CompanyEmployeeID
	JOIN InstructorClassScheduler ics on ic.ID = ics.InstructorClassID
	JOIN ServiceCompany scp on scp.ServiceCompanyID =ic.ServiceCompanyID		
	WHERE EXISTS(SELECT top 1 es.CompanyEmployeeID FROM EmployeeService es WHERE es.CompanyEmployeeID = ce.EmployeeID)
	
	SELECT pc.*, t.IsFeature IsFeature, t.Distance Distance,
		CASE WHEN @CustID <> 0 AND EXISTS(SELECT 1 FROM   favorites f WHERE  f.profileid = t.profileid 
                  AND f.custid = @CustID) THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END AS IsUserFavorite,
			(SELECT ch.CompanyHourID,
					ch.FromHour FromHourString,
					ch.ToHour ToHourString,
					ch.[DayOfWeek],
					ch.IsDaily
				FROM CompanyHour AS ch
				WHERE ch.ProfileCompanyID = t.ProfileID
				FOR XML PATH('CompanyHour'),					
				ROOT('CompanyHours')
			) AS CompanyHoursStr,
		    (
				SELECT * FROM #EmployeeHours eh WHERE eh.ProfileID = t.ProfileID
				FOR XML PATH('EmployeeHour'),				
				ROOT('EmployeeHours')
			) AS EmployeeHoursStr,
			(	
				SELECT * FROM #InstructorClassSchedulers eh 				
				WHERE eh.ProfileID = t.ProfileID
				FOR XML PATH('EmployeeHour'),				
				ROOT('EmployeeHours')
			) AS InstructorClassSchedulerStr,
			Stuff((SELECT ',' + s.servicename 
                       FROM   [Service] s 
                       WHERE  EXISTS (SELECT 1 
                                      FROM   servicecompany subsc 
                                      WHERE  subsc.profileid = t.profileid 
                                             AND s.serviceid = subsc.serviceid
                                             AND s.ParentServiceID is null) 
                       ORDER  BY s.servicename 
                       FOR xml path('')), 1, 1, '') 
                ListServices,
       CASE WHEN EXISTS (SELECT 1 FROM CompanyMedia cm WHERE cm.ProfileID = t.ProfileID AND cm.IsVideo IS NOT NULL AND cm.IsVideo = 1)
		THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END AS IsVideo,
       (SELECT CASE 
                          WHEN Avg(r.ratingvalue) IS NULL THEN 0
                          ELSE Avg(r.ratingvalue) 
                        END 
                 FROM   rating r 
                 WHERE  EXISTS(SELECT 1 
                               FROM   servicecompany subsc2 
                               WHERE  subsc2.profileid = t.profileid 
                                      AND subsc2.servicecompanyid = 
                                          r.servicecompanyid)) Rate,
        (SELECT CASE 
                          WHEN COUNT(*) IS NULL THEN 0
                          ELSE COUNT(*) 
                        END 
                 FROM   rating r 
                 WHERE  EXISTS(SELECT 1 
                               FROM   servicecompany subsc2 
                               WHERE  subsc2.profileid = t.profileid 
                                      AND subsc2.servicecompanyid = 
                                          r.servicecompanyid)) TotalReviews,
	(select top 1 m.LocationData from  dbo.Media m 
	JOIN dbo.CompanyMedia cm on m.MediaID =cm.MediaID
	where cm.ProfileID= pc.ProfileID and cm.IsLogo IS NOT NULL AND cm.IsLogo = 1)
	AS LogoMediaId,
	(SELECT DISTINCT e.EventID,
		e.Name,
		e.StartDate,
		e.EndDate,
		cevent.CompanyEventID,
		(SELECT COUNT(*) FROM [CompanyServiceEvent] cse1 
		join ServiceCompany sc on cse1.ServiceCompanyID = sc.ServiceCompanyID
		WHERE CompanyEventID = cevent.CompanyEventID and ServiceTypeId = 0) AS CompanyServiceEventsNumber,
		(SELECT COUNT(*) FROM [CompanyServiceEvent] cse2 
		join ServiceCompany sc on cse2.ServiceCompanyID = sc.ServiceCompanyID
		WHERE CompanyEventID = cevent.CompanyEventID and ServiceTypeId = 1) AS ClassEventsNumber
		FROM CompanyEvent AS cevent
		JOIN [Event] e ON cevent.EventID = e.EventID
		JOIN [CompanyServiceEvent] cse on  cevent.CompanyEventID = cse.CompanyEventID
		WHERE cevent.ProfileCompanyID = t.ProfileID		
		FOR XML PATH('Event'),					
		ROOT('Events')
	) AS CompanyEventsStr
				
	FROM #TempProfileCompanies t JOIN ProfileCompany pc ON t.ProfileID = pc.ProfileID
	ORDER BY t.RowID
	
	DROP TABLE #EmployeeHours	
	DROP TABLE #InstructorClassSchedulers	
	DROP TABLE #TempProfileCompaniesRowID
	DROP TABLE #TempProfileCompanies
	
END